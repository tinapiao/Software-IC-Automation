/// EXTRACTION DECK

// OPTION SETTINGS
//lvs_report_file "lvsrep";
mask_svdb_dir "svdb";
input_scale 2000;
grid 1;
unit -length U;
lvs_write_netlist -layout lvs.sp
lvs_write_netlist -source sch.sp
keep_layers;
virtual_connect -colon yes;
lvs_compare_port_names yes;

// LAYER DEFINITIONS
layer_def Active  1001;
layer_map 10 -datatype eq 0  1001;
layer_def Active_dummy  1002;
layer_map 10 -datatype eq 10  1002;
layer_def Active_fin  1003;
layer_map 10 -datatype eq 5  1003;
layer_def Active_label  1004;
layer_map 10 -datatype eq 46  1004;
layer_def Active_pin  1005;
layer_map 10 -texttype eq 45  1005;
layer_def BuriedNWell  1006;
layer_map 3 -datatype eq 0  1006;
layer_def CMT  1007;
layer_map 60 -datatype eq 0  1007;
layer_def CutActive  1008;
layer_map 10 -datatype eq 20  1008;
layer_def CutPoly  1009;
layer_map 21 -datatype eq 0  1009;
layer_def FinArea_fin48  1010;
layer_map 300 -datatype eq 0  1010;
layer_def FinArea_type2  1011;
layer_map 350 -datatype eq 0  1011;
layer_def FinArea_type3  1012;
layer_map 400 -datatype eq 0  1012;
layer_def LiAct  1013;
layer_map 22 -datatype eq 0  1013;
layer_def LiPo  1014;
layer_map 24 -datatype eq 0  1014;
layer_def M1  1015;
layer_map 30 -datatype eq 0  1015;
layer_def M1_fill  1016;
layer_map 30 -datatype eq 11  1016;
layer_def M1_label  1017;
layer_map 30 -datatype eq 46  1017;
layer_def M1_mask1_unlock  1018;
layer_map 30 -datatype eq 1  1018;
layer_def M1_mask1_lock  1019;
layer_map 30 -datatype eq 2  1019;
layer_def M1_mask2_unlock  1020;
layer_map 30 -datatype eq 3  1020;
layer_def M1_mask2_lock  1021;
layer_map 30 -datatype eq 4  1021;
layer_def M1_pin 1022;
layer_map 30 -texttype eq 45  1022;
layer_def M2  1028;
layer_map 34 -datatype eq 0  1028;
layer_def M2_fill  1030;
layer_map 34 -datatype eq 11  1030;
layer_def M2_label  1031;
layer_map 34 -datatype eq 46  1031;
layer_def M2_mask1_unlock  1032;
layer_map 34 -datatype eq 1  1032;
layer_def M2_mask1_lock  1033;
layer_map 34 -datatype eq 2  1033;
layer_def M2_mask2_unlock  1034;
layer_map 34 -datatype eq 3  1034;
layer_def M2_mask2_lock  1035;
layer_map 34 -datatype eq 4  1035;
layer_def M2_pin  1036;
layer_map 34 -texttype eq 45  1036;
layer_def M3  1040;
layer_map 38 -datatype eq 0  1040;
layer_def M3_fill  1041;
layer_map 38 -datatype eq 11  1041;
layer_def M3_label  1042;
layer_map 38 -datatype eq 46  1042;
layer_def M3_mask1_unlock  1043;
layer_map 38 -datatype eq 1  1043;
layer_def M3_mask1_lock  1044;
layer_map 38 -datatype eq 2  1044;
layer_def M3_mask2_unlock  1045;
layer_map 38 -datatype eq 3  1045;
layer_def M3_mask2_lock  1046;
layer_map 38 -datatype eq 4  1046;
layer_def M3_pin  1047;
layer_map 38 -texttype eq 45  1047;
layer_def M4  1054;
layer_map 42 -datatype eq 0  1054;
layer_def M4_fill  1062;
layer_map 42 -datatype eq 11  1062;
layer_def M4_label  1063;
layer_map 42 -datatype eq 46  1063;
layer_def M4_pin  1066;
layer_map 42 -texttype eq 45  1066;
layer_def M5  1067;
layer_map 46 -datatype eq 0  1067;
layer_def M5_fill  1075;
layer_map 46 -datatype eq 11  1075;
layer_def M5_label  1076;
layer_map 46 -datatype eq 46  1076;
layer_def M5_mask1  1077;
layer_map 46 -datatype eq 1  1077;
layer_def M5_mask2  1078;
layer_map 46 -datatype eq 2  1078;
layer_def M5_pin  1079;
layer_map 46 -texttype eq 45  1079;
layer_def M6  1080;
layer_map 50 -datatype eq 0  1080;
layer_def M6_fill  1088;
layer_map 50 -datatype eq 11  1088;
layer_def M6_label  1089;
layer_map 50 -datatype eq 46  1089;
layer_def M6_mask1  1090;
layer_map 50 -datatype eq 1  1090;
layer_def M6_mask2  1091;
layer_map 50 -datatype eq 2  1091;
layer_def M6_pin  1092;
layer_map 50 -texttype eq 45  1092;
layer_def M7  1093;
layer_map 54 -datatype eq 0  1093;
layer_def M7_fill  1101;
layer_map 54 -datatype eq 11  1101;
layer_def M7_label  1102;
layer_map 54 -datatype eq 46  1102;
layer_def M7_mask1  1103;
layer_map 54 -datatype eq 1  1103;
layer_def M7_mask2  1104;
layer_map 54 -datatype eq 2  1104;
layer_def M7_pin  1105;
layer_map 54 -texttype eq 45  1105;
layer_def MT  1106;
layer_map 64 -datatype eq 0  1106;
layer_def MT_fill  1114;
layer_map 64 -datatype eq 11  1114;
layer_def MT_label  1115;
layer_map 64 -datatype eq 46  1115;
layer_def MT_pin  1116;
layer_map 64 -texttype eq 45  1116;
layer_def Nsvt  1117;
layer_map 16 -datatype eq 0  1117;
layer_def NPNdmy  1118;
layer_map 154 -datatype eq 0  1118;
layer_def NWell  1119;
layer_map 5 -datatype eq 0  1119;
layer_def NWell_label  1120;
layer_map 5 -texttype eq 46  1120;
layer_def NWell_pin  1121;
layer_map 5 -texttype eq 45  1121;
layer_def Nhvt  1122;
layer_map 16 -datatype eq 2  1122;
layer_def Nlvt  1123;
layer_map 16 -datatype eq 1  1123;
layer_def Psvt  1124;
layer_map 15 -datatype eq 0  1124;
layer_def PPitch_poly102  1125;
layer_map 130 -datatype eq 4  1125;
layer_def PPitch_poly104  1126;
layer_map 130 -datatype eq 5  1126;
layer_def PPitch_poly86  1127;
layer_map 130 -datatype eq 1  1127;
layer_def PPitch_poly90  1128;
layer_map 130 -datatype eq 2  1128;
layer_def PPitch_poly94  1129;
layer_map 130 -datatype eq 3  1129;
layer_def Phvt  1130;
layer_map 15 -datatype eq 2  1130;
layer_def Plvt  1131;
layer_map 15 -datatype eq 1  1131;
layer_def Poly  1132;
layer_map 20 -datatype eq 0  1132;
layer_def Poly_dummy  1133;
layer_map 20 -datatype eq 10  1133;
layer_def Poly_edge  1134;
layer_map 20 -datatype eq 30  1134;
layer_def Poly_label  1135;
layer_map 20 -datatype eq 46  1135;
layer_def Poly_pin  1136;
layer_map 20 -texttype eq 45  1136;
layer_def SaB  1137;
layer_map 6 -datatype eq 0  1137;
layer_def ThickOx  1138;
layer_map 11 -datatype eq 0  1138;
layer_def TrimFin  1139;
layer_map 120 -datatype eq 0  1139;
layer_def V0  1140;
layer_map 25 -datatype eq 0  1140;
layer_def V1_nomask  1150;
layer_map 32 -datatype eq 0  1150;
layer_def V1_mask1_unlock  1151;
layer_map 32 -datatype eq 1  1151;
layer_def V1_mask1_lock  1152;
layer_map 32 -datatype eq 2  1152;
layer_def V1_mask2_unlock  1153;
layer_map 32 -datatype eq 3  1153;
layer_def V1_mask2_lock  1154;
layer_map 32 -datatype eq 4  1154;
layer_def V1_mask3_unlock  1155;
layer_map 32 -datatype eq 5  1155;
layer_def V1_mask3_lock  1156;
layer_map 32 -datatype eq 6  1156;
layer_def V1_mask4_unlock  1157;
layer_map 32 -datatype eq 7  1157;
layer_def V1_mask4_lock  1158;
layer_map 32 -datatype eq 8  1158;
layer_def V2_nomask  1160;
layer_map 36 -datatype eq 0  1160;
layer_def V2_mask1_unlock  1161;
layer_map 36 -datatype eq 1  1161;
layer_def V2_mask1_lock  1162;
layer_map 36 -datatype eq 2  1162;
layer_def V2_mask2_unlock  1163;
layer_map 36 -datatype eq 3  1163;
layer_def V2_mask2_lock  1164;
layer_map 36 -datatype eq 4  1164;
layer_def V2_mask3_unlock  1165;
layer_map 36 -datatype eq 5  1165;
layer_def V2_mask3_lock  1166;
layer_map 36 -datatype eq 6  1166;
layer_def V2_mask4_unlock  1167;
layer_map 36 -datatype eq 7  1167;
layer_def V2_mask4_lock  1168;
layer_map 36 -datatype eq 8  1168;
layer_def V3_nomask  1170;
layer_map 40 -datatype eq 0  1170;
layer_def V3_mask1_unlock  1171;
layer_map 40 -datatype eq 1  1171;
layer_def V3_mask1_lock  1172;
layer_map 40 -datatype eq 2  1172;
layer_def V3_mask2_unlock  1173;
layer_map 40 -datatype eq 3  1173;
layer_def V3_mask2_lock  1174;
layer_map 40 -datatype eq 4  1174;
layer_def V3_mask3_unlock  1175;
layer_map 40 -datatype eq 5  1175;
layer_def V3_mask3_lock  1176;
layer_map 40 -datatype eq 6  1176;
layer_def V3_mask4_unlock  1177;
layer_map 40 -datatype eq 7  1177;
layer_def V3_mask4_lock  1178;
layer_map 40 -datatype eq 8  1178;
layer_def V4  1180;
layer_map 44 -datatype eq 0  1180;
layer_def V5  1186;
layer_map 48 -datatype eq 0  1186;
layer_def V6  1188;
layer_map 52 -datatype eq 0  1188;
layer_def VT  1196;
layer_map 62 -datatype eq 0  1196;
layer_def VT_fill  1204;
layer_map 62 -datatype eq 11  1204;
layer_def diffres  1205;
layer_map 10 -datatype eq 12  1205;
layer_def diodmy  1206;
layer_map 153 -datatype eq 0  1206;
layer_def m1res  1207;
layer_map 30 -datatype eq 12  1207;
layer_def m2res  1208;
layer_map 34 -datatype eq 12  1208;
layer_def m3res  1209;
layer_map 38 -datatype eq 12  1209;
layer_def m4res  1210;
layer_map 42 -datatype eq 12  1210;
layer_def m5res  1211;
layer_map 46 -datatype eq 12  1211;
layer_def m6res  1212;
layer_map 50 -datatype eq 12  1212;
layer_def m7res  1213;
layer_map 54 -datatype eq 12  1213;
layer_def mtres  1214;
layer_map 64 -datatype eq 12  1214;
layer_def nwodres  1215;
layer_map 5 -datatype eq 13  1215;
layer_def nwstires  1216;
layer_map 5 -datatype eq 12  1216;
layer_def pcres  1217;
layer_map 20 -datatype eq 12  1217;
layer_def mimW 1218;
layer_map 155 -datatype eq 0 1218;
layer_def mimL 1219;
layer_map 156 -datatype eq 0 1219;
layer_def LiAct_text 1220;
layer_map 22 -texttype eq 0 1220;
layer_def Poly_text 1221;
layer_map 20 -texttype eq 0 1221;
layer_def NWell_text 1222;
layer_map 5 -texttype eq 0 1222;
layer_def M1_text 1223;
layer_map 30 -texttype eq 0 1223;
layer_def M2_text 1224;
layer_map 34 -texttype eq 0 1224; 
layer_def M3_text 1225;
layer_map 38 -texttype eq 0 1225;
layer_def M4_text 1226;
layer_map 42 -texttype eq 0 1226;
layer_def M5_text 1227;
layer_map 46 -texttype eq 0 1227;
layer_def M6_text 1228;
layer_map 50 -texttype eq 0 1228;
layer_def M7_text 1229;
layer_map 54 -texttype eq 0 1229;
layer_def MT_text 1230;
layer_map 64 -texttype eq 0 1230;
layer_def CutM1  1231;
layer_map 31 -datatype eq 0  1231;
layer_def CutM1Mask1  1232;
layer_map 31 -datatype eq 10  1232;
layer_def CutM1Mask2  1233;
layer_map 31 -datatype eq 20  1233;
layer_def CutM2  1241;
layer_map 35 -datatype eq 0  1241;
layer_def CutM2Mask1  1242;
layer_map 35 -datatype eq 10  1242;
layer_def CutM2Mask2  1243;
layer_map 35 -datatype eq 20  1243;
layer_def CutM3  1251;
layer_map 39 -datatype eq 0  1251;
layer_def CutM3Mask1  1252;
layer_map 39 -datatype eq 10  1252;
layer_def CutM3Mask2  1253;
layer_map 39 -datatype eq 20  1253;
// END LAYER DEFINITIONS

// LAYER DERIVATIONS
extent -outputlayer psub;
and NWell BuriedNWell -outputlayer nw_bnw;
not psub nw_bnw -outputlayer psub_not_nw_bnw;
select -inside psub_not_nw_bnw BuriedNWell -outputLayer iso_pwell;
or nwodres nwstires -outputlayer res_nwell;
//nwell region
select -interact -not NWell res_nwell -outputlayer nw_conn;
select -interact NWell res_nwell -outputlayer res_term_nwell;
not res_term_nwell res_nwell -outputlayer nw_term;
or Nsvt Nhvt Nlvt -outputlayer nimp;
or Psvt Phvt Plvt -outputlayer pimp;
not Active CutActive -outputlayer active_noCut;
and nimp active_noCut -outputlayer nactive;
and pimp active_noCut -outputlayer pactive;
//FinArea_fin48 required over active regions
//and nactive_1 FinArea_fin48 -outputlayer nactive;
//and pactive_1 FinArea_fin48 -outputlayer pactive;
//poly layers
or Poly Poly_dummy Poly_edge -outputlayer poly_all;
not poly_all CutPoly -outputlayer poly_all_not_cut;
not poly_all_not_cut pcres -outputlayer poly_conn_2;
not poly_conn_2 gate -outputlayer poly_conn_1;
not poly_conn_1 NWell -outputlayer npoly_conn;
and poly_conn_1 NWell -outputlayer ppoly_conn;
not nactive poly_all -outputlayer ndiff;
//n+active diffusion region
not ndiff diffres -outputlayer ndiff_conn_all;
select -interact ndiff_conn_all diffres -outputlayer ndiffres_term;
and fin_marker_layer (or ndiff pdiff) -outputlayer rxfin_in_ndiff_or_pdiff;
select -touch rxfin_in_ndiff_or_pdiff gate -eq 2 -outputlayer rxfin_touched_2poly;
select -touch rxfin_in_ndiff_or_pdiff gate -eq 1 -outputlayer rxfin_touched_1poly;
edge_boolean -coincident_only -inside rxfin_touched_2poly (or ndiff pdiff) -outputlayer rxfin_touched_2poly_edge;
edge_boolean -coincident_only -outside rxfin_touched_1poly gate -outputlayer rxfin_touched_1poly_edge;
not pactive poly_all -outputlayer pdiff;
//p+active diffusion region
not pdiff diffres -outputlayer pdiff_conn_all;
select -interact pdiff_conn_all diffres -outputlayer pdiffres_term;
select -interact ndiff_conn_all Poly -outputlayer nsd1;
select -interact pdiff_conn_all Poly -outputlayer psd1;
not ndiff_conn_all (or nsd1 ntap npn_emit) -outputlayer ndiff_conn;
not pdiff_conn_all (or psd1 ptap ttap) -outputlayer pdiff_conn;
not nsd1 NPNdmy -outputlayer nsd2;
not psd1 NPNdmy -outputlayer psd2;
dfm_property nsd2 rxfin_touched_2poly rxfin_touched_1poly rxfin_touched_2poly_edge rxfin_touched_1poly_edge -overlap -abut_also -multi [rxfin_touched_2poly_area = (AREA(rxfin_touched_2poly) / 2) * 1e-12] [rxfin_touched_1poly_area = AREA(rxfin_touched_1poly) * 1e-12] [rxfin_touched_2poly_perim = PERIM(rxfin_touched_2poly) * 1e-6] [rxfin_touched_1poly_perim = PERIM(rxfin_touched_1poly) * 1e-6] [rxfin_touched_2poly_edge_l = LENGTH(rxfin_touched_2poly_edge) * 1e-6] [rxfin_touched_1poly_edge_l = LENGTH(rxfin_touched_1poly_edge) * 1e-6] -outputlayer nsd;
dfm_property psd2 rxfin_touched_2poly rxfin_touched_1poly rxfin_touched_2poly_edge rxfin_touched_1poly_edge -overlap -abut_also -multi [rxfin_touched_2poly_area = (AREA(rxfin_touched_2poly) / 2) * 1e-12] [rxfin_touched_1poly_area = AREA(rxfin_touched_1poly) * 1e-12] [rxfin_touched_2poly_perim = PERIM(rxfin_touched_2poly) * 1e-6] [rxfin_touched_1poly_perim = PERIM(rxfin_touched_1poly) * 1e-6] [rxfin_touched_2poly_edge_l = LENGTH(rxfin_touched_2poly_edge) * 1e-6] [rxfin_touched_1poly_edge_l = LENGTH(rxfin_touched_1poly_edge) * 1e-6] -outputlayer psd;

PVS_READ_TCL_BLOCK

set mfirst1x 1
set mlast1x 3 

for {set x ${mfirst1x}} {$x<=${mlast1x}} {incr x} { 

puts "
//All Mx layer derivation 
or M${x}_mask1_unlock M${x}_mask1_lock -outputlayer M${x}_mask1_org;
or M${x}_mask2_unlock M${x}_mask2_lock -outputlayer M${x}_mask2_org;
or M${x} M${x}_mask1_org M${x}_mask2_org M${x}_fill M${x}_label -outputlayer allM${x};

with_width allM${x} -ge 0.100 M${x}_ge0p100;
with_width M${x}_ge0p100 -ge 0.750 M${x}_ge0p750;
with_width M${x}_ge0p750 -ge 1.500 M${x}_ge1p500;
exte allM${x} allM${x} -lt 0.048 -abut lt 90 -single_point m${x}x_link_sp21_m${x};
exte allM${x} M${x}_ge0p100 -lt 0.072  -abut lt 90 -single_point -project ge 0.320 m${x}x_link_sp22_m${x};
exte allM${x} M${x}_ge0p750 -lt 0.112  -abut lt 90 -single_point -project ge 0.750 m${x}x_link_sp23_m${x};
exte allM${x} M${x}_ge1p500 -lt 0.220  -abut lt 90 -single_point -project ge 1.500 m${x}x_link_sp24_m${x};
convex_edge allM${x} -eq 2 -with_length le 0.050 M${x}_end;
exte M${x}_end M${x}_end -lt 0.064 -abut lt 90 -single_point m${x}x_link_sp41_m${x};
dfm_copy m${x}x_link_sp21_m${x}  m${x}x_link_sp22_m${x} m${x}x_link_sp23_m${x} m${x}x_link_sp24_m${x} m${x}x_link_sp41_m${x} -outputlayer m${x}x_all_links;
docolor allM${x} m${x}x_all_links -color0 M${x}_mask1 -color1 M${x}_mask2 -ignore_conflict;

//Mx not res
not M${x}_mask1 m${x}res -outputlayer m${x}_mask1_notRes;
not M${x}_mask2 m${x}res -outputlayer m${x}_mask2_notRes;

//Mx cut by CutMx
not m${x}_mask1_notRes CutM${x} -outputlayer notCutM${x}_2;
not m${x}_mask2_notRes CutM${x} -outputlayer notCutM${x}_3;

//Colored Mx cut by specific CutMxMask
not notCutM${x}_2 CutM${x}Mask1 -outputlayer m${x}_conn_mask1;
not notCutM${x}_3 CutM${x}Mask2 -outputlayer m${x}_conn_mask2;
"
}

PVS_END_TCL_BLOCK

//Via1 interconnect
or V1_mask1_unlock V1_mask1_lock -outputlayer V1_mask1;
or V1_mask2_unlock V1_mask2_lock -outputlayer V1_mask2;
or V1_mask3_unlock V1_mask3_lock -outputlayer V1_mask3;
or V1_mask4_unlock V1_mask4_lock -outputlayer V1_mask4;
or V1_nomask V1_mask1 V1_mask2 V1_mask3 V1_mask4 -outputlayer V1;

//Via2 interconnect
or V2_mask1_unlock V2_mask1_lock -outputlayer V2_mask1;
or V2_mask2_unlock V2_mask2_lock -outputlayer V2_mask2;
or V2_mask3_unlock V2_mask3_lock -outputlayer V2_mask3;
or V2_mask4_unlock V2_mask4_lock -outputlayer V2_mask4;
or V2_nomask V2_mask1 V2_mask2 V2_mask3 V2_mask4 -outputlayer V2;

//Via3 interconnect
or V3_mask1_unlock V3_mask1_lock -outputlayer V3_mask1;
or V3_mask2_unlock V3_mask2_lock -outputlayer V3_mask2;
or V3_mask3_unlock V3_mask3_lock -outputlayer V3_mask3;
or V3_mask4_unlock V3_mask4_lock -outputlayer V3_mask4;
or V3_nomask V3_mask1 V3_mask2 V3_mask3 V3_mask4 -outputlayer V3;

not M4 m4res -outputlayer m4_conn;
not M5 m5res -outputlayer m5_conn;
not M6 m6res -outputlayer m6_conn;
not M7 m7res -outputlayer m7_conn;
not MT mtres -outputlayer mt_conn;

// TAP DERIVATION
and ndiff_conn_all NWell -outputlayer ntap;
not pdiff_conn_all (or NWell iso_pwell) -outputlayer ptap;
and pdiff_conn_all iso_pwell -outputlayer ttap;

// CONTACT DERIVATION
and LiAct ndiff_conn_all -outputlayer cont_ndiff;
and LiAct pdiff_conn_all -outputlayer cont_pdiff;
and LiPo  poly_conn_1 -outputlayer cont_poly
// AKM Added for separate V0
select -interact V0 LiAct -outputlayer V0_Act;
select -interact V0 LiPo -outputlayer V0_Po;
and CMT VT -outputlayer VT_mim;
not VT VT_mim -outputlayer VT_nomim;
// END LAYER DERIVATIONS

// CONNECTIVITY
PORT -text_layer Poly_pin Active_pin NWell_pin M1_pin M2_pin M3_pin M4_pin M5_pin M6_pin M7_pin MT_pin LiAct_text Poly_text NWell_text;
PORT -text_layer M1_text M2_text M3_text M4_text M5_text M6_text M7_text MT_text;
TEXT_LAYER Poly_pin Active_pin NWell_pin M1_pin M2_pin M3_pin M4_pin M5_pin M6_pin M7_pin MT_pin LiAct_text Poly_text NWell_text;
TEXT_LAYER M1_text M2_text M3_text M4_text M5_text M6_text M7_text MT_text;
attach Poly_pin npoly_conn;
attach Poly_pin ppoly_conn;
attach M1_pin m1_conn_mask1;
attach M2_pin m2_conn_mask1;
attach M3_pin m3_conn_mask1;
attach M1_pin m1_conn_mask2;
attach M2_pin m2_conn_mask2;
attach M3_pin m3_conn_mask2;
attach M4_pin m4_conn;
attach M5_pin m5_conn;
attach M6_pin m6_conn;
attach M7_pin m7_conn;
attach MT_pin mt_conn;
attach M1_text m1_conn_mask1;
attach M2_text m2_conn_mask1;
attach M3_text m3_conn_mask1;
attach M1_text m1_conn_mask2;
attach M2_text m2_conn_mask2;
attach M3_text m3_conn_mask2;
attach M4_text m4_conn;
attach M5_text m5_conn;
attach M6_text m6_conn;
attach M7_text m7_conn;
attach MT_text mt_conn;
attach NWell_pin nw_conn;
attach NWell_pin nw_term;
attach LiAct_text LiAct;
attach Poly_text npoly_conn;
attach Poly_text ppoly_conn;
attach NWell_text nw_conn;
attach NWell_text nw_term;
connect m1_conn_mask1 LiAct -by V0_Act
connect m1_conn_mask2 LiAct -by V0_Act
connect ndiff_conn ndiffres_term;
connect LiAct ndiff_conn -by cont_ndiff;
connect LiAct nsd -by cont_ndiff;
connect LiAct ntap -by cont_ndiff;
connect LiAct npn_emit -by cont_ndiff;
connect pdiff_conn pdiffres_term;
connect LiAct pdiff_conn -by cont_pdiff;
connect LiAct psd -by cont_pdiff;
connect LiAct ptap -by cont_pdiff;
connect LiAct ttap -by cont_pdiff;
connect m1_conn_mask1 LiPo -by V0_Po;
connect m1_conn_mask2 LiPo -by V0_Po;
connect LiPo npoly_conn -by cont_poly
connect LiPo ppoly_conn -by cont_poly
connect m2_conn_mask1 m1_conn_mask1 -by V1;
connect m2_conn_mask2 m1_conn_mask1 -by V1;
connect m2_conn_mask1 m1_conn_mask2 -by V1;
connect m2_conn_mask2 m1_conn_mask2 -by V1;
connect m3_conn_mask1 m2_conn_mask1 -by V2;
connect m3_conn_mask2 m2_conn_mask1 -by V2;
connect m3_conn_mask1 m2_conn_mask2 -by V2;
connect m3_conn_mask2 m2_conn_mask2 -by V2;
connect m4_conn m3_conn_mask1 -by V3;
connect m4_conn m3_conn_mask2 -by V3;
connect m5_conn m4_conn -by V4;
connect m6_conn m5_conn -by V5;
connect m7_conn m6_conn -by V6;
// connect mt_conn CMT m7_conn -by VT;
// sconnect ndiff_conn nw_conn -by ntap;
// sconnect pdiff_conn iso_pwell psub -by ptap;
connect mt_conn m7_conn -by VT_nomim;
connect mt_conn CMT -by VT_mim;
sconnect ntap nw_conn;
sconnect ttap iso_pwell;
sconnect ptap psub;
sconnect nw_conn BuriedNWell;
connect ntap nw_term;
// END CONNECTIVITY

dmacro CALC_RES_PROP device_layer conn_layer rshvalue {
   [
      property m, l, w, r
      l=( PERIMETER( device_layer ) - PERIMETER_COINCIDE( device_layer , conn_layer))/ 2
      w= PERIMETER_COINCIDE( device_layer , conn_layer)/ 2
      m= 1
      r= rshvalue * (l/w) * m
   ]
}
// DEVICE DEFINITIONS
or V0 V1 -outputlayer m1_via_all;
and allM1 m1res m1res_dev1;
select -interact -not m1res_dev1 m1_via_all -outputlayer m1res_dev;
device R (resm1) m1res_dev m1_conn_mask1 (PLUS) m1_conn_mask1 (MINUS) -model cds_ff_mpt_resm1 cmacro CALC_RES_PROP m1res_dev m1_conn_mask1 0.0736;
device R (resm1) m1res_dev m1_conn_mask2 (PLUS) m1_conn_mask2 (MINUS) -model cds_ff_mpt_resm1 cmacro CALC_RES_PROP m1res_dev m1_conn_mask2 0.0736;

or V1 V2 -outputlayer m2_via_all;
and M2 m2res m2res_dev1;
select -interact -not m2res_dev1 m2_via_all -outputlayer m2res_dev;
device R (resm2) m2res_dev m2_conn_mask1 (PLUS) m2_conn_mask1 (MINUS) -model cds_ff_mpt_resm2 cmacro CALC_RES_PROP m2res_dev m2_conn_mask1 0.0604;
device R (resm2) m2res_dev m2_conn_mask2 (PLUS) m2_conn_mask2 (MINUS) -model cds_ff_mpt_resm2 cmacro CALC_RES_PROP m2res_dev m2_conn_mask2 0.0604;

or V2 V3 -outputlayer m3_via_all;
and M3 m3res m3res_dev1;
select -interact -not m3res_dev1 m3_via_all -outputlayer m3res_dev;
device R (resm3) m3res_dev m3_conn_mask1 (PLUS) m3_conn_mask1 (MINUS) -model cds_ff_mpt_resm3 cmacro CALC_RES_PROP m3res_dev m3_conn_mask1 0.0604;
device R (resm3) m3res_dev m3_conn_mask2 (PLUS) m3_conn_mask2 (MINUS) -model cds_ff_mpt_resm3 cmacro CALC_RES_PROP m3res_dev m3_conn_mask2 0.0604;

or V3 V4 -outputlayer m4_via_all;
and M4 m4res m4res_dev1;
select -interact -not m4res_dev1 m4_via_all -outputlayer m4res_dev;
device R (resm4) m4res_dev m4_conn (PLUS) m4_conn (MINUS) -model cds_ff_mpt_resm4 cmacro CALC_RES_PROP m4res_dev m4_conn 0.0604;

or V4 V5 -outputlayer m5_via_all;
and M5 m5res m5res_dev1;
select -interact -not m5res_dev1 m5_via_all -outputlayer m5res_dev;
device R (resm5) m5res_dev m5_conn (PLUS) m5_conn (MINUS) -model cds_ff_mpt_resm5 cmacro CALC_RES_PROP m5res_dev m5_conn 0.0604;

or V5 V6 -outputlayer m6_via_all;
and M6 m6res m6res_dev1;
select -interact -not m6res_dev1 m6_via_all -outputlayer m6res_dev;
device R (resm6) m6res_dev m6_conn (PLUS) m6_conn (MINUS) -model cds_ff_mpt_resm6 cmacro CALC_RES_PROP m6res_dev m6_conn 0.0604;

or V6 VT -outputlayer m7_via_all;
and M7 m7res m7res_dev1;
select -interact -not m7res_dev1 m7_via_all -outputlayer m7res_dev;
device R (resm7) m7res_dev m7_conn (PLUS) m7_conn (MINUS) -model cds_ff_mpt_resm7 cmacro CALC_RES_PROP m7res_dev m7_conn 0.0604;

copy VT mt_via_all;
and MT mtres mtres_dev1;
select -interact -not mtres_dev1 mt_via_all -outputlayer mtres_dev;
device R (resmt) mtres_dev mt_conn (PLUS) mt_conn (MINUS) -model cds_ff_mpt_resm8 cmacro CALC_RES_PROP mtres_dev mt_conn 0.0214;

// RSNP device
and Poly pcres -outputlayer pcres_poly;
and pcres_poly Nsvt -outputlayer pcres_npoly;
not pcres_npoly Sab -outputlayer rsnp_dev;
device R (rsnp) rsnp_dev npoly_conn (PLUS) npoly_conn (MINUS) -model cds_ff_mpt_rsnp cmacro CALC_RES_PROP rsnp_dev npoly_conn 15;
device R (rsnp) rsnp_dev ppoly_conn (PLUS) ppoly_conn (MINUS) -model cds_ff_mpt_rsnp cmacro CALC_RES_PROP rsnp_dev ppoly_conn 15;

// RNSNP
and pcres_npoly Sab -outputlayer rnsnp_dev;
device R (rnsnp) rnsnp_dev npoly_conn (PLUS) npoly_conn (MINUS) -model cds_ff_mpt_rnsnp cmacro CALC_RES_PROP rnsnp_dev npoly_conn 200;
device R (rnsnp) rnsnp_dev ppoly_conn (PLUS) ppoly_conn (MINUS) -model cds_ff_mpt_rnsnp cmacro CALC_RES_PROP rnsnp_dev ppoly_conn 200;

// RSPP device
and pcres_poly Psvt -outputlayer pcres_ppoly;
not pcres_ppoly Sab -outputlayer rspp_dev;
device R (rspp) rspp_dev ppoly_conn (PLUS) ppoly_conn (MINUS) -model cds_ff_mpt_rspp cmacro CALC_RES_PROP rspp_dev ppoly_conn 15;
device R (rspp) rspp_dev npoly_conn (PLUS) npoly_conn (MINUS) -model cds_ff_mpt_rspp cmacro CALC_RES_PROP rspp_dev npoly_conn 15;

// RNSPP device
and pcres_ppoly SaB -outputlayer rnspp_dev;
device R (rnspp) rnspp_dev ppoly_conn (PLUS) ppoly_conn (MINUS) -model cds_ff_mpt_rnspp cmacro CALC_RES_PROP rnspp_dev ppoly_conn 600;
device R (rnspp) rnspp_dev npoly_conn (PLUS) npoly_conn (MINUS) -model cds_ff_mpt_rnspp cmacro CALC_RES_PROP rnspp_dev npoly_conn 600;

// RNSND device
and ndiff diffres -outputlayer ndiff_res;
and ndiff_res FinArea_fin48 -outputlayer ndiff_res_dev;
and ndiff_res_dev Nsvt -outputlayer nsvt_res_dev;
and nsvt_res_dev SaB -outputlayer rnsnd_dev;
device R (rnsnd) rnsnd_dev ndiffres_term (PLUS) ndiffres_term (MINUS) -model cds_ff_mpt_rnsnd [
property m, l, w, r
  l=( PERIMETER( rnsnd_dev) - PERIMETER_COINCIDE( rnsnd_dev, ndiffres_term ))/ 2
  w= PERIMETER_COINCIDE( rnsnd_dev, ndiffres_term )/ 2
  m= 1
  r=(100 * (l/w ) + 2*8.46/(w*1e6)) * m
];

// RSND device
not nsvt_res_dev SaB -outputlayer rsnd_dev;
device R (rsnd) rsnd_dev ndiffres_term (PLUS) ndiffres_term (MINUS) -model cds_ff_mpt_rsnd [
property m, l, w, r
  l=( PERIMETER( rsnd_dev) - PERIMETER_COINCIDE( rsnd_dev, ndiffres_term ))/ 2
  w= PERIMETER_COINCIDE( rsnd_dev, ndiffres_term )/ 2
  m= 1
  r=18 * (l/w) * m
];

// RNSPD device
and pdiff diffres -outputlayer pdiff_res;
and pdiff_res FinArea_fin48 -outputlayer pdiff_res_dev;
and pdiff_res_dev Psvt -outputlayer psvt_res_dev;
and psvt_res_dev SaB -outputlayer rnspd_dev;
device R (rnspd) rnspd_dev pdiffres_term (PLUS) pdiffres_term (MINUS) -model cds_ff_mpt_rnspd [
property m, l, w, r
  l=( PERIMETER( rnspd_dev) - PERIMETER_COINCIDE( rnspd_dev, pdiffres_term ))/ 2
  w= PERIMETER_COINCIDE( rnspd_dev, pdiffres_term )/ 2
  m= 1
  r=(200 * (l/w) + 2*29.5/(w*1e6)) * m
];

// RSPD device
not psvt_res_dev SaB -outputlayer rspd_dev;
device R (rspd) rspd_dev pdiffres_term (PLUS) pdiffres_term (MINUS) -model cds_ff_mpt_rspd [
property m, l, w, r
  l=( PERIMETER( rspd_dev) - PERIMETER_COINCIDE( rspd_dev, pdiffres_term ))/ 2
  w= PERIMETER_COINCIDE( rspd_dev, pdiffres_term )/ 2
  m= 1
  r=15 * (l/w) * m
];

// RNWO device 
select -inside NWell FinArea_fin48 NWell_inside_fin;
and NWell_inside_fin Active -outputlayer rnw_diff;
and rnw_diff nwodres -outputlayer rnwo_dev1;
and rnwo_dev1 SaB -outputlayer rnwo_dev;
device R (rnwo) rnwo_dev nw_term (PLUS) nw_term (MINUS) -model cds_ff_mpt_rnwo [
property m, l, w, r
  l=( PERIMETER( rnwo_dev) - PERIMETER_COINCIDE( rnwo_dev, nw_term))/ 2
  w= PERIMETER_COINCIDE( rnwo_dev, nw_term)/ 2
  m= 1
  r=450 * (l/(w - 0.0000000014)) * m
];

// RNWS device
and NWell_inside_fin nwstires -outputlayer rnws_dev1;
not rnws_dev1 SaB -outputlayer rnws_dev;
device R (rnws) rnws_dev nw_term (PLUS) nw_term (MINUS) -model cds_ff_mpt_rnws [
property m, l, w, r
  l=( PERIMETER( rnws_dev) - PERIMETER_COINCIDE( rnws_dev, nw_term))/ 2
  w= PERIMETER_COINCIDE( rnws_dev, nw_term)/ 2
  m= 1
  r=1000 * (l/(w - 0.000000002)) * m
];

// GLOBAL RESISTOR CHECK
lvs_check_property R r r -tolerance 0;
lvs_check_property R l l -tolerance 0 -absolute;
lvs_check_property R w w -tolerance 0 -absolute;

// MIMCAP device
and CMT M7 -outputlayer _mim_cap_1;
select -interact _mim_cap_1 MT -outputlayer mim_cap_dev;
device C (cmim) mim_cap_dev  CMT (PLUS) m7_conn (MINUS) <mimW> <mimL> -model cds_ff_mpt_cmim [
 property l, w, c, area, pj
  m = 1
  w = PERIMETER_INSIDE( mimW, CMT )
  l = PERIMETER_INSIDE( mimL, CMT )
//  w=((perimeter(mim_cap_dev)*0.25) + 0.5*sqrt( (0.25*pow(perimeter(mim_cap_dev), 2)) - (4*area(mim_cap_dev)) ))
//  l=((perimeter(mim_cap_dev)*0.25) - 0.5*sqrt( (0.25*pow(perimeter(mim_cap_dev), 2)) - (4*area(mim_cap_dev)) ))
  c=area(mim_cap_dev)*1.025e-3 + perimeter(mim_cap_dev)*2.425e-10
  area=area(mim_cap_dev)
  pj=perimeter(mim_cap_dev)
]
lvs_check_property C (cmim) w w -absolute -tolerance 0.0;
lvs_check_property C (cmim) l l -absolute -tolerance 0.0;
lvs_check_property C (cmim) c c -tolerance 0.0;
lvs_reduce_device  C (cmim) -series PLUS MINUS no
lvs_reduce_device  C (cmim) -parallel yes [ tolerance l 0 w 0 
 effective l, w, c
 l = sum ( l ) / count ( ) 
 w = sum ( w ) 
 c = sum ( c )
 ];

// NPN device
select -inside nactive NPNdmy -outputlayer npn_nactive;
not npn_nactive NWell -outputlayer npn_dev;
and NPNdmy (not ndiff_conn_all NWell) -outputlayer npn_emit;
size npn_dev -by 0.75 -underover -outputlayer npn_dev_2x2;
not npn_dev npn_dev_2x2 -outputlayer npn_dev_1x1;
Device Q (npn) npn_dev_1x1 BuriedNWell (C) iso_pwell (B) npn_emit (E) psub (S) <Poly_dummy> -model cds_ff_mpt_npn1 [
property A
A = area (npn_dev_1x1)
//L = perim_co_out(npn_dev_1x1, Poly_dummy) / 2
//W = A/L;
];

Device Q (npn) npn_dev_2x2 BuriedNWell (C) iso_pwell (B) npn_emit (E) psub (S) <Poly_dummy> -model cds_ff_mpt_npn2 [
property A
A = area (npn_dev_2x2)
//L = perim_co_out(npn_dev_2x2, Poly_dummy) / 2
//W = A/L;
];

lvs_check_property Q (npn) A A -absolute -tolerance 0;
//W, L params not compared yet.
//lvs_check_property Q (npn) W W -absolute -tolerance 0;
//lvs_check_property Q (npn) L L -absolute -tolerance 0;

// ND1HVT device
select -inside nactive diodmy -outputlayer nd_active_2;
select -inside nd_active_2 FinArea_fin48 -outputlayer nd_active;
and nd_active Nhvt -outputlayer nd1hvt_dev;
Device D (nd1hvt) nd1hvt_dev psub (PLUS) ndiff_conn (MINUS) <nd_active> -model cds_ff_mpt_nd1hvt [
property A, P
A = area(nd_active)
P = perim(nd_active)
];

// ND1LVT device
and nd_active Nlvt -outputlayer nd1lvt_dev;
Device D (nd1lvt) nd1lvt_dev psub (PLUS) ndiff_conn (MINUS) <nd_active> -model cds_ff_mpt_nd1lvt [
property A, P
A = area(nd_active)
P = perim(nd_active)
];

// ND1SVT device
and nd_active Nsvt -outputlayer ndsvt;
not ndsvt ThickOx -outputlayer nd1svt_dev;
Device D (nd1svt) nd1svt_dev psub (PLUS) ndiff_conn (MINUS) <nd_active> -model cds_ff_mpt_nd1svt [
property A, P
A = area(nd_active)
P = perim(nd_active)
];

// ND2SVT device
and ndsvt ThickOx -outputlayer nd2svt_dev;
Device D (nd2svt) nd2svt_dev psub (PLUS) ndiff_conn (MINUS) <nd_active> -model cds_ff_mpt_nd2svt [
property A, P
A = area(nd_active)
P = perim(nd_active)
];

// PD1HVT device
select -inside pactive diodmy -outputlayer pd_active_2;
select -inside pd_active_2 FinArea_fin48 -outputlayer pd_active;
and pd_active Phvt -outputlayer pd1hvt_dev;
Device D (pd1hvt) pd1hvt_dev pdiff_conn (PLUS) nw_conn (MINUS) <pd_active> -model cds_ff_mpt_pd1hvt [
property A, P
A = area(pd_active)
P = perim(pd_active)
];

// PD1LVT device
and pd_active Plvt -outputlayer pd1lvt_dev;
Device D (pd1lvt) pd1lvt_dev pdiff_conn (PLUS) nw_conn (MINUS) <pd_active> -model cds_ff_mpt_pd1lvt [
property A, P
A = area(pd_active)
P = perim(pd_active)
];

// PD1SVT device
and pd_active Psvt -outputlayer pdsvt;
not pdsvt ThickOx -outputlayer pd1svt_dev;
Device D (pd1svt) pd1svt_dev pdiff_conn (PLUS) nw_conn (MINUS) <pd_active> -model cds_ff_mpt_pd1svt [
property A, P
A = area(pd_active)
P = perim(pd_active)
];

// PD2SVT device
and pdsvt ThickOx -outputlayer pd2svt_dev;
Device D (pd2svt) pd2svt_dev pdiff_conn (PLUS) nw_conn (MINUS) <pd_active> -model cds_ff_mpt_pd2svt [
property A, P
A = area(pd_active)
P = perim(pd_active)
];

// GLOBAL DIODE CHECK
lvs_check_property D A A -tolerance 0 -absolute;
lvs_check_property D P P -tolerance 0 -absolute;

// FET device
and Poly active_noCut -outputlayer poly_act;
and poly_act FinArea_fin48 -outputlayer poly_act_fin;
not poly_act_fin diodmy -outputlayer gate;
not gate NWell -outputlayer ngate;
and gate NWell -outputlayer pgate;
// constant values for now for fins
variable finWidth 0.014e-6;
variable finPitch 0.048e-6;
// N1HVT device
connect npoly_conn ngate;
connect ppoly_conn pgate;
and ngate Nhvt -outputlayer n1hvt_dev;
device MN (n1hvt) n1hvt_dev ngate (G) nsd (S) nsd (D) psub (B) <nactive> -model cds_ff_mpt_n1hvt [
property l, nf, nfin, asej, adej, psej, pdej
nf = 1;
l = perim_co( n1hvt_dev, nactive ) / 2;
w = perim_in( n1hvt_dev, nactive ) / 2;
nfin = (( w - finWidth) / finPitch ) + 1;
asej_2 = DFM_NUM_VAL(S, "rxfin_touched_2poly_area")
adej_2 = DFM_NUM_VAL(D, "rxfin_touched_2poly_area")
asej_1 = DFM_NUM_VAL(S, "rxfin_touched_1poly_area")
adej_1 = DFM_NUM_VAL(D, "rxfin_touched_1poly_area")
psej_2poly_perim = DFM_NUM_VAL(S, "rxfin_touched_2poly_perim")
psej_2poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_2poly_edge_l")
psej_1poly_perim = DFM_NUM_VAL(S, "rxfin_touched_1poly_perim")
psej_1poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_1poly_edge_l")
pdej_2poly_perim = DFM_NUM_VAL(D, "rxfin_touched_2poly_perim")
pdej_2poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_2poly_edge_l")
pdej_1poly_perim = DFM_NUM_VAL(D, "rxfin_touched_1poly_perim")
pdej_1poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_1poly_edge_l")
asej = asej_2 + asej_1
adej = adej_2 + adej_1
psej = ((psej_2poly_perim - psej_2poly_edge_l)/2) + (psej_1poly_perim - psej_1poly_edge_l)
pdej = ((pdej_2poly_perim - pdej_2poly_edge_l)/2) + (pdej_1poly_perim - pdej_1poly_edge_l)
]

// N1LVT device
and ngate Nlvt -outputlayer n1lvt_dev;
device MN (n1lvt) n1lvt_dev ngate (G) nsd (S) nsd (D) psub (B) <nactive> -model cds_ff_mpt_n1lvt [
property l, nf, nfin, asej, adej, psej, pdej
nf = 1;
l = perim_co( n1lvt_dev, nactive ) / 2;
w = perim_in( n1lvt_dev, nactive ) / 2;
nfin = (( w - finWidth) / finPitch ) + 1;
asej_2 = DFM_NUM_VAL(S, "rxfin_touched_2poly_area")
adej_2 = DFM_NUM_VAL(D, "rxfin_touched_2poly_area")
asej_1 = DFM_NUM_VAL(S, "rxfin_touched_1poly_area")
adej_1 = DFM_NUM_VAL(D, "rxfin_touched_1poly_area")
psej_2poly_perim = DFM_NUM_VAL(S, "rxfin_touched_2poly_perim")
psej_2poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_2poly_edge_l")
psej_1poly_perim = DFM_NUM_VAL(S, "rxfin_touched_1poly_perim")
psej_1poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_1poly_edge_l")
pdej_2poly_perim = DFM_NUM_VAL(D, "rxfin_touched_2poly_perim")
pdej_2poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_2poly_edge_l")
pdej_1poly_perim = DFM_NUM_VAL(D, "rxfin_touched_1poly_perim")
pdej_1poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_1poly_edge_l")
asej = asej_2 + asej_1
adej = adej_2 + adej_1
psej = ((psej_2poly_perim - psej_2poly_edge_l)/2) + (psej_1poly_perim - psej_1poly_edge_l)
pdej = ((pdej_2poly_perim - pdej_2poly_edge_l)/2) + (pdej_1poly_perim - pdej_1poly_edge_l)
]

// N1SVT device
and ngate Nsvt -outputlayer ngate_svt;
not ngate_svt ThickOx -outputlayer n1svt_dev;
device MN (n1svt) n1svt_dev ngate (G) nsd (S) nsd (D) psub (B) <nactive> -model cds_ff_mpt_n1svt [
property l, nf, nfin, asej, adej, psej, pdej
nf = 1;
l = perim_co( n1svt_dev, nactive ) / 2;
w = perim_in( n1svt_dev, nactive ) / 2;
nfin = (( w - finWidth) / finPitch ) + 1;
asej_2 = DFM_NUM_VAL(S, "rxfin_touched_2poly_area")
adej_2 = DFM_NUM_VAL(D, "rxfin_touched_2poly_area")
asej_1 = DFM_NUM_VAL(S, "rxfin_touched_1poly_area")
adej_1 = DFM_NUM_VAL(D, "rxfin_touched_1poly_area")
psej_2poly_perim = DFM_NUM_VAL(S, "rxfin_touched_2poly_perim")
psej_2poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_2poly_edge_l")
psej_1poly_perim = DFM_NUM_VAL(S, "rxfin_touched_1poly_perim")
psej_1poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_1poly_edge_l")
pdej_2poly_perim = DFM_NUM_VAL(D, "rxfin_touched_2poly_perim")
pdej_2poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_2poly_edge_l")
pdej_1poly_perim = DFM_NUM_VAL(D, "rxfin_touched_1poly_perim")
pdej_1poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_1poly_edge_l")
asej = asej_2 + asej_1
adej = adej_2 + adej_1
psej = ((psej_2poly_perim - psej_2poly_edge_l)/2) + (psej_1poly_perim - psej_1poly_edge_l)
pdej = ((pdej_2poly_perim - pdej_2poly_edge_l)/2) + (pdej_1poly_perim - pdej_1poly_edge_l)
]

// N2SVT device
and ngate_svt ThickOx -outputlayer n2svt_dev
device MN (n2svt) n2svt_dev ngate (G) nsd (S) nsd (D) psub (B) <nactive> -model cds_ff_mpt_n2svt [
property l, nf, nfin, asej, adej, psej, pdej
nf = 1;
l = perim_co( n2svt_dev, nactive ) / 2;
w = perim_in( n2svt_dev, nactive ) / 2;
nfin = (( w - finWidth) / finPitch ) + 1;
asej_2 = DFM_NUM_VAL(S, "rxfin_touched_2poly_area")
adej_2 = DFM_NUM_VAL(D, "rxfin_touched_2poly_area")
asej_1 = DFM_NUM_VAL(S, "rxfin_touched_1poly_area")
adej_1 = DFM_NUM_VAL(D, "rxfin_touched_1poly_area")
psej_2poly_perim = DFM_NUM_VAL(S, "rxfin_touched_2poly_perim")
psej_2poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_2poly_edge_l")
psej_1poly_perim = DFM_NUM_VAL(S, "rxfin_touched_1poly_perim")
psej_1poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_1poly_edge_l")
pdej_2poly_perim = DFM_NUM_VAL(D, "rxfin_touched_2poly_perim")
pdej_2poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_2poly_edge_l")
pdej_1poly_perim = DFM_NUM_VAL(D, "rxfin_touched_1poly_perim")
pdej_1poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_1poly_edge_l")
asej = asej_2 + asej_1
adej = adej_2 + adej_1
psej = ((psej_2poly_perim - psej_2poly_edge_l)/2) + (psej_1poly_perim - psej_1poly_edge_l)
pdej = ((pdej_2poly_perim - pdej_2poly_edge_l)/2) + (pdej_1poly_perim - pdej_1poly_edge_l)
]

// P1HVT device
and pgate Phvt -outputlayer p1hvt_dev;
device MP (p1hvt) p1hvt_dev pgate (G) psd (S) psd (D) nw_conn (B) <pactive> -model cds_ff_mpt_p1hvt [
property l, nf, nfin, asej, adej, psej, pdej
nf = 1;
l = perim_co( p1hvt_dev, pactive ) / 2;
w = perim_in( p1hvt_dev, pactive ) / 2;
nfin = (( w - finWidth) / finPitch ) + 1;
asej_2 = DFM_NUM_VAL(S, "rxfin_touched_2poly_area")
adej_2 = DFM_NUM_VAL(D, "rxfin_touched_2poly_area")
asej_1 = DFM_NUM_VAL(S, "rxfin_touched_1poly_area")
adej_1 = DFM_NUM_VAL(D, "rxfin_touched_1poly_area")
psej_2poly_perim = DFM_NUM_VAL(S, "rxfin_touched_2poly_perim")
psej_2poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_2poly_edge_l")
psej_1poly_perim = DFM_NUM_VAL(S, "rxfin_touched_1poly_perim")
psej_1poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_1poly_edge_l")
pdej_2poly_perim = DFM_NUM_VAL(D, "rxfin_touched_2poly_perim")
pdej_2poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_2poly_edge_l")
pdej_1poly_perim = DFM_NUM_VAL(D, "rxfin_touched_1poly_perim")
pdej_1poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_1poly_edge_l")
asej = asej_2 + asej_1
adej = adej_2 + adej_1
psej = ((psej_2poly_perim - psej_2poly_edge_l)/2) + (psej_1poly_perim - psej_1poly_edge_l)
pdej = ((pdej_2poly_perim - pdej_2poly_edge_l)/2) + (pdej_1poly_perim - pdej_1poly_edge_l)
]

// P1LVT device
and pgate Plvt -outputlayer p1lvt_dev;
device MP (p1lvt) p1lvt_dev pgate (G) psd (S) psd (D) nw_conn (B) <pactive> -model cds_ff_mpt_p1lvt [
property l, nf, nfin, asej, adej, psej, pdej
nf = 1;
l = perim_co( p1lvt_dev, pactive ) / 2;
w = perim_in( p1lvt_dev, pactive ) / 2;
nfin = (( w - finWidth) / finPitch ) + 1;
asej_2 = DFM_NUM_VAL(S, "rxfin_touched_2poly_area")
adej_2 = DFM_NUM_VAL(D, "rxfin_touched_2poly_area")
asej_1 = DFM_NUM_VAL(S, "rxfin_touched_1poly_area")
adej_1 = DFM_NUM_VAL(D, "rxfin_touched_1poly_area")
psej_2poly_perim = DFM_NUM_VAL(S, "rxfin_touched_2poly_perim")
psej_2poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_2poly_edge_l")
psej_1poly_perim = DFM_NUM_VAL(S, "rxfin_touched_1poly_perim")
psej_1poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_1poly_edge_l")
pdej_2poly_perim = DFM_NUM_VAL(D, "rxfin_touched_2poly_perim")
pdej_2poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_2poly_edge_l")
pdej_1poly_perim = DFM_NUM_VAL(D, "rxfin_touched_1poly_perim")
pdej_1poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_1poly_edge_l")
asej = asej_2 + asej_1
adej = adej_2 + adej_1
psej = ((psej_2poly_perim - psej_2poly_edge_l)/2) + (psej_1poly_perim - psej_1poly_edge_l)
pdej = ((pdej_2poly_perim - pdej_2poly_edge_l)/2) + (pdej_1poly_perim - pdej_1poly_edge_l)
]

// P1SVT device
and pgate Psvt -outputlayer pgate_svt;
not pgate_svt ThickOx -outputlayer p1svt_dev;
device MP (p1svt) p1svt_dev pgate (G) psd (S) psd (D) nw_conn (B) <pactive> -model cds_ff_mpt_p1svt [
property l, nf, nfin, asej, adej, psej, pdej
nf = 1;
l = perim_co( p1svt_dev, pactive ) / 2;
w = perim_in( p1svt_dev, pactive ) / 2;
nfin = (( w - finWidth) / finPitch ) + 1;
asej_2 = DFM_NUM_VAL(S, "rxfin_touched_2poly_area")
adej_2 = DFM_NUM_VAL(D, "rxfin_touched_2poly_area")
asej_1 = DFM_NUM_VAL(S, "rxfin_touched_1poly_area")
adej_1 = DFM_NUM_VAL(D, "rxfin_touched_1poly_area")
psej_2poly_perim = DFM_NUM_VAL(S, "rxfin_touched_2poly_perim")
psej_2poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_2poly_edge_l")
psej_1poly_perim = DFM_NUM_VAL(S, "rxfin_touched_1poly_perim")
psej_1poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_1poly_edge_l")
pdej_2poly_perim = DFM_NUM_VAL(D, "rxfin_touched_2poly_perim")
pdej_2poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_2poly_edge_l")
pdej_1poly_perim = DFM_NUM_VAL(D, "rxfin_touched_1poly_perim")
pdej_1poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_1poly_edge_l")
asej = asej_2 + asej_1
adej = adej_2 + adej_1
psej = ((psej_2poly_perim - psej_2poly_edge_l)/2) + (psej_1poly_perim - psej_1poly_edge_l)
pdej = ((pdej_2poly_perim - pdej_2poly_edge_l)/2) + (pdej_1poly_perim - pdej_1poly_edge_l)
]

// P2SVT device
and pgate_svt ThickOx -outputlayer p2svt_dev;
device MP (p2svt) p2svt_dev pgate (G) psd (S) psd (D) nw_conn (B) <pactive> -model cds_ff_mpt_p2svt [
property l, nf, nfin, asej, adej, psej, pdej
nf = 1;
l = perim_co( p2svt_dev, pactive ) / 2;
w = perim_in( p2svt_dev, pactive ) / 2;
nfin = (( w - finWidth) / finPitch ) + 1;
asej_2 = DFM_NUM_VAL(S, "rxfin_touched_2poly_area")
adej_2 = DFM_NUM_VAL(D, "rxfin_touched_2poly_area")
asej_1 = DFM_NUM_VAL(S, "rxfin_touched_1poly_area")
adej_1 = DFM_NUM_VAL(D, "rxfin_touched_1poly_area")
psej_2poly_perim = DFM_NUM_VAL(S, "rxfin_touched_2poly_perim")
psej_2poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_2poly_edge_l")
psej_1poly_perim = DFM_NUM_VAL(S, "rxfin_touched_1poly_perim")
psej_1poly_edge_l = DFM_NUM_VAL(S, "rxfin_touched_1poly_edge_l")
pdej_2poly_perim = DFM_NUM_VAL(D, "rxfin_touched_2poly_perim")
pdej_2poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_2poly_edge_l")
pdej_1poly_perim = DFM_NUM_VAL(D, "rxfin_touched_1poly_perim")
pdej_1poly_edge_l = DFM_NUM_VAL(D, "rxfin_touched_1poly_edge_l")
asej = asej_2 + asej_1
adej = adej_2 + adej_1
psej = ((psej_2poly_perim - psej_2poly_edge_l)/2) + (psej_1poly_perim - psej_1poly_edge_l)
pdej = ((pdej_2poly_perim - pdej_2poly_edge_l)/2) + (pdej_1poly_perim - pdej_1poly_edge_l)
]

lvs_reduce yes -parallel_mos 
[ tolerance l 0 nfin 0 
  effective nf, nfin, l
nf = sum(nf)
nfin = sum(nfin)/count()
l = sum(l)/count()
]

lvs_reduce_split_gates yes  
[ tolerance l 0 nfin 0 
  effective nf, nfin, l
nf = sum(nf)
nfin = sum(nfin)/count()
l = sum(l)/count()
]

lvs_check_property MN l l -absolute -tolerance 0;
lvs_check_property MN nf nf -absolute -tolerance 0;
lvs_check_property MN nfin nfin -absolute -tolerance 0;
lvs_check_property MP l l -absolute -tolerance 0;
lvs_check_property MP nf nf -absolute -tolerance 0;
lvs_check_property MP nfin nfin -absolute -tolerance 0;

// END DEVICE DEFINITIONS

// AKM Added for supporting QRC flow
// genfin active_noCut poly_all -width 0.014 -space 0.034 -outputlayer fin_marker_layer;
bbox active_noCut -outputlayer active_noCut_bbox;
dfm_polygon_feature active_noCut_bbox -outputlayer fin_marker_layer_box [
    if ( vertex(active_noCut_bbox) == 4 ) {
        minx = bbox_minx(active_noCut_bbox);
        maxx = bbox_maxx(active_noCut_bbox);
        miny = bbox_miny(active_noCut_bbox);
        maxy = bbox_maxy(active_noCut_bbox);
        py = (0.034 + maxy - miny) / 0.048
        rpy = ROUND(py)
        if (py == rpy) {
            min_y = miny + 0.001
            max_y = miny + 0.014
            d = save_polygon_list( 0, py, 1, minx, miny, maxx, max_y, 0, 0.048, 0, 0.048 );
        }
    }
]
and active_noCut fin_marker_layer_box -outputlayer fin_marker_layer;

rcx_layer fin_marker_layer;
rcx_layer NPNdmy;

