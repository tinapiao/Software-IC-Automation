// PVS DRC RULE DECK FOR AGPDK 10nm
//
// This file is optimized for coding efficiency by use of macros and PVS TCL.
// View log file for expanded PVL.
//
//-----------------------------------------------------------------------------
// VERSION v0.3 (release version) 10/04/2016
//-----------------------------------------------------------------------------

layout_path "CELLNAME.gds" gdsii;
layout_primary "CELLNAME";
results_db -drc "CELLNAME.db" -ascii;

input_scale 2000;
grid 1;
unit -length u;
text_depth -primary;

layout_format gdsii
max_results -drc -all

flag -nonsimple yes;

rule offgrid_check {
    caption Grid violation;
    layout_input -offgrid;
}

rule ortho_45_check {
    caption Orthogonal and 45 degree violation;
    layout_input -skew;
}

rule acute_check {
    caption Acute angle  violation;
    layout_input -acute;
}

layer_def BuriedNWell 1100 
 layer_map 3 -datatype 0 1100

layer_def NWell 1001 
 layer_map 5 -datatype 0 1001

layer_def NWell_PIN 1002 
 layer_map 5 -datatype 45 1002

layer_def NWell_LABEL 1003 
 layer_map 5 -datatype 46 1003

layer_def Active 1004 
 layer_map 10 -datatype 0 1004

layer_def Active_FIN 1005 
 layer_map 10 -datatype 5 1005

layer_def Active_DUMMY 1006 
 layer_map 10 -datatype 10 1006

layer_def CutActive 1007 
 layer_map 10 -datatype 20 1007

layer_def Active_PIN 1008 
 layer_map 10 -datatype 45 1008

layer_def Active_LABEL 1009 
 layer_map 10 -datatype 46 1009

layer_def FinArea 1010 
 layer_map 300 -datatype 0 1010

layer_def FinArea_type2 1011 
 layer_map 350 -datatype 0 1011

layer_def FinArea_type3 1012 
 layer_map 400 -datatype 0 1012

layer_def TrimFin 1013 
 layer_map 120 -datatype 0 1013

layer_def Psvt 1014 
 layer_map 15 -datatype 0 1014

layer_def Plvt 1015 
 layer_map 15 -datatype 1 1015

layer_def Phvt 1016 
 layer_map 15 -datatype 2 1016

layer_def Nsvt 1017 
 layer_map 16 -datatype 0 1017

layer_def Nlvt 1018 
 layer_map 16 -datatype 1 1018

layer_def Nhvt 1019 
 layer_map 16 -datatype 2 1019

layer_def Poly_DRAWING 1020 
 layer_map 20 -datatype 0 1020

layer_def Poly_DUMMY 1021 
 layer_map 20 -datatype 10 1021

layer_def Poly_EDGE 1022 
 layer_map 20 -datatype 30 1022

layer_def Poly_PIN 1023 
 layer_map 20 -datatype 45 1023

layer_def Poly_LABEL 1024 
 layer_map 20 -datatype 46 1024

layer_def CutPoly 1025 
 layer_map 21 -datatype 0 1025

layer_def LiAct 1026 
 layer_map 22 -datatype 0 1026

layer_def LiPo 1027 
 layer_map 24 -datatype 0 1027

layer_def PPitch_POLY86 1028 
 layer_map 130 -datatype 1 1028

layer_def PPitch_POLY90 1029 
 layer_map 130 -datatype 2 1029

layer_def PPitch_POLY94 1030 
 layer_map 130 -datatype 3 1030

layer_def PPitch_POLY102 1031 
 layer_map 130 -datatype 4 1031

layer_def PPitch_POLY104 1032 
 layer_map 130 -datatype 5 1032

layer_def SaB 1033 
 layer_map 6 -datatype 0 1033

layer_def V0 1034 
 layer_map 25 -datatype 0 1034

layer_def M1 1040 
 layer_map 30 -datatype 0 1040

layer_def M1_FILL 1041 
 layer_map 30 -datatype 11 1041

layer_def M1_MASK1_UNLOCK 1042 
 layer_map 30 -datatype 1 1042

layer_def M1_MASK1_LOCK 1043 
 layer_map 30 -datatype 2 1043

layer_def M1_MASK2_UNLOCK 1044 
 layer_map 30 -datatype 3 1044

layer_def M1_MASK2_LOCK 1045 
 layer_map 30 -datatype 4 1045

layer_def M1_PIN 1046 
 layer_map 30 -datatype 45 1046

layer_def M1_LABEL 1047 
 layer_map 30 -datatype 46 1047

layer_def V1 1055 
 layer_map 32 -datatype 0 1055

layer_def V1_MASK1_UNLOCK 1355 
 layer_map 32 -datatype 1 1355

layer_def V1_MASK1_LOCK 1356 
 layer_map 32 -datatype 2 1356

layer_def V1_MASK2_UNLOCK 1455 
 layer_map 32 -datatype 3 1455

layer_def V1_MASK2_LOCK 1456 
 layer_map 32 -datatype 4 1456

layer_def V1_MASK3_UNLOCK 1555 
 layer_map 32 -datatype 5 1555

layer_def V1_MASK3_LOCK 1556 
 layer_map 32 -datatype 6 1556

layer_def V1_MASK4_UNLOCK 1655 
 layer_map 32 -datatype 7 1655

layer_def V1_MASK4_LOCK 1656 
 layer_map 32 -datatype 8 1656

layer_def M2 1060 
 layer_map 34 -datatype 0 1060

layer_def M2_FILL 1161 
 layer_map 34 -datatype 11 1161

layer_def M2_MASK1_UNLOCK 1062 
 layer_map 34 -datatype 1 1062

layer_def M2_MASK1_LOCK 1063 
 layer_map 34 -datatype 2 1063

layer_def M2_MASK2_UNLOCK 1064 
 layer_map 34 -datatype 3 1064

layer_def M2_MASK2_LOCK 1065 
 layer_map 34 -datatype 4 1065

layer_def M2_PIN 1066 
 layer_map 34 -datatype 45 1066

layer_def M2_LABEL 1067 
 layer_map 34 -datatype 46 1067

layer_def V2 1075 
 layer_map 36 -datatype 0 1075

layer_def V2_MASK1_UNLOCK 1375 
 layer_map 36 -datatype 1 1375

layer_def V2_MASK1_LOCK 1376 
 layer_map 36 -datatype 2 1376

layer_def V2_MASK2_UNLOCK 1475 
 layer_map 36 -datatype 3 1475

layer_def V2_MASK2_LOCK 1476 
 layer_map 36 -datatype 4 1476

layer_def V2_MASK3_UNLOCK 1575 
 layer_map 36 -datatype 5 1575

layer_def V2_MASK3_LOCK 1576 
 layer_map 36 -datatype 6 1576

layer_def V2_MASK4_UNLOCK 1675 
 layer_map 36 -datatype 7 1675

layer_def V2_MASK4_LOCK 1676 
 layer_map 36 -datatype 8 1676

layer_def M3 1080 
 layer_map 38 -datatype 0 1080

layer_def M3_FILL 1081 
 layer_map 38 -datatype 11 1081

layer_def M3_MASK1_UNLOCK 1082 
 layer_map 38 -datatype 1 1082

layer_def M3_MASK1_LOCK 1083 
 layer_map 38 -datatype 2 1083

layer_def M3_MASK2_UNLOCK 1084 
 layer_map 38 -datatype 3 1084

layer_def M3_MASK2_LOCK 1085 
 layer_map 38 -datatype 4 1085

layer_def M3_PIN 1086 
 layer_map 38 -datatype 45 1086

layer_def M3_LABEL 1087 
 layer_map 38 -datatype 46 1087

layer_def V3 1095 
 layer_map 40 -datatype 0 1095

layer_def V3_MASK1_UNLOCK 1395 
 layer_map 40 -datatype 1 1395

layer_def V3_MASK1_LOCK 1396 
 layer_map 40 -datatype 2 1396

layer_def V3_MASK2_UNLOCK 1495 
 layer_map 40 -datatype 3 1495

layer_def V3_MASK2_LOCK 1496 
 layer_map 40 -datatype 4 1496

layer_def V3_MASK3_UNLOCK 1595 
 layer_map 40 -datatype 5 1595

layer_def V3_MASK3_LOCK 1596 
 layer_map 40 -datatype 6 1596

layer_def V3_MASK4_UNLOCK 1695 
 layer_map 40 -datatype 7 1695

layer_def V3_MASK4_LOCK 1696 
 layer_map 40 -datatype 8 1696

layer_def M4 1103 
 layer_map 42 -datatype 0 1103

layer_def M4_FILL 1126 
 layer_map 42 -datatype 11 1126

layer_def M4_PIN 1106 
 layer_map 42 -datatype 45 1106

layer_def M4_LABEL 1107 
 layer_map 42 -datatype 46 1107

layer_def V4 1115 
 layer_map 44 -datatype 0 1115

layer_def M5 1123 
 layer_map 46 -datatype 0 1123

layer_def M5_FILL 1127 
 layer_map 46 -datatype 11 1127

layer_def M5_PIN 1130 
 layer_map 46 -datatype 45 1130

layer_def M5_LABEL 1131 
 layer_map 46 -datatype 46 1131

layer_def V5 1139 
 layer_map 48 -datatype 0 1139

layer_def M6 1147 
 layer_map 50 -datatype 0 1147

layer_def M6_FILL 1148 
 layer_map 50 -datatype 11 1148

layer_def M6_PIN 1151 
 layer_map 50 -datatype 45 1151

layer_def M6_LABEL 1152 
 layer_map 50 -datatype 46 1152

layer_def V6 1160 
 layer_map 52 -datatype 0 1160

layer_def M7 1168 
 layer_map 54 -datatype 0 1168

layer_def M7_FILL 1169 
 layer_map 54 -datatype 11 1169

layer_def M7_PIN 1172 
 layer_map 54 -datatype 45 1172

layer_def M7_LABEL 1173 
 layer_map 54 -datatype 46 1173

layer_def CMT 1181 
 layer_map 60 -datatype 0 1181

layer_def VT 1182
 layer_map 62 -datatype 0 1182

layer_def MT 1190 
 layer_map 64 -datatype 0 1190

layer_def MT_FILL 1191 
 layer_map 64 -datatype 11 1191

layer_def MT_PIN 1194 
 layer_map 64 -datatype 45 1194

layer_def MT_LABEL 1195 
 layer_map 64 -datatype 46 1195

layer_def m1res 1203 
 layer_map 30 -datatype 12 1203

layer_def m2res 1204 
 layer_map 34 -datatype 12 1204

layer_def m3res 1205 
 layer_map 38 -datatype 12 1205

layer_def m4res 1206 
 layer_map 42 -datatype 12 1206

layer_def m5res 1207 
 layer_map 46 -datatype 12 1207

layer_def m6res 1208 
 layer_map 50 -datatype 12 1208

layer_def m7res 1209 
 layer_map 54 -datatype 12 1209

layer_def mtres 1210 
 layer_map 64 -datatype 12 1210

layer_def nwstires 1211 
 layer_map 5 -datatype 12 1211

layer_def nwodres 1212 
 layer_map 5 -datatype 13 1212

layer_def diffres 1213 
 layer_map 10 -datatype 12 1213

layer_def pcres 1214 
 layer_map 20 -datatype 12 1214

layer_def diodmy 1215 
 layer_map 153 -datatype 0 1215

layer_def NPNdmy 1216 
 layer_map 154 -datatype 0 1216

layer_def ThickOx 1217 
 layer_map 11 -datatype 0 1217

layer_def CutM1  1231;
 layer_map 31 -datatype eq 0  1231;

layer_def CutM1Mask1  1232;
 layer_map 31 -datatype eq 10  1232;

layer_def CutM1Mask2  1233;
 layer_map 31 -datatype eq 20  1233;

layer_def CutM2  1241;
 layer_map 35 -datatype eq 0  1241;

layer_def CutM2Mask1  1242;
 layer_map 35 -datatype eq 10  1242;

layer_def CutM2Mask2  1243;
 layer_map 35 -datatype eq 20  1243;

layer_def CutM3  1251; 
 layer_map 39 -datatype eq 0  1251;

layer_def CutM3Mask1  1252;
 layer_map 39 -datatype eq 10  1252;

layer_def CutM3Mask2  1253;
 layer_map 39 -datatype eq 20  1253;

//--------------------------------------------------------------
// Derived Layers  
//--------------------------------------------------------------

or Poly_DRAWING Poly_EDGE polyTmp1;
or Poly_DUMMY Poly_PIN polyTmp2;
or PolyTmp1 PolyTmp2 Poly;
and Poly Active gate;
or TrimFin CutActive AllCutActive;
not Active AllCutActive trueActive;
or Nsvt Nlvt NtypeImp;
or NtypeImp Nhvt NImplant;
or Psvt Plvt PtypeImp;
or PtypeImp Phvt PImplant;

//nactive = Active and NImplant 
and trueActive NImplant nactive;

//pactive = Active and PImplant 
and trueActive PImplant pactive;

// nwell_in_od_res=(Nwell overlap nwres) 
select -outside -not NWell nwstires nw_stires;
select -outside -not NWell nwodres nw_odres;


//--------------------------------------------------------------
// MACROS
//------------------------------------------------------------

dmacro chk_minwidth layer val {
   inte layer layer -lt val -abut lt 90 -single_point -output region;
}

dmacro chk_minwidth_wo_sp layer val {
   inte layer layer -lt val -abut lt 90 -output region;
}

dmacro chk_minspace layer1 layer2 val {
   exte layer1 layer2 -lt val -abut lt 90 -single_point -output region;
}

dmacro chk_minoverlap layer1 layer2 val {
   inte layer1 layer2 -lt val -abut lt 90 -single_point -output region;
}

dmacro chk_minarea layer val {
   area layer -lt val;
} 

dmacro chk_minencarea layer val {
   holes layer -inner layer_hole;
   not layer_hole layer layer_encarea;
   area layer_encarea -lt val;
}

dmacro chk_minenc layer1 layer2 val {
   enc layer2 layer1 -lt val -abut lt 90 -single_point -output region;
}

dmacro chk_maxwidth layer val {
   with_width layer -gt val;
} 

dmacro chk_square layer val {
   rect_chk layer -eq val -not -by -eq val -orthogonal_only;
}

dmacro chk_rect layer val_w val_l {
   rect_chk -not layer -eq val_w -by -eq val_l;
}

dmacro chk_minrectenc layer1 layer2 val1 val2 val3 val4 {
   rect_enc layer1 layer2 -single_point -good val1 val2 val3 val4;
}  

dmacro chk_overlap layer1 layer2 {
   and layer1 layer2;
}

dmacro chk_minlength layer val_w val_l {
     with_width layer -eq val_w layer_eqval_w; 
     edge_length layer_eqval_w -lt val_l;
}

dmacro chk_maxlength layer val_l {
     edge_length layer -gt val_l;
}
dmacro chk_step_w_ydir layer val_max_dist val_min val_step {
  inte layer layer -lt val_min -abut lt 90 -metric opposite;
  convex_edge -angle1 gt 180 -angle2 gt 0 Active step0;
  inte layer step0 -lt val_max_dist -abut lt 90 -exclude_shielded 4 -metric opposite -output region step1;
  edge_select -not -coincident_only layer step1 step2;
  inte step2 step2 -lt val_max_dist -abut lt 90 -exclude_shielded 4 -metric opposite -output region step3;
  cat step1 step3 step4;
  dfm_polygon_feature step4 -outputlayer step5 [
    minx = bbox_minx(step4);
    maxx = bbox_maxx(step4);
    miny = bbox_miny(step4);
    maxy = bbox_maxy(step4);
    rr = remainder(( maxy - miny - val_min ), val_step )
    if (rr != 0) {
      d = save_polygon( 4, minx, miny, minx, maxy, maxx, maxy, maxx, miny);
    }
  ]
  copy step5;
}
dmacro chk_step_w_xdir layer val_max_dist val_min val_step {
  inte layer layer -lt val_min -abut lt 90 -metric opposite;
  convex_edge -angle1 gt 180 -angle2 gt 0 Active step0;
  inte layer step0 -lt val_max_dist -abut lt 90 -exclude_shielded 4 -metric opposite -output region step1;
  edge_select -not -coincident_only layer step1 step2;
  inte step2 step2 -lt val_max_dist -abut lt 90 -exclude_shielded 4 -metric opposite -output region step3;
  cat step1 step3 step4;
  dfm_polygon_feature step4 -outputlayer step5 [
    minx = bbox_minx(step4);
    maxx = bbox_maxx(step4);
    miny = bbox_miny(step4);
    maxy = bbox_maxy(step4);
    rr = remainder(( maxx - minx - val_min ), val_step )
    if (rr != 0) {
      d = save_polygon( 4, minx, miny, minx, maxy, maxx, maxy, maxx, miny);
    }
  ]
  copy step5;
}

//--------------------------------------------------------------------------------------
// BURIEDNWELL RULES
//--------------------------------------------------------------------------------------

//Width check for Nburied <0.8
rule NBL.W.1 {
    caption NBL.W.1: Minimum Nburied Width >= 0.8 um;
    cmacro chk_minwidth BuriedNWell 0.8;
}

// spacing check for Nburied <2.0 
rule NBL.SP.1 {
    caption NBL.SP.1: Minimum Nburied to Nburied spacing >= 2.0 um;
    cmacro chk_minspace BuriedNWell BuriedNWell 2.0;
}

// spacing check for Nburied and Nwell <2.2 
rule NBL.SE.1 {
    caption NBL.SE.1: Minimum Nburied to non-related Nwell spacing >= 2.2 um;
    cmacro chk_minspace BuriedNWell NWell 2.2; 
}

// spacing check for nburied and oxide <1.2 
rule NBL.SE.2 {
    caption NBL.SE.2: Minimum Nburied to Oxide spacing >= 1.2 um;
    cmacro chk_minspace BuriedNWell Active 1.2 ; 
}

//----------------------------------------------------------------------------------
// NWELL RULES
//----------------------------------------------------------------------------------

// width check for Nwell <0.146 
rule NW.W.1 {
    caption NW.W.1: Minimum NWell Width >= 0.146 um;
    cmacro chk_minwidth NWell 0.146;
}

// spacing check for Nwell <0.162 
rule NW.SP.1 {
    caption NW.SP.1: Minimum Nwell spacing >= 0.162 um;
    cmacro chk_minspace NWell NWell 0.162;
}

// spacing check for Nwell to Active <0.16 
rule NW.SE.1 {
    caption NW.SE.1: Minimum Nwell spacing to Active  >= 0.16 um;
    cmacro chk_minspace NWell Active 0.16 ;
}

// spacing check for Nwell to 1.8V Active <0.24 
rule NW.SE.2 {
    caption NW.SE.2: Minimum Nwell spacing to 1.8V Active Area >= 0.24 um;
    cmacro chk_minspace NWell ThickOx 0.24 ;
}

// enclose check for Active inside Nwell <0.021 
rule NW.E.1 {
    caption NW.E.1: Minimum Nwell enclosure of Active Area >= 0.021 um;
    cmacro chk_minenc NWell Active 0.021;
}

// enclose check for 1.8V Active Area inside Nwell <0.034 
rule NW.E.2 {
    caption NW.E.2: Minimum Nwell enclosure of 1.8V Active Area >= 0.034 um;
    cmacro chk_minenc NWell ThickOx 0.034;
}

select -cut BuriedNWell NWell nbl_sdl_nwell;

// enclose check for straddled NBL inside Nwell <0.24
rule NW.E.3 {
    caption NW.E.3: Minimum Nwell enclosure of straddled NBL >= 0.24 um;
    cmacro chk_minenc NWell nbl_sdl_nwell 0.24;
}

// Extension check for straddled NBL & Nwell <0.24
rule NW.E.4 {
    caption NW.E.4: Minimum Nwell extension into straddled NBL >= 0.24 um;
    cmacro chk_minoverlap nbl_sdl_nwell NWell 0.24;
}

// area check for Nwell <0.03 
rule NW.A.1 {
    caption NW.A.1: Minimum Nwell area >= 0.03 um;
    cmacro chk_minarea NWell 0.03;
}

// area check for NWell <0.18 
rule NW.EA.1 {
    caption NW.EA.1: Minimum Nwell enclosed area >= 0.18 um;
    cmacro chk_minencarea NWell 0.18;
}

//--------------------------------------------------------------------------------------
// NWELL RESISTOR WITHIN OXIDE RULES
//--------------------------------------------------------------------------------------

// enclose check for NWELL RESISTOR inside Active <0.055
rule NWR.E.1 {
caption NWR.E.1: Minimum Active enclosure of Nwell(in resistor) >= 0.021 um;
    cmacro chk_minenc Active nw_stires 0.021;
    cmacro chk_minenc Active nw_odres 0.021;
}

rule NWR.SP.1 {
    caption NWR.SP.1: Minimum Nwell resistor spacing to Nwell  >= 0.3 um;
    cmacro chk_minspace nw_odres Nwell 0.3;
    cmacro chk_minspace nw_stires Nwell 0.3; 
}

//--------------------------------------------------------------------------------------
// ACTIVE RULES
//--------------------------------------------------------------------------------------

angle Active -eq 90 Active_V;
angle Active -eq 0 Active_H;

// width check for Active in Y direction <0.062 
rule OXIDE.W.1 {
  caption OXIDE.W.1: Minimum Active width in the Y direction in steps of 0.048 >= 0.062 um;
  cmacro chk_step_w_ydir Active_H 100 0.062 0.048;
}

// width check for Active in X direction <0.068 
rule OXIDE.W.2 {
    caption OXIDE.W.2: Minimum Active width in the X direction >= 0.068 um;
    cmacro chk_minwidth Active_V 0.068;
}

// space check for Active in Y direction <0.13 
rule OXIDE.SP.1 {
    caption OXIDE.SP.1: Minimum Active space in the Y direction in steps of 0.048 >= 0.13 um;
    cmacro chk_minspace Active_H Active_H 0.13;
}

// space check for Active in X direction <0.018 
rule OXIDE.SP.2 {
    caption OXIDE.SP.2: Minimum Active space in the X direction >= 0.018 um;
    cmacro chk_minspace Active_V Active_V 0.018;
}

or NImplant PImplant N_or_P_Implant;
or N_or_P_Implant nwodres N_or_P_or_Res_Implant;
rule OXIDE.C.1 {
    caption OXIDE.C.1: Active must be covered by N+ Implant or P+ Implant;
    not Active N_or_P_or_Res_Implant;
}



//--------------------------------------------------------------------------------------
// CUT ACTIVE RULES
//--------------------------------------------------------------------------------------

angle CutActive -eq 90 CutActive_V;
angle CutActive -eq 0 CutActive_H;

rule CUTACTIVE.W.1 {
  caption CUTACTIVE.W.1: Minimum CutActive width in the Y direction in steps of 0.048 >= 0.082 um;
  cmacro chk_step_w_ydir CutActive_H 100 0.082 0.048;
}

// Allowed width values for CutActive in X direction (18 20 24 28 30)nm
rule CUTACTIVE.W.2 {
    caption CUTACTIVE.W.2: Allowed CutActive width values in the X direction (0.018 0.020 0.024 0.028 0.030) um;
    inte CutActive_V CutActive_V -lt 0.018 -abut lt 90 -metric opposite;
    inte CutActive_V CutActive_V -ltgt 0.018 0.020 -abut lt 90 -metric opposite;
    inte CutActive_V CutActive_V -ltgt 0.020 0.024 -abut lt 90 -metric opposite;
    inte CutActive_V CutActive_V -ltgt 0.024 0.028 -abut lt 90 -metric opposite;
    inte CutActive_V CutActive_V -ltgt 0.028 0.030 -abut lt 90 -metric opposite;
    shrink CutActive -left 0.015 -right 0.015 step1;
    select -interact CutActive step1;    
}

// spacing check for CutActive <0.068 
rule CUTACTIVE.SP.1 {
    caption CUTACTIVE.SP.1: Minimum CutActive space >= 0.068 um;
    cmacro chk_minspace CutActive CutActive 0.068;
}

// spacing check for CutActive to Active <0.068 
rule CUTACTIVE.SE.1 {
    caption CUTACTIVE.SE.1: Minimum CutActive to Active space >= 0.068 um;
    cmacro chk_minspace CutActive Active 0.068;    
}

// CutActive extension beyond Active <0.01
rule CUTACTIVE.E.1 {
    caption CUTACTIVE.E.1: Minimum CutActive extension beyond Active >= 0.01 um;
    enc Active CutActive_H -lt 0.01 -output region -singular -abut lt 90 -metric opposite;
}

//--------------------------------------------------------------------------------------
// FIN RULES
//--------------------------------------------------------------------------------------

angle FinArea -eq 90 FinArea_V;
angle FinArea -eq 0 FinArea_H;

//width check for FinArea in Y direction <0.062 
rule FB48.W.1 {
    caption FB48.W.1: Minimum FinArea width in the Y direction in steps of 0.048 >= 0.062 um;
    cmacro chk_step_w_ydir FinArea_H 100 0.062 0.048;
}

// width check for FinArea in X direction <0.096 
rule FB48.W.2 {
    caption FB48.W.2: Minimum FinArea width in the X direction >= 0.096 um;
    cmacro chk_minwidth FinArea_V 0.096;
}

// space check for FinArea in Y direction <0.034 
rule FB48.SP.1 {
    caption FB48.SP.1: Minimum FinArea space in the Y direction in steps of 0.48 >= 0.034 um;
    cmacro chk_minspace FinArea_H FinArea_H 0.034;
}

// Overlap check for FinArea to Active in X direction
rule FB48.E.2 {
    caption FB48.E.2: Minimum FinArea Overlap Active in the X direction >= 0.017 um;
    cmacro chk_minoverlap FinArea_V Active_V 0.017;  
}

// Overlap check for FinArea to Active in Y direction ( also 0.048 grid check )
rule FB48.E.1 {
    caption FB48.E.1: Minimum FinArea Overlap Active in the Y direction in steps of 0.048 >= 0.048 um;
    edge_boolean -inside Active_H FinArea fb48e1_1;
    enc fb48e1_1 FinArea -le 20  -metric opposite -exclude_shielded 4 fb48e1_2;
    dfm_property fb48e1_2
	[ - = FMOD((ew(fb48e1_2)*1000),48) ] -ne 0 -output fb48e1_3;
    edge_select Active_H fb48e1_3;
}

//--------------------------------------------------------------------------------------
// THICK ACTIVE RULES
//--------------------------------------------------------------------------------------

angle ThickOx -eq 90 ThickOx_V;
angle ThickOx -eq 0 ThickOx_H;

// width check for Thick Active in Y direction <0.124 
rule OXIDETHK.W.1 {
    caption OXIDETHK.W.1: Minimum Thick Active Area width in the Y direction >= 0.124 um;
    cmacro chk_minwidth ThickOx_H 0.124; 
}

// width check for Thick Active in X direction <0.158 
rule OXIDETHK.W.2 {
    caption OXIDETHK.W.2: Minimum Thick Active Area width in the X direction >= 0.158 um;
    cmacro chk_minwidth ThickOx_V 0.158;
}

// space check for Thick Active in Y direction <0.068 
rule OXIDETHK.SP.1 {
    caption OXIDETHK.SP.1: Minimum Thick Active Area space in the Y direction >= 0.068 um;
    cmacro chk_minspace ThickOx_H ThickOx_H 0.068;
}

// space check for Thick Active in X direction <0.064 
rule OXIDETHK.SP.2 {
    caption OXIDETHK.SP.2: Minimum Thick Active Area space in the X direction >= 0.064 um;
    cmacro chk_minspace ThickOx_V ThickOx_V 0.064;
}

// space check for Thick Active to Active in Y direction <0.099 
rule OXIDETHK.SE.1 {
    caption OXIDETHK.SE.1: Minimum Thick Active Area space to Active Area in the Y direction >= 0.099 um;
    cmacro chk_minspace ThickOx_H Active_H 0.099;
    }

// space check for Thick Active to Active in X direction <0.109 
rule OXIDETHK.SE.2 {
    caption OXIDETHK.SE.2: Minimum Thick Active Area space to Active Area in the X direction >= 0.109 um;
    cmacro chk_minspace ThickOx_V Active_V  0.109;
}

// enclose check for Active inside Thick Active in Y direction <0.031 
rule OXIDETHK.E.1 {
    caption OXIDETHK.E.1: Minimum Thick Active Area to Active Area enclosure in the Y direction >= 0.031 um;
    cmacro chk_minenc ThickOx_H Active_H 0.031;
}

// enclose check for Active inside Thick Active in X direction <0.045 
rule OXIDETHK.E.2 {
    caption OXIDETHK.E.2: Minimum Thick Active Area to Active Area enclosure in the X direction >= 0.045 um;
    cmacro chk_minenc ThickOx_V Active_V 0.045;
}

//--------------------------------------------------------------------------------------
// SALICIDE BLOCKING RULES
//--------------------------------------------------------------------------------------

// width check for SaB <0.042 
rule SIPROT.W.1 {
    caption SIPROT.W.1: Minimum Salicide Block width >= 0.042 um;
    inte SaB SaB -lt 0.042 -output region -singular -abut lt 90;
}

// spacing check for SaB <0.044 
rule SIPROT.SP.1 {
    caption SIPROT.SP.1: Minimum Salicide Block space >= 0.044 um;
    exte SaB SaB -lt 0.044 -output region -singular -abut lt 90;
}

// spacing check for Cont and SaB <0.009 
rule SIPROT.SE.1 {
    caption SIPROT.SE.1: Minimum Salicide Block to Contact spacing >= 0.009 um;
    exte V0 SaB -lt 0.009 -output region -singular -abut lt 90;
}

// spacing check for Active to SaB <0.12  
rule SIPROT.SE.2 {
    caption SIPROT.SE.2: Minimum Salicide Block to unrelated Active Area spacing >= 0.12 um;
    exte Active SaB -lt 0.012 -abut lt 90 -single_point -output region;
}

// spacing check for SaB to Poly <0.022 
rule SIPROT.SE.3 {
    caption SIPROT.SE.3: Minimum Salicide Block to Poly space >= 0.022 um;
    exte SaB Poly -lt 0.022 -output region -singular -abut lt 90;
}

edge_boolean -outside Active diffres active_out_res; 

//Enclosure check for Salicide to Active
rule SIPROT.E.1 {
    caption SIPROT.E.1 : Minimum Salicide block to Active area enclosure >=0.012;
    enc Active SaB -lt 0.012 -output region -singular -abut lt 90;
}

//Enclosure check for Active area to to Salicide block
rule SIPROT.E.2 {
    caption SIPROT.E.1 : Minimum Active area to to Salicide block >=0.012;
    enc SaB Active -lt 0.012 -output region -singular -abut lt 90;
}

//Enclosure check for Salicide block to Poly
rule SIPROT.E.3 {
    caption SIPROT.E.3 : Minimum Salicide block to Poly >=0.012;
    enc Poly SaB -lt 0.012 -output region -singular -abut lt 90;
}

// Area check for SaB <0.0042 
rule SIPROT.A.1 {
    caption SIPROT.A.1: Minimum Salicide Block area >= 0.0042 um;
    area SaB -lt 0.0042;
}

//--------------------------------------------------------------------------------------
// NIMPLANT RULES
//--------------------------------------------------------------------------------------

// width check for Nsvt <0.052 
rule NSVT.W.1 {
    caption NSVT.W.1: Minimum Nsvt width >= 0.052 um;
    cmacro chk_minwidth_wo_sp Nsvt 0.052;
}

// spacing check for Nsvt <0.024 
rule NSVT.SP.1 {
    caption NSVT.SP.1: Minimum Nsvt space >= 0.024 um;
    cmacro chk_minspace Nsvt Nsvt 0.024;
}

// spacing check for Nsvt to PActive <0.045 
rule NSVT.SE.1 {
    caption NSVT.SE.1: Minimum Nsvt to PActive space >= 0.045 um;
    cmacro chk_minspace  Nsvt pactive 0.045;    
}

// area check for Nsvt <0.017 
rule NSVT.A.1 {
    caption NSVT.A.1: Minimum area for Nsvt >= 0.017 um;
    cmacro chk_minarea Nsvt 0.017;
}

// enclose check for Poly inside Nsvt <(0.045,0.065)
rule NSVT.E.1 {
    caption NSVT.E.1: Minimum Nsvt to Poly enclosure >=(0.045,0.065)
// out = ((0.065 - 0.045) % 2) + 0.001, in = ((0.065 - 0.045) % 2) - 0.001, check_value = 0.045 + $in
    grow Poly -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Poly -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Nsvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nsvt_e_1_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 nsvt_e_1_bad_E1 nsvt_e_1_bad_1;
    enc grow_v_011_shrink_h_009 Nsvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nsvt_e_1_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 nsvt_e_1_bad_E2 nsvt_e_1_bad_2;
    select -interact nsvt_e_1_bad_1 nsvt_e_1_bad_2 nsvt_e_1_bad;
    copy nsvt_e_1_bad;
}

// enclose check for Active inside Nsvt <(0.045,0.065)
rule NSVT.E.2 {
    caption NSVT.E.2: Minimum Nsvt to Active enclosure >=(0.045,0.065)
    grow Active -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Active -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Nsvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nsvt_e_2_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 nsvt_e_2_bad_E1 nsvt_e_2_bad_1;
    enc grow_v_011_shrink_h_009 Nsvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nsvt_e_2_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 nsvt_e_2_bad_E2 nsvt_e_2_bad_2;
    select -interact nsvt_e_2_bad_1 nsvt_e_2_bad_2 nsvt_e_2_bad;
    copy nsvt_e_2_bad;
}  

rule NSVT.X.1 {
    caption NSVT.X.1: Nsvt is NOT allowed over Ptype Implant;
    cmacro chk_overlap Nsvt PImplant ;
}

//--------------------------------------------------------------------------------------
// NHVT RULES
//--------------------------------------------------------------------------------------

// width check for Nhvt <0.052 
rule NHVT.W.1 {
    caption NHVT.W.1: Minimum Nhvt width >= 0.052;
    cmacro chk_minwidth_wo_sp Nhvt 0.052;
}

// spacing check for Nhvt <0.024 
rule NHVT.SP.1 {
    caption NHVT.SP.1: Minimum Nhvt spacing >= 0.024;
    cmacro chk_minspace Nhvt Nhvt 0.024;
}

// spacing check for Nhvt to PActive <0.045 
rule NHVT.SE.1 {
    caption NHVT.SE.1: Minimum Nhvt to PActive space >= 0.045 um;
    cmacro chk_minspace Nhvt pactive 0.045;    
}

// area check for Nhvt <0.03 
rule NHVT.A.1 {
    caption NHVT.A.1: Minimum Nhvt area >= 0.03 um;
    cmacro chk_minarea Nhvt 0.03;
}

// enclose check for Poly inside Nhvt <(0.045,0.065)
// out = ((0.065 - 0.045) % 2) + 0.001, in = ((0.065 - 0.045) % 2) - 0.001, check_value = 0.045 + $in
rule NHVT.E.1 {
    caption NHVT.E.1: Minimum Nhvt to Poly enclosure >=(0.045,0.065)
    grow Poly -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Poly -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Nhvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nhvt_e_1_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 nhvt_e_1_bad_E1 nhvt_e_1_bad_1;
    enc grow_v_011_shrink_h_009 Nhvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nhvt_e_1_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 nhvt_e_1_bad_E2 nhvt_e_1_bad_2;
    select -interact nhvt_e_1_bad_1 nhvt_e_1_bad_2 nhvt_e_1_bad;
    copy nhvt_e_1_bad;
}

// enclose check for Active inside Nhvt <(0.045,0.065)
rule NHVT.E.2 {
    caption NHVT.E.2: Minimum Nhvt to Active enclosure >=(0.045,0.065)
    grow Active -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Active -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Nhvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nhvt_e_2_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 nhvt_e_2_bad_E1 nhvt_e_2_bad_1;
    enc grow_v_011_shrink_h_009 Nhvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nhvt_e_2_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 nhvt_e_2_bad_E2 nhvt_e_2_bad_2;
    select -interact nhvt_e_2_bad_1 nhvt_e_2_bad_2 nhvt_e_2_bad;
    copy nhvt_e_2_bad;
}  

rule NHVT.X.1 {
    caption NHVT.X.1: Nhvt is NOT allowed on Ptype Implant;
    cmacro chk_overlap Nhvt PImplant ;
}

//--------------------------------------------------------------------------------------
// NLVT RULES
//--------------------------------------------------------------------------------------

// width check for Nlvt <0.052 
rule NLVT.W.1 {
    caption NLVT.W.1: Minimum Nlvt width >= 0.052;
    cmacro chk_minwidth_wo_sp Nlvt 0.052;
}

// spacing check for Nlvt <0.024 
rule NLVT.SP.1 {
    caption NLVT.SP.1: Minimum Nhvt spacing >= 0.024;
    cmacro chk_minspace Nlvt Nlvt 0.024;
}

// spacing check for Nlvt to PActive <0.045 
rule NLVT.SE.1 {
    caption NLVT.SE.1: Minimum Nlvt to PActive space >= 0.045 um;
    cmacro chk_minspace Nlvt pactive 0.045;
}

// area check for Nlvt <0.03 
rule NLVT.A.1 {
    caption NLVT.A.1: Minimum Nlvt area >= 0.03 um;
    cmacro chk_minarea Nlvt 0.03;
}

// enclose check for Poly inside Nlvt <(0.045,0.065)
rule NLVT.E.1 {
    caption NLVT.E.1: Minimum Nlvt to Poly enclosure >=(0.045,0.065)
    grow Poly -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Poly -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Nlvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nlvt_e_1_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 nlvt_e_1_bad_E1 nlvt_e_1_bad_1;
    enc grow_v_011_shrink_h_009 Nlvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nlvt_e_1_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 nlvt_e_1_bad_E2 nlvt_e_1_bad_2;
    select -interact nlvt_e_1_bad_1 nlvt_e_1_bad_2 nlvt_e_1_bad;
    copy nlvt_e_1_bad;
}

// enclose check for Active inside Nlvt <(0.045,0.065)
rule NLVT.E.2 {
    caption NLVT.E.2: Minimum Nlvt to Active enclosure >=(0.045,0.065)
    grow Active -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Active -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Nlvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nlvt_e_2_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 nlvt_e_2_bad_E1 nlvt_e_2_bad_1;
    enc grow_v_011_shrink_h_009 Nlvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 nlvt_e_2_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 nlvt_e_2_bad_E2 nlvt_e_2_bad_2;
    select -interact nlvt_e_2_bad_1 nlvt_e_2_bad_2 nlvt_e_2_bad;
    copy nlvt_e_2_bad;
}  

// Nlvt is not allowed on PIMP
rule NLVT.X.1 {
    caption NLVT.X.1: Nlvt is NOT allowed on Ptype Implant;
    cmacro chk_overlap Nlvt PImplant ;
}

//--------------------------------------------------------------------------------------
// PIMPLANT RULES
//--------------------------------------------------------------------------------------

// width check for Psvt <0.052 
rule PSVT.W.1 {
    caption PSVT.W.1: Minimum Psvt width >= 0.052;
    cmacro chk_minwidth_wo_sp Psvt 0.052;
}

// spacing check for Psvt <0.024 
rule PSVT.SP.1 {
    caption PSVT.SP.1: Minimum Psvt spacing >= 0.024;
    cmacro chk_minspace Psvt Psvt 0.024;
}

// spacing check for Psvt to NActive <0.045 
rule PSVT.SE.1 {
    caption PSVT.SE.1: Minimum Psvt to NActive space >= 0.045 um;
    cmacro chk_minspace Psvt nactive 0.045;
}

// area check for Psvt <0.017 
rule PSVT.A.1 {
    caption PSVT.A.1: Minimum Psvt area >= 0.017 um;
    cmacro chk_minarea Psvt 0.017;
}

// enclose check for Poly inside Psvt <(0.045,0.065)
rule PSVT.E.1 {
    caption PSVT.E.1: Minimum Psvt to Poly enclosure >=(0.045,0.065)
    grow Poly -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Poly -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Psvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 psvt_e_1_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 psvt_e_1_bad_E1 psvt_e_1_bad_1;
    enc grow_v_011_shrink_h_009 Psvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 psvt_e_1_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 psvt_e_1_bad_E2 psvt_e_1_bad_2;
    select -interact psvt_e_1_bad_1 psvt_e_1_bad_2 psvt_e_1_bad;
    copy psvt_e_1_bad;
}

// enclose check for Active inside Psvt <(0.045,0.065)
rule PSVT.E.2 {
    caption PSVT.E.2: Minimum Psvt to Active enclosure >=(0.045,0.065)
    grow Active -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Active -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Psvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 psvt_e_2_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 psvt_e_2_bad_E1 psvt_e_2_bad_1;
    enc grow_v_011_shrink_h_009 Psvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 psvt_e_2_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 psvt_e_2_bad_E2 psvt_e_2_bad_2;
    select -interact psvt_e_2_bad_1 psvt_e_2_bad_2 psvt_e_2_bad;
    copy psvt_e_2_bad;
}  

// PIMP is not allowed in NIMP
rule PSVT.X.1 {
    caption PSVT.X.1: Psvt is NOT allowed on Ntype Implant;
    cmacro chk_overlap Psvt NImplant  ;
}

//--------------------------------------------------------------------------------------
// PHVT RULES
//--------------------------------------------------------------------------------------

// width check for Phvt <0.052 
rule PHVT.W.1 {
    caption PHVT.W.1: Minimum Phvt width >= 0.052;
    cmacro chk_minwidth_wo_sp Phvt 0.052;
}

// spacing check for Phvt <0.024 
rule PHVT.SP.1 {
    caption PHVT.SP.1: Minimum Phvt spacing >= 0.024;
    cmacro chk_minspace Phvt Phvt 0.024;    
}

// spacing check for Phvt to NActive <0.045 
rule PHVT.SE.1 {
    caption PHVT.SE.1: Minimum Phvt to NActive space >= 0.045 um;
    cmacro chk_minspace Phvt nactive 0.045;
}

// area check for Phvt <0.03 
rule PHVT.A.1 {
    caption PHVT.A.1: Minimum Phvt area >= 0.03 um;
    cmacro chk_minarea Phvt 0.03;
}

// enclose check for Poly inside Phvt <(0.045,0.065)
rule PHVT.E.1 {
    caption PHVT.E.1: Minimum Phvt to Poly enclosure >=(0.045,0.065)
    grow Poly -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Poly -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Phvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 phvt_e_1_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 phvt_e_1_bad_E1 phvt_e_1_bad_1;
    enc grow_v_011_shrink_h_009 Phvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 phvt_e_1_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 phvt_e_1_bad_E2 phvt_e_1_bad_2;
    select -interact phvt_e_1_bad_1 phvt_e_1_bad_2 phvt_e_1_bad;
    copy phvt_e_1_bad;
}

// enclose check for Active inside Phvt <(0.045,0.065)
rule PHVT.E.2 {
    caption PHVT.E.2: Minimum Phvt to Active enclosure >=(0.045,0.065)
    grow Active -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Active -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Phvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 phvt_e_2_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 phvt_e_2_bad_E1 phvt_e_2_bad_1;
    enc grow_v_011_shrink_h_009 Phvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 phvt_e_2_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 phvt_e_2_bad_E2 phvt_e_2_bad_2;
    select -interact phvt_e_2_bad_1 phvt_e_2_bad_2 phvt_e_2_bad;
    copy phvt_e_2_bad;
}  

//Phvt is not allowed on NIMP
rule PHVT.X.1 {
    caption PHVT.X.1: Phvt is NOT allowed on Ntype Implant;
    cmacro chk_overlap Phvt NImplant ;
}

//--------------------------------------------------------------------------------------
// PLVT RULES
//--------------------------------------------------------------------------------------

// width check for Plvt <0.052 
rule PLVT.W.1 {
    caption PLVT.W.1: Minimum Plvt width >= 0.052;
    cmacro chk_minwidth_wo_sp Plvt 0.052;
}

// spacing check for Plvt <0.024 
rule PLVT.SP.1 {
    caption PLVT.SP.1: Minimum Plvt spacing >= 0.024;
    cmacro chk_minspace Plvt Plvt 0.024;
}

// spacing check for Plvt to NActive <0.045 
rule PLVT.SE.1 {
    caption PLVT.SE.1: Minimum Plvt to NActive space >= 0.045 um;
    cmacro chk_minspace Plvt nactive 0.045;
}

// area check for Plvt <0.03 
rule PLVT.A.1 {
    caption PLVT.A.1: Minimum Plvt area >= 0.03 um;
    cmacro chk_minarea Plvt 0.03;
}

// enclose check for Poly inside Plvt <(0.045,0.065)
rule PLVT.E.1 {
    caption PLVT.E.1: Minimum Plvt to Poly enclosure >=(0.045,0.065)
    grow Poly -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Poly -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Plvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 plvt_e_1_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 plvt_e_1_bad_E1 plvt_e_1_bad_1;
    enc grow_v_011_shrink_h_009 Plvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 plvt_e_1_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 plvt_e_1_bad_E2 plvt_e_1_bad_2;
    select -interact plvt_e_1_bad_1 plvt_e_1_bad_2 plvt_e_1_bad;
    copy plvt_e_1_bad;
}

// enclose check for Active inside Plvt <(0.045,0.065)
rule PLVT.E.2 {
    caption PLVT.E.2: Minimum Plvt to Active enclosure >=(0.045,0.065)
    grow Active -left 0.011 -right 0.011 grow_h_011;
    shrink grow_h_011 -top 0.009 -bottom 0.009 shrink_v_009_grow_h_011;
    shrink Active -left 0.009 -right 0.009 shrink_h_009;
    grow shrink_h_009 -top 0.011 -bottom 0.011 grow_v_011_shrink_h_009;
    enc shrink_v_009_grow_h_011 Plvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 plvt_e_2_bad_E1;
    select -with_edge shrink_v_009_grow_h_011 plvt_e_2_bad_E1 plvt_e_2_bad_1;
    enc grow_v_011_shrink_h_009 Plvt -lt 0.054 -single_point -abut lt 90 -metric square -output positive1 plvt_e_2_bad_E2;
    select -with_edge grow_v_011_shrink_h_009 plvt_e_2_bad_E2 plvt_e_2_bad_2;
    select -interact plvt_e_2_bad_1 plvt_e_2_bad_2 plvt_e_2_bad;
    copy plvt_e_2_bad;
}  

//Plvt is not allowed on NIMP
rule PLVT.X.1 {
    caption PLVT.X.1: Plvt is NOT allowed on Ntype Implant;
    cmacro chk_overlap Plvt NImplant ;
}

//--------------------------------------------------------------------------------------
// POLY RULES
//--------------------------------------------------------------------------------------

angle Poly -eq 90 Poly_V;
angle Poly -eq 0 Poly_H;

angle gate -eq 90 gate_V;

// Allowed Poly Pitch
rule POLY.P.1 {
    caption POLY.P.1: Poly vertical pitches are restricted to (86, 90, 94, 102, 104)nm;
    inte gate_V gate_V -le 0.24 -output region_centerline 0.002 -outputlayer Poly_V_cents1;
    angle Poly_V_cents1 -eq 90 Poly_V_cents;
    exte Poly_V_cents Poly_V_cents -eq 0.084 -output negative1 p1tmp0;
    exte p1tmp0 p1tmp0 -eq 0.088 -output negative1 p1tmp1;
    exte p1tmp1 p1tmp1 -eq 0.092 -output negative1 p1tmp2;
    exte p1tmp2 p1tmp2 -eq 0.100 -output negative1 p1tmp3;
    exte p1tmp3 p1tmp3 -eq 0.102 -output negative1 p1tmp4;
    select -with_edge -gt 1 Poly_V_cents1 p1tmp4;
}


// width check for Poly in Y direction <0.08 
rule POLY.W.1 {
    caption POLY.W.1: Minimum Poly width in the Y direction >= 0.08 um;
    cmacro chk_minwidth Poly_H 0.08;
}

// width check for Poly in X direction <0.018 
rule POLY.W.2 {
    caption POLY.W.2: Minimum Poly width in the X direction >= 0.018 um;
    cmacro chk_minwidth Poly_V 0.018;
}

edge_boolean -coincident_only -inside gate Poly Poly_W;
edge_boolean -coincident_only -inside gate Poly -not Poly_L;

// width check for Poly >0.24
rule POLY.W.3 {
    caption POLY.W.3: Maximum Poly width <= 0.24 um;
    cmacro chk_maxwidth Poly 0.24;
}

// length check for Poly >10.0
rule POLY.W.4 {
    caption POLY.W.4: Maximum Poly length <= 10.0 um;
    cmacro chk_maxlength Poly 10.0;
} 

// spacing check for Poly <0.068 
rule POLY.SP.1 {
    caption POLY.SP.1: Minimum Poly space >= 0.068 um;
    cmacro chk_minspace Poly Poly 0.068;
}

// spacing check for Poly (with width >=0.08) <0.12 
rule POLY.SP.2 {
    caption POLY.SP.2: Minimum Poly space with width >=0.08 is >= 0.12 um;
    with_width Poly -gt 0.079 Poly_ge008;
    cmacro chk_minspace Poly_ge008 Poly 0.12;
}

// spacing check for Poly (with width >=0.16) <0.20 
rule POLY.SP.3 {
    caption POLY.SP.3: Minimum Poly space with width >=0.16 is >= 0.20 um;
    with_width Poly -gt 0.159 Poly_ge016;
    cmacro chk_minspace Poly_ge016 Poly 0.20;
}

or N_or_P_Implant Active N_or_P_or_Act_Implant;
rule POLY.C.1 {
    caption POLY.C.1: POLY on Active must be covered by N+ Implant or P+ Implant;
    not gate N_or_P_or_Act_Implant;
}

// enclose check for gate inside Poly <0.048
rule POLY.E.1 {
    caption POLY.E.1: Minimum gate extension beyond Active Area >= 0.048 um;
    enc Active Poly -ltge 0  0.048 -single_point -para only;
}

// --------------------------------------------------------------------------------------
// CutPoly RULES
// --------------------------------------------------------------------------------------

angle CutPoly -eq 90 CutPoly_V;
angle CutPoly -eq 0 CutPoly_H;

// width check for CutPoly in X direction <0.06 
rule CUTPOLY.W.1 {
    caption CUTPOLY.W.1: Minimum CutPoly width in the X direction >= 0.06 um;
    cmacro chk_minwidth CutPoly_V 0.06;
}

// Allowed width values for CutPoly in Y direction (0.06 0.07 0.1 0.12)
rule CUTPOLY.W.2 {
    caption CUTPOLY.W.2: Allowed CutPoly width values in the Y direction (0.06 0.07 0.1 0.12) um;
    inte CutPoly_H CutPoly_H -lt 0.06 -abut lt 90 -metric opposite;
    inte CutPoly_H CutPoly_H -ltgt 0.06 0.07 -abut lt 90 -metric opposite;
    inte CutPoly_H CutPoly_H -ltgt 0.07 0.1 -abut lt 90 -metric opposite;
    inte CutPoly_H CutPoly_H -ltgt 0.1 0.12 -abut lt 90 -metric opposite;
    shrink CutPoly -top 0.06 -bottom 0.06;
}

// spacing check for CutPoly <0.09 
rule CUTPOLY.SP.1 {
    caption CUTPOLY.SP.1: Minimum CutPoly space >= 0.09 um;
    cmacro chk_minspace CutPoly CutPoly 0.09;
}

// spacing check for CutPoly to Active <0.02 
rule CUTPOLY.SE.1 {
    caption CUTPOLY.SE.1: Minimum CutPoly to Active space >= 0.02 um;
    cmacro chk_minspace CutPoly Active 0.02;    
}

// spacing check for CutPoly to LiPo <0.019 
rule CUTPOLY.SE.2 {
    caption CUTPOLY.SE.2: Minimum CutPoly to LiPo space >= 0.019 um;
    cmacro chk_minspace CutPoly LiPo 0.019;    
}

// CutPoly extension beyond Poly <0.034
rule CUTPOLY.E.1 {
    caption CUTPOLY.E.1: Minimum CutPoly extension beyond Poly >= 0.034 um;
    enc Poly CutPoly -lt 0.034 -output region -singular -abut lt 90 -metric opposite;
}

// --------------------------------------------------------------------------------------
// LIPO RULES
// --------------------------------------------------------------------------------------

// Allowed LIPO widths
rule LIPO.W.1 {
    caption LIPO.W.1: Allowed width values for LIPO (0.03, 0.04, 0.05);
    with_width LiPo -lt 0.03;
    with_width LiPo -ltgt 0.03 0.04;
    with_width LiPo -ltgt 0.04 0.05;
    with_width LiPo -gt 0.05;
}

// length check for LIPO >5.0
rule LIPO.W.2 {
    caption LIPO.W.2: Maximum LIPO length <= 5.0 um;
    cmacro chk_maxlength LiPo 5.0;
}

// spacing check for LIPO <0.034 
rule LIPO.SP.1 {
    caption LIPO.SP.1: Minimum LIPO space >= 0.034 um;
    cmacro chk_minspace LiPo LiPo 0.034;
}

// spacing check for LIPO to Poly <0.03 
rule LIPO.SE.1 {
    caption LIPO.SE.1: Minimum LIPO to Poly space >= 0.03 um;
    cmacro chk_minspace LiPo Poly 0.03;    
}

// spacing check for LIPO to LIACT <0.013 
rule LIPO.SE.2 {
    caption LIPO.SE.2: Minimum LIPO to LIACT space >= 0.013 um;
    cmacro chk_minspace LiPo LiAct 0.013;
}

// spacing check for LIPO to Active <0.045 
rule LIPO.SE.3 {
    caption LIPO.SE.3: Minimum LIPO to Active space >= 0.045 um;
    cmacro chk_minspace LiPo Active 0.045;
}

// overlap check for LIPO to Poly <0.018 
rule LIPO.E.1 {
    caption LIPO.E.1: Minimum LIPO into Poly overlap >= 0.016 um;
    cmacro chk_minoverlap LiPo Poly 0.016;
}

// enclose check for Poly extension LIPO <0.01
rule LIPO.E.2 {
    caption LIPO.E.2: Minimum Poly to LIPO extension >= 0.01 um;
    enc LiPO Poly -lt 0.01 -output region -singular -abut lt 90 -metric opposite;
}

// --------------------------------------------------------------------------------------
// LIACT RULES
// --------------------------------------------------------------------------------------

//Allowed width values
rule LIACT.W.1 {
    caption LIACT.W.1: Allowed width values for LIACT (0.03, 0.04, 0.05);
    with_width LiAct -lt 0.03;
    with_width LiAct -ltgt 0.03 0.04;
    with_width LiAct -ltgt 0.04 0.05;
    with_width LiAct -gt 0.05;
}

// length check for LIACT(with width == 0.03) <0.062
rule LIACT.W.2 {
    caption LIACT.W.2: Minimum length of LIACT(for width value 0.03) >= 0.062 um;
    rect_chk LiAct -eq 0.03 -by -lt 0.062;       
}

// length check for LIACT(with width == 0.04) <0.068
rule LIACT.W.3 {
    caption LIACT.W.3: Minimum length of LIACT(for width value 0.04) >= 0.068 um;
    rect_chk LiAct -eq 0.04 -by -lt 0.068;
}

// length check for LIACT(with width == 0.05) <0.082
rule LIACT.W.4 {
    caption LIACT.W.4: Minimum length of LIACT(for width value 0.05) >= 0.082 um;
    rect_chk LiAct -eq 0.05 -by -lt 0.082;
}

// length check for LIACT >5.0
rule LIACT.W.5 {
    caption LIPO.W.2: Maximum LIACT length <= 5.0 um;
    cmacro chk_maxlength LiAct 5.0;
}

// spacing check for LIACT <0.046 
rule LIACT.SP.1 {
    caption LIACT.SP.1: Minimum LIACT space >= 0.046 um;
    cmacro chk_minspace LiAct LiAct 0.046;
}

// spacing check for LIACT(with width ==0.03) to Poly(with width ==0.018) <0.019 
rule LIACT.SE.1 {
    caption LIACT.SE.1: Minimum LiAct(with width ==0.03)to Poly(with width ==0.018) space >= 0.019 um;
    with_width Poly -eq 0.018 Poly_eq018;
    with_width LiAct -eq 0.03 LiAct_eq003;
    cmacro chk_minspace Poly_eq018 LiAct_eq003 0.019;
}

// spacing check for LIACT(with width ==0.03) to Poly(with width >=0.02) <0.02 
rule LIACT.SE.2 {
    caption LIACT.SE.2: Minimum LiAct(with width ==0.03)to Poly(with width >=0.02) space >= 0.02 um;
    with_width Poly -ge 0.02 Poly_ge02;
    with_width LiAct -eq 0.03 LiAct_eq003
    cmacro chk_minspace Poly_ge02 LiAct_eq003 0.02;    
}

// spacing check for LIACT(with width ==0.03) to Poly(with width >=0.028) <0.022 
rule LIACT.SE.3 {
    caption LIACT.SE.3: Minimum LiAct(with width ==0.03)to Poly(with width >=0.028) space >= 0.022 um;
    with_width Poly -ge 0.028 Poly_ge028;
    with_width LiAct -eq 0.03 LiAct_eq003;
    cmacro chk_minspace Poly_ge028 LiAct_eq003 0.022;   
}

// spacing check for LIACT(with width ==0.04) to Poly <0.04 
rule LIACT.SE.4 {
    caption LIACT.SE.4: Minimum LiAct(with width ==0.04)to Poly space >= 0.04 um;
    with_width LiAct -eq 0.04 LiAct_eq004;
    cmacro chk_minspace Poly LiAct_eq004  0.04;    
}

// spacing check for LIACT(with width ==0.05) to Poly <0.045 
rule LIACT.SE.5 {
    caption LIACT.SE.5: Minimum LiAct(with width ==0.05)to Poly space >= 0.045 um;
    with_width LiAct -eq 0.05 LiAct_eq005;
    cmacro chk_minspace Poly LiAct_eq005 0.045;    
}

// spacing check for LIACT to Poly(with width >=0.08) <0.07 
rule LIACT.SE.6 {
    caption LIACT.SE.6: Minimum LiAct to Poly(with width >=0.08) space >= 0.07 um;
    with_width Poly -ge 0.08 Poly_ge008;
    cmacro chk_minspace LiAct Poly_ge008 0.07;    
}

// spacing check for LIACT to Active <0.04 
rule LIACT.SE.7 {
    caption LIACT.SE.7: Minimum LiAct to Active space >= 0.04 um;
    cmacro chk_minspace LiAct Active 0.04;
}

//enclose check for LIACT inside Active <0.014 
rule LIACT.E.1 {
    caption LIACT.E.1: Minimum Active enclosure of LIACT on atleast two opposite sides >=0.014;
    and LiAct Active liact_and_active;
    grow liact_and_active -left 0.014 -right 0.014 grow_h_014;
    not grow_h_014 Active liact_e_2_bad1;
    select -interact grow_h_014 liact_e_2_bad1 liact_e_2_bad_1;
    grow liact_and_active -top 0.014 -bottom 0.014 grow_v_014;
    not grow_v_014 Active liact_e_2_bad2;
    select -interact grow_v_014 liact_e_2_bad2 liact_e_2_bad_2;
    select -interact liact_e_2_bad_1 liact_e_2_bad_2 liact_e_2_bad;
    copy liact_e_2_bad;
}

//---------------------------------------------------------------------------------------
// V0 RULES
// --------------------------------------------------------------------------------------

//Minimum and Maximum width/length check for Vo 
rule V0.W.1 {
    caption V0.W.1: Maximum and minimum V0 width/length is 0.032;
    cmacro chk_square V0 0.032 ;
}  

//Minimum Spacing for V0
rule V0.SP.1 {
    caption V0.SP.1: Minimum V0 to V0 space >=0.032;
    cmacro chk_minspace V0 V0 0.032;
}

//Minimum V0 to LiAct Space
rule V0.SE.1 {
    caption V0.SE.1: Minimum V0 to Liact space >= 0.012;	
    cmacro chk_minspace V0 LiAct 0.012;
}

//Minimum V0 to LIPO Space
rule V0.SE.2 {
    caption V0.SE.2: Minimum V0 to LiPo space >= 0.024;	
    cmacro chk_minspace V0 LiPo 0.024;
}

//Minimum V0 to Poly Space
rule V0.SE.3 {
    caption V0.SE.3: Minimum V0 to Poly space >= 0.018;	
    cmacro chk_minspace V0 Poly 0.018;
}

//Minimum Rectangular Enclosure of Liact to V0 with LiAct width 0.03
 
select -interact V0 LiAct v0_liact_chk;
rule V0.E.1a {
    caption V0.E.1a: Minimum LiAct to V0 enclosure with LiAct width 0.03 >=(-0.001,0.018)
    with_width LiAct -eq 0.03 LiAct003;
    size v0_liact_chk -by -0.001 vo_dn002;
    cmacro chk_minrectenc vo_dn002 LiAct003 0 0.019 0 0.019;
}

//Minimum Rectangular enclosure of  LiAct to V0 enclosure with LiAct width 0.04
rule V0.E.1b {
    caption V0.E.1b: Minimum LiAct to V0 enclosure with LiAct width 0.04 >=(0.003,0.018)
    with_width LiAct -eq 0.04 LiAct004;
    cmacro chk_minrectenc v0_liact_chk LiAct004 0.003 0.018 0.003 0.018;
}

//Minimum Rectangular enclosure of  LiAct to V0 enclosure with LiAct width 0.05
rule V0.E.1c {
    caption V0.E.1c: Minimum LiAct to V0 enclosure with LiAct width 0.05 >=(0.008,0.018)
    with_width LiAct -eq 0.05 LiAct005;
    cmacro chk_minrectenc v0_liact_chk LiAct005 0.008 0.018 0.008 0.018;
}

//Minimum Rectangular enclosure of  LiPo to V0 enclosure with LiPo width 0.03
select -interact V0 LiPo v0_lipo_chk;
rule V0.E.2a {
    caption V0.E.2a: Minimum LiPo to V0 enclosure with LiPo width 0.03 >=(-0.001,0.014)
    with_width LiPo -eq 0.03 LiPo003;
    size v0_lipo_chk -by -0.001 vo_lipo_dn002;
    cmacro chk_minrectenc vo_lipo_dn002 LiPo003 0 0.014 0 0.014;
}

//Minimum Rectangular enclosure of  LiPo to V0 enclosure with LiPo width 0.04
rule V0.E.2b {
    caption V0.E.2b: Minimum LiPo to V0 enclosure with LiPo width 0.04 >=(0.004,0.012)
    with_width LiPo -eq 0.04 LiPo004;
    cmacro chk_minrectenc v0_lipo_chk LiPo004 0.004 0.012 0.004 0.012;
}

// Minimum rectangular enclosure of  LiPo to V0 enclosure with LiPo width 0.05
rule V0.E.2c {
    caption V0.E.2c: Minimum LiPo to V0 enclosure with LiPo width 0.05 >=(0.009,0.009)
    with_width LiPo -eq 0.05 LiPo005;
    cmacro chk_minrectenc v0_lipo_chk LiPo005 0.009 0.009  0.009 0.009;
}

//Metal to V0 enclousure
OR M1_MASK1_UNLOCK M1_MASK1_LOCK -outputlayer m1_mask1;
OR M1_MASK2_UNLOCK M1_MASK2_LOCK -outputlayer m1_mask2;
OR M1 m1_mask1 m1_mask2 -outputlayer m1_all;
rule V0.E.3a_V0.E.3b {
     caption V0.E.3a_V0.E.3b: Minimum M1 to V0 enclosure >= (0,0.04) or (0.009,0.024)
     rect_enc V0 m1_all -outside_also -single_point -good 0 0.04 0 0.04 -good 0.009 0.024 0.009 0.024;
}

//---------------------------------------------------------------------------------------
// METAL1 RULES
// --------------------------------------------------------------------------------------

PVS_READ_TCL_BLOCK

set mfirst1x 1
set mlast1x 3 

set vfirst1x 1
set vlast1x 3

set mfirst14 4
set mlast14 4 

set mfirst1bx 1
set mlast1bx 3

set mfirst1tx 2
set mlast1tx 4

set vfirst2x 4
set vlast2x 5

set mfirst2x 5
set mlast2x 6

set mfirst2bx 5
set mlast2bx 5

set vfirst4x 6
set vlast4x 6

set mfirst4x 7
set mlast4x 7

proc chk_minwidth { GRname layer width } {
   puts "rule ${GRname} {"
   puts "   caption Minimum ${layer} width ${width};"
   puts "   inte ${layer} ${layer} -lt ${width} -abut lt 90 -single_point -output region;"
   puts "}"  
}

proc chk_maxwidth { GRname layer width } {
   puts "rule ${GRname} {"
   puts "   caption Maximum ${layer} width ${width};"
   puts "   with_width ${layer} -gt ${width};"
   puts "}"  
}

proc chk_minspace { GRname layer space } {
   puts "rule ${GRname} {"
   puts "   caption Minimum ${layer} to ${layer} space ${space};"
   puts "   exte ${layer} ${layer} -lt ${space} -abut lt 90 -single_point -output region;"
   puts "}"  
}

proc chk_widemetalminspace { GRname layer space width } {
   puts "rule ${GRname} {"
   puts "   caption Minimum ${layer} to ${layer} spacing width >= ${width} is ${space};"
   puts "   with_width ${layer} -ge ${width} ${layer}_wide;"
   puts "   exte ${layer} ${layer}_wide -lt ${space} -abut lt 90 -single_point -output region;"
   puts "}"  
}

proc chk_minenclose { GRname layer1 layer2 value } {
   puts "rule ${GRname} {"
   puts "   caption Minimum ${layer1} enclosure of ${layer2} ${value};"
   puts "   enc ${layer2} ${layer1} -lt ${value} -abut lt 90 -single_point -output region;"
   puts "}"  
}

proc chk_minarea { GRname layer area } {
   puts "rule ${GRname} {"
   puts "   caption Minimum ${layer} area ${area};"
   puts "   area ${layer} -lt ${area};"
   puts "}"  
}     

proc chk_square { GRname layer value } {
   puts "rule ${GRname} {"
   puts "   caption Minimum and Maximum suare ${layer} width and length ${value};"
   puts "   rect_chk ${layer} -eq ${value} -not -by -eq ${value} -orthogonal_only;"
   puts "}"  
}

proc chk_rect { GRname layer width length } {
   puts "rule ${GRname} {"
   puts "   caption Minimum and Maximum rect ${layer} width and length (${width},${length});"
   puts "   rect_chk -not ${layer} -eq ${width} -by -eq ${length};"
   puts "}"  
}

proc chk_MetalencloseVia { GRname layer1 layer2 layer3 width val } {
   puts "rule ${GRname} {"
   puts "   caption Minimum number of ${layer3} in ${layer1} & ${layer2} region with width >= ${width} is ${val};"
   puts "   and ${layer1} ${layer2} ${layer1}${layer2}_ovlp;"
   puts "   with_width ${layer1}${layer2}_ovlp -ge ${width} ${layer1}${layer2}_wide;"
   puts "   select -interact ${layer3} ${layer1}${layer2}_wide via_checked;"
   puts "   select -outside -not ${layer1}${layer2}_wide via_checked ${layer1}${layer2}_check;"
   puts "   select -enclose -not ${layer1}${layer2}_check ${layer3} -ge ${val};"
   puts "}"
}

proc chk_minrectenc_w { GRname layer1 layer2 val1 val2 val3 val4 wide width} {
   puts "rule ${GRname} {"
if { $wide == 1 } {
   puts "   caption Minimum ${layer1} width >= ${width} enclosure ${layer2} on 4 sides (${val1},${val2},${val3},${val4});"
   } else {
   puts "   caption Minimum ${layer1} enclosure ${layer2} on 4 sides (${val1},${val2},${val3},${val4});"
   }  
if { $wide == 1 } {
   puts "   with_width ${layer1} -ge ${width} ${layer1}_wide;"
   puts "   rect_enc ${layer2} ${layer1}_wide -good ${val1} ${val2} ${val3} ${val4};"
#   puts "   not ${layer2} ${layer1}_wide;"
   } else {
   puts "   rect_enc ${layer2} ${layer1} -single_point -good ${val1} ${val2} ${val3} ${val4};"
#   puts "   not ${layer2} ${layer1};"
   }
   puts "}"
}

proc chk_minrectenc_lt_w { GRname layer1 layer2 val1 val2 val3 val4 width} {
   puts "rule ${GRname} {"
   puts "   caption Minimum ${layer1} width < ${width} enclosure ${layer2} rect on 4 sides (${val1},${val2},${val3},${val4});"
   puts "   with_width ${layer1} -lt ${width} ${layer1}_wide;"
   puts "   rect_enc ${layer2} ${layer1}_wide -good ${val1} ${val2} ${val3} ${val4};"
#   puts "   not ${layer2} ${layer1}_wide;"
   puts "}"
}

proc chk_minrectenc_gelt_w { GRname layer1 layer2 val1 val2 val3 val4 width1 width2} {
   puts "rule ${GRname} {"
   puts "   caption Minimum ${layer1} width >= ${width1} and < ${width2} enclosure ${layer2} rect on 4 sides (${val1},${val2},${val3},${val4});"
   puts "   with_width ${layer1} -ltge ${width1} ${width2} ${layer1}_wide;"
   puts "   rect_enc ${layer2} ${layer1}_wide -good ${val1} ${val2} ${val3} ${val4};"
#   puts "   not ${layer2} ${layer1}_wide;"
   puts "}"
}

for {set x ${mfirst1x}} {$x<=${mlast1x}} {incr x} { 

puts "
OR M${x}_MASK1_UNLOCK M${x}_MASK1_LOCK -outputlayer M${x}_MASK1;
OR M${x}_MASK2_UNLOCK M${x}_MASK2_LOCK -outputlayer M${x}_MASK2;
OR M${x} M${x}_MASK1 M${x}_MASK2 -outputlayer M${x}_all;
"

chk_minwidth METAL1${x}.W.1 M${x}_all 0.032

chk_maxwidth METAL1${x}.W.2 M${x}_all 2.0

chk_minspace METAL1${x}.SP.1.1 M${x}_all 0.032

puts "
with_width M${x}_MASK1 -ge 0.100 M${x}_mask1_ge0p100;
with_width M${x}_mask1_ge0p100 -ge 0.750 M${x}_mask1_ge0p750;
with_width M${x}_mask1_ge0p750 -ge 1.500 M${x}_mask1_ge1p500;
exte M${x}_MASK1 M${x}_MASK1 -lt 0.048 -abut lt 90 -single_point m${x}_mask1_sp21_m${x};
exte M${x}_MASK1 M${x}_mask1_ge0p100 -lt 0.072  -abut lt 90 -single_point -project ge 0.320 m${x}_mask1_sp22_m${x};
exte M${x}_MASK1 M${x}_mask1_ge0p750 -lt 0.112  -abut lt 90 -single_point -project ge 0.750 m${x}_mask1_sp23_m${x};
exte M${x}_MASK1 M${x}_mask1_ge1p500 -lt 0.220  -abut lt 90 -single_point -project ge 1.500 m${x}_mask1_sp24_m${x};
convex_edge M${x}_MASK1 -eq 2 -with_length le 0.050 M${x}_mask1_end;
exte M${x}_mask1_end M${x}_mask1_end -lt 0.064 -abut lt 90 -single_point m${x}_mask1_sp41_m${x};

rule METAL1${x}.SP.2.1_Mask1 {
  copy m${x}_mask1_sp21_m${x};
}
rule METAL1${x}.SP.2.2_Mask1 {
  copy m${x}_mask1_sp22_m${x};
}
rule METAL1${x}.SP.2.3_Mask1 {
  copy m${x}_mask1_sp23_m${x};
}
rule METAL1${x}.SP.2.4_Mask1 {
  copy m${x}_mask1_sp24_m${x};
}
rule METAL1${x}.SP.4.1_Mask1 {
  copy m${x}_mask1_sp41_m${x};
}
"
puts "
with_width M${x}_MASK2 -ge 0.100 M${x}_mask2_ge0p100;
with_width M${x}_mask2_ge0p100 -ge 0.750 M${x}_mask2_ge0p750;
with_width M${x}_mask2_ge0p750 -ge 1.500 M${x}_mask2_ge1p500;
exte M${x}_MASK2 M${x}_MASK2 -lt 0.048 -abut lt 90 -single_point m${x}_mask2_sp21_m${x};
exte M${x}_MASK2 M${x}_mask2_ge0p100 -lt 0.072  -abut lt 90 -single_point -project ge 0.320 m${x}_mask2_sp22_m${x};
exte M${x}_MASK2 M${x}_mask2_ge0p750 -lt 0.112  -abut lt 90 -single_point -project ge 0.750 m${x}_mask2_sp23_m${x};
exte M${x}_MASK2 M${x}_mask2_ge1p500 -lt 0.220  -abut lt 90 -single_point -project ge 1.500 m${x}_mask2_sp24_m${x};
convex_edge M${x}_MASK2 -eq 2 -with_length le 0.050 M${x}_mask2_end;
exte M${x}_mask2_end M${x}_mask2_end -lt 0.064 -abut lt 90 -single_point m${x}_mask2_sp41_m${x};

rule METAL1${x}.SP.2.1_Mask2 {
  copy m${x}_mask2_sp21_m${x};
}
rule METAL1${x}.SP.2.2_Mask2 {
  copy m${x}_mask2_sp22_m${x};
}
rule METAL1${x}.SP.2.3_Mask2 {
  copy m${x}_mask2_sp23_m${x};
}
rule METAL1${x}.SP.2.4_Mask2 {
  copy m${x}_mask2_sp24_m${x};
}
rule METAL1${x}.SP.4.1_Mask2 {
  copy m${x}_mask2_sp41_m${x};
}
"

puts "
with_width M${x} -ge 0.100 M${x}_ge0p100;
with_width M${x}_ge0p100 -ge 0.750 M${x}_ge0p750;
with_width M${x}_ge0p750 -ge 1.500 M${x}_ge1p500;
exte M${x} M${x} -lt 0.048 -abut lt 90 -single_point m${x}x_link_sp21_m${x};
exte M${x} M${x}_ge0p100 -lt 0.072  -abut lt 90 -single_point -project ge 0.320 m${x}x_link_sp22_m${x};
exte M${x} M${x}_ge0p750 -lt 0.112  -abut lt 90 -single_point -project ge 0.750 m${x}x_link_sp23_m${x};
exte M${x} M${x}_ge1p500 -lt 0.220  -abut lt 90 -single_point -project ge 1.500 m${x}x_link_sp24_m${x};
convex_edge M${x} -eq 2 -with_length le 0.050 M${x}_end;
exte M${x}_end M${x}_end -lt 0.064 -abut lt 90 -single_point m${x}x_link_sp41_m${x};
 
docolor M${x} m${x}x_link_sp21_m${x} -error_ring M${x}_conflict_21 M${x}_conflict2_21;
rule METAL1${x}.SP.2.1_Color {
  copy M${x}_conflict_21;
  }
docolor M${x} m${x}x_link_sp22_m${x} -error_ring M${x}_conflict_22 M${x}_conflict2_22;
rule METAL1${x}.SP.2.2_Color {
  copy M${x}_conflict_22;
  }
docolor M${x} m${x}x_link_sp23_m${x} -error_ring M${x}_conflict_23 M${x}_conflict2_23;
rule METAL1${x}.SP.2.3_Color {
  copy M${x}_conflict_23;
  }
docolor M${x} m${x}x_link_sp24_m${x} -error_ring M${x}_conflict_24 M${x}_conflict2_24;
rule METAL1${x}.SP.2.4_Color {
  copy M${x}_conflict_24;
  }
docolor M${x} m${x}x_link_sp41_m${x} -error_ring M${x}_conflict_41 M${x}_conflict2_41;
rule METAL1${x}.SP.4.1_Color {
  copy M${x}_conflict_41;
  }
"

chk_minarea METAL1${x}.A.1 M${x}_all 0.006176

}

puts "
OR M4 M4 -outputlayer M4_all;
"

for {set x ${vfirst1x}} {$x<=${vlast1x}} {incr x} {
set y [expr ${x}+1]

puts "
OR V${x}_MASK1_UNLOCK V${x}_MASK1_LOCK  -outputlayer V${x}_MASK1;
OR V${x}_MASK2_UNLOCK V${x}_MASK2_LOCK  -outputlayer V${x}_MASK2;
OR V${x}_MASK3_UNLOCK V${x}_MASK3_LOCK  -outputlayer V${x}_MASK3;
OR V${x}_MASK4_UNLOCK V${x}_MASK4_LOCK  -outputlayer V${x}_MASK4;
OR V${x} V${x}_MASK1 V${x}_MASK2 V${x}_MASK3 V${x}_MASK4 -outputlayer V${x}_all;

rect_chk V${x}_all -eq 0.032 -by -eq 0.032 -orthogonal_only V${x}_sq;
rect_chk V${x}_all -eq 0.064 -by -eq 0.032 V${x}_rect;

rule VIA1${x}.W.1_W.2 {
   cat V${x}_sq V${x}_rect v1${x}_1;
   select -not -interact V${x}_all v1${x}_1;
}
"

chk_minspace VIA1${x}.SP.1 V${x}_all 0.042
chk_minspace VIA1${x}.SP.2_Mask1 V${x}_MASK1 0.080
chk_minspace VIA1${x}.SP.2_Mask2 V${x}_MASK2 0.080
chk_minspace VIA1${x}.SP.2_Mask3 V${x}_MASK3 0.080
chk_minspace VIA1${x}.SP.2_Mask4 V${x}_MASK4 0.080

puts "
exte V${x} V${x} -lt 0.080 -abut lt 90 -single_point V${x}_link_sp3;
quadcolor V${x} V${x}_link_sp3 -color0 V${x}_c0 -color1 V${x}_c1 -color2 V${x}_c2 -color3 V${x}_c3 -seed0 V${x}_MASK1 -seed1 V${x}_MASK2 -seed2 V${x}_MASK3 -seed3 V${x}_MASK4;
rule VIA${x}.coloring_conflict {
  exte V${x}_c0 V${x}_c0 -lt 0.080 -abut lt 90 -single_point;
  exte V${x}_c1 V${x}_c1 -lt 0.080 -abut lt 90 -single_point;
  exte V${x}_c2 V${x}_c2 -lt 0.080 -abut lt 90 -single_point;
  exte V${x}_c3 V${x}_c3 -lt 0.080 -abut lt 90 -single_point;
}
"

chk_MetalencloseVia VIA1${x}.C.1.1 M${x}_all M${y}_all V${x}_all 0.032 1

chk_MetalencloseVia VIA1${x}.C.1.2 M${x}_all M${y}_all V${x}_all 0.0965 2

chk_MetalencloseVia VIA1${x}.C.1.3 M${x}_all M${y}_all V${x}_all 0.3 4

chk_MetalencloseVia VIA1${x}.C.1.4 M${x}_all M${y}_all V${x}_all 1.0 8
}

for {set x ${mfirst14}} {$x<=${mlast14}} {incr x} { 

chk_minwidth METAL1${x}.W.1 M${x} 0.032

chk_maxwidth METAL1${x}.W.2 M${x} 2.0

puts "

with_width M${x} -ge 0.100 M${x}_ge0p100;
with_width M${x}_ge0p100 -ge 0.750 M${x}_ge0p750;
with_width M${x}_ge0p750 -ge 1.500 M${x}_ge1p500;

exte M${x} M${x} -lt 0.048 -abut lt 90 -single_point m${x}_sp21_m${x};
exte M${x} M${x}_ge0p100 -lt 0.072  -abut lt 90 -single_point -project ge 0.320 m${x}_sp22_m${x};
exte M${x} M${x}_ge0p750 -lt 0.112  -abut lt 90 -single_point -project ge 0.750 m${x}_sp23_m${x};
exte M${x} M${x}_ge1p500 -lt 0.220  -abut lt 90 -single_point -project ge 1.500 m${x}_sp24_m${x};
convex_edge M${x} -eq 2 -with_length le 0.050 M${x}_14end;
exte M${x}_14end M${x}_14end -lt 0.064 -abut lt 90 -single_point m${x}_link_sp41_m${x};

rule METAL1${x}.SP.2.1 {
  copy m${x}_sp21_m${x};
}
rule METAL1${x}.SP.2.2 {
  copy m${x}_sp22_m${x};
}
rule METAL1${x}.SP.2.3 {
  copy m${x}_sp23_m${x};
}
rule METAL1${x}.SP.2.4 {
  copy m${x}_sp24_m${x};
}
rule METAL1${x}.SP.4.1 {
  copy m${x}_link_sp41_m${x};
}
 
"

chk_minarea METAL1${x}.A.1 M${x} 0.006176

}


for {set x ${mfirst1bx}} {$x<=${mlast1bx}} {incr x} {

chk_minrectenc_lt_w METAL1B${x}.E.1.1 M${x}_all V${x}_sq 0 0.04 0 0.04 0.036

chk_minrectenc_gelt_w METAL1B${x}.E.1.2 M${x}_all V${x}_sq 0.002 0.034 0.002 0.05 0.036 0.052

chk_minrectenc_gelt_w METAL1B${x}.E.1.3 M${x}_all V${x}_sq 0.028 0.01 0.028 0.01 0.052 0.068

chk_minrectenc_w METAL1B${x}.E.1.4 M${x}_all V${x}_sq 0.018 0.018 0.018 0.018 1 0.068

chk_minrectenc_lt_w METAL1B${x}.E.2.1 M${x}_all V${x}_rect 0.02 0 0.02 0 0.05

chk_minrectenc_gelt_w METAL1B${x}.E.2.2 M${x}_all V${x}_rect 0.012 0.009 0.012 0.009 0.05 0.052

chk_minrectenc_gelt_w METAL1B${x}.E.2.3 M${x}_all V${x}_rect 0.01 0.01 0.01 0.01 0.052 0.106

chk_minrectenc_w METAL1B${x}.E.2.4 M${x}_all V${x}_rect 0.01 0 0.01 0 1 0.106 

}


for {set x ${mfirst1tx}} {$x<=${mlast1tx}} {incr x} {
   set y [expr ${x}-1]

chk_minrectenc_lt_w METAL1T${x}.E.1.1 M${x}_all V${y}_sq 0 0.04 0 0.04 0.036

chk_minrectenc_gelt_w METAL1T${x}.E.1.2 M${x}_all V${y}_sq 0.002 0.034 0.002 0.05 0.036 0.052

chk_minrectenc_gelt_w METAL1T${x}.E.1.3 M${x}_all V${y}_sq 0.028 0.01 0.028 0.01 0.052 0.068

chk_minrectenc_w METAL1T${x}.E.1.4 M${x}_all V${y}_sq 0.018 0.018 0.018 0.018 1 0.068

chk_minrectenc_lt_w METAL1T${x}.E.2.1 M${x}_all V${y}_rect 0.02 0 0.02 0 0.05

chk_minrectenc_gelt_w METAL1T${x}.E.2.2 M${x}_all V${y}_rect 0.012 0.009 0.012 0.009 0.05 0.052

chk_minrectenc_gelt_w METAL1T${x}.E.2.3 M${x}_all V${y}_rect 0.01 0.01 0.01 0.01 0.052 0.106

chk_minrectenc_w METAL1T${x}.E.2.4 M${x}_all V${y}_rect 0.01 0 0.01 0 1 0.106 
}

for {set x ${vfirst2x}} {$x<=${vlast2x}} {incr x} {
set y [expr ${x}+1]

chk_square VIA2${x}.W.1 V${x} 0.042

chk_minspace VIA2${x}.SP.1 V${x} 0.062

puts "
rule VIA2${x}.SP.2 {
select -with_neighbor V${x} -ge 3 -space lt 0.078;
}
"

chk_MetalencloseVia VIA2${x}.C.1.1 M${x} M${y} V${x} 0.042 1

chk_MetalencloseVia VIA2${x}.C.1.2 M${x} M${y} V${x} 0.1 2

chk_MetalencloseVia VIA2${x}.C.1.3 M${x} M${y} V${x} 0.3 4

chk_MetalencloseVia VIA2${x}.C.1.4 M${x} M${y} V${x} 1.0 8

}

chk_minrectenc_w VIA2X.E.1 M4 V4 0.008 0.008 0.008 0.008 0 0

for {set x ${mfirst2x}} {$x<=${mlast2x}} {incr x} {
set y [expr ${x}-1]

chk_minwidth METAL2${x}.W.1 M${x} 0.058

chk_maxwidth METAL2${x}.W.2 M${x} 3.0

chk_minspace METAL2${x}.SP.1.1 M${x} 0.068

chk_widemetalminspace METAL2${x}.SP.1.2 M${x} 0.08 0.06

chk_widemetalminspace METAL2${x}.SP.1.3 M${x} 0.10 0.09

puts "
rule METAL2${x}.SP.2.1 {
    caption Minimum M${x} end of line spacing 0.074 um;
    convex_edge M${x} -angle1 -eq 90 -angle2 -eq 90 -with_length -le 0.058 M${x}_LE_edge;
    edge_expand M${x}_LE_edge -inside_by 0.001 -outside_by 0 M${x}_LE_edge_expand;
    edge_boolean -coincident_only M${x}_LE_edge_expand M${x}_LE_edge M${x}_LE_edge_expand_real_TMP1;
    select -with_edge M${x}_LE_edge_expand M${x}_LE_edge_expand_real_TMP1 M${x}_LE_edge_expand_real;
    edge_select -coincident_only   M${x}_LE_edge M${x}_LE_edge_expand_real M${x}_LE_edge_real;
    convex_edge M${x}_LE_edge_real -ge 1 M${x}_MULTI_LE;
    edge_boolean -coincident_only -not M${x}_LE_edge M${x}_MULTI_LE M${x}_UNO_LE;
    exte M${x}_UNO_LE M${x}_UNO_LE -lt 0.074 -abut -lt 90 -metric opposite -output region;
}
"

chk_minarea METAL2${x}.A.1 M${x} 0.0082

chk_minenclose METAL2T${x}.E.1.1 M${x} V${y} 0.008
}

for {set x ${mfirst2bx}} {$x<=${mlast2bx}} {incr x} {

chk_minenclose METAL2B${x}.E.1.1 M${x} V${x} 0.008
}

for {set x ${vfirst4x}} {$x<=${vlast4x}} {incr x} {
set y [expr ${x}+1]

chk_square VIA4${x}.W.1 V${x} 0.064

chk_minspace VIA4${x}.SP.1 V${x} 0.084

puts "
rule VIA4${x}.SP.2 {
select -with_neighbor V${x} -ge 3 -space lt 0.1;
}
"

chk_MetalencloseVia VIA4${x}.C.1.1 M${x} M${y} V${x} 0.064 1

chk_MetalencloseVia VIA4${x}.C.1.2 M${x} M${y} V${x} 0.15 2

chk_MetalencloseVia VIA4${x}.C.1.3 M${x} M${y} V${x} 0.6 4

chk_MetalencloseVia VIA4${x}.C.1.4 M${x} M${y} V${x} 1.3 8

}

chk_minrectenc_w VIA4X.E.1 M6 V6 0.015 0.015 0.015 0.015 0 0

for {set x ${mfirst4x}} {$x<=${mlast4x}} {incr x} {
set y [expr ${x}-1]

chk_minwidth METAL4${x}.W.1 M${x} 0.069

chk_maxwidth METAL4${x}.W.2 M${x} 4.0

chk_minspace METAL4${x}.SP.2.1 M${x} 0.09

chk_widemetalminspace METAL4${x}.SP.2.2 M${x} 0.12 0.5

chk_widemetalminspace METAL4${x}.SP.2.3 M${x} 0.4 1.0

puts "
rule METAL4${x}.SP.4.1 {
    caption Minimum M${x} end of line spacing 0.096 um;
    convex_edge M${x} -angle1 -eq 90 -angle2 -eq 90 -with_length -le 0.0695 M${x}_LE_edge;
    edge_expand M${x}_LE_edge -inside_by 0.001 -outside_by 0 M${x}_LE_edge_expand;
    edge_boolean -coincident_only M${x}_LE_edge_expand M${x}_LE_edge M${x}_LE_edge_expand_real_TMP1;
    select -with_edge M${x}_LE_edge_expand M${x}_LE_edge_expand_real_TMP1 M${x}_LE_edge_expand_real;
    edge_select -coincident_only   M${x}_LE_edge M${x}_LE_edge_expand_real M${x}_LE_edge_real;
    convex_edge M${x}_LE_edge_real -ge 1 M${x}_MULTI_LE;
    edge_boolean -coincident_only -not M${x}_LE_edge M${x}_MULTI_LE M${x}_UNO_LE;
    exte M${x}_UNO_LE M${x}_UNO_LE -lt 0.096 -abut -lt 90 -metric opposite -output region;
}
"
chk_minarea METAL4${x}.A.1 M${x} 0.01

chk_minenclose METAL4${x}.E.1.1 M${x} V${y} 0.015
}

chk_minenclose CAPMET.E.1 CMT VT 0.08;

chk_minenclose CAPMET.E.2 M7 CMT 0.04;

PVS_END_TCL_BLOCK

//--------------------------------------------------------------------------------------
// CAPMET RULES
//--------------------------------------------------------------------------------------

//Minimum width of CMT
rule CAPMET.W.1 {
    caption CAPMET.W.1: Minimum width of CMT >= 0.26;
    cmacro chk_minwidth CMT 0.26;
}

//Minimum space of CMT
rule CAPMET.S.1 {
    caption CAPMET.S.1: Minimum space of CMT >= 1.0;
    cmacro chk_minspace CMT CMT 1.0;
}

// Minimum CMT overlap of VT
//rule CAPMET.E.1 {
//    caption CAPMET.E.1: Minimum CMT overlap of VT >= (0.08, 0.08) um;
//    cmacro chk_minenclose CMT VT 0.08;
//}

//Minimum last M4X overlap of CMT
//rule CAPMET.E.2 {
//    caption CAPMET.E.2: Minimum last M4X overlap of CMT >= (0.04, 0.04) um;
//    cmacro chk_minenclose M7 CMT 0.04;
//}


//--------------------------------------------------------------------------------------
// VT RULES
//--------------------------------------------------------------------------------------

// VT Square Width rule
rule VIAT.W.1 {
    caption VIAT.W.1: Maximum and minimum VT width and length is 0.1;
    cmacro chk_square VT 0.1;
} 

// VT Space check
rule VIAT.SP.1 {
    caption VIAT.SP.1: Minimum VT to VT spacing >= 0.12
    cmacro chk_minspace VT VT 0.12;
}

//Minimum 3 adjacent VT to VT spacing
rule VIAT.SP.2 {
    caption VIAT.SP.2: Minimum 3 adjacent VT to VT spacing >= 0.16 um;
    select -with_neighbor VT -ge 3 -space lt 0.16;
}

//Minimum number of VT in MT width >= 0.15
rule VIAT.C.1.1 {
    caption VIAT.C.1.1: Minimum number of VT in MT width >= 0.15 is 1;
    AND M7 MT M7MT_ovlp;
    WITH_WIDTH M7MT_ovlp -ge 0.15 M7MT_wide;
    SELECT -interact VT M7MT_wide via_checked;
    SELECT -outside -not M7MT_wide via_checked M7MT_check;
    SELECT -enclose -not M7MT_check VT -ge 1;
}

//Minimum number of VT in MT width >= 0.5
rule VIAT.C.1.2 {
    caption VIAT.C.1.2: Minimum number of VT in MT width >= 0.5 is 2;
    AND M7 MT M7MT_ovlp;
    WITH_WIDTH M7MT_ovlp -ge 0.5 M7MT_wide;
    SELECT -interact VT M7MT_wide via_checked;
    SELECT -outside -not M7MT_wide via_checked M7MT_check;
    SELECT -enclose -not M7MT_check VT -ge 2;

}

//Minimum number of VT in MT width >= 1.0
rule VIAT.C.1.3 {
    caption VIAT.C.1.3: Minimum number of VT in MT width >= 1.0 is 4;
    AND M7 MT M7MT_ovlp;
    WITH_WIDTH M7MT_ovlp -ge 1.0 M7MT_wide;
    SELECT -interact VT M7MT_wide via_checked;
    SELECT -outside -not M7MT_wide via_checked M7MT_check;
    SELECT -enclose -not M7MT_check VT -ge 4;

}

//Minimum number of VT in MT width >= 2.0
rule VIAT.C.1.4 {
    caption VIAT.C.1.4: Minimum number of VT in MT width >= 2.0 is 8;
    AND M7 MT M7MT_ovlp;
    WITH_WIDTH M7MT_ovlp -ge 2.0 M7MT_wide;
    SELECT -interact VT M7MT_wide via_checked;
    SELECT -outside -not M7MT_wide via_checked M7MT_check;
    SELECT -enclose -not M7MT_check VT -ge 8;
}

//Minimum last(4x) Metal enclosure of VT 
rule VIAT.E.1 {
    caption VIAT.E.1: Minimum last(4x) Metal enclosure of VT >= (0.03, 0.03)
    rect_enc VT M7 -outside_also -single_point -good 0.03 0.03 0.03 0.03;   
}

//----------------------------------------------------------------------
// MT RULES
// --------------------------------------------------------------------------------------

//Width check for MT
rule METALT.W.1 {
    caption METALT.W.1: Minimum MT width >= 0.22;
    cmacro chk_minwidth MT 0.22;
}

//Maximum Width Check for MT
rule METALT.W.2 {
    caption METALT.W.2: Maximum width <= 6.0;
    cmacro chk_maxwidth MT 6.0;
}

//Spacing Check
rule METALT.SP.1.1 {
    caption METALT.SP.1.1: Minimum spacing >= 0.20;
    cmacro chk_minspace MT MT 0.20;
}

//Mininum MT to MT spacing width>0.75
rule METALT.SP.1.2 {
    caption METALT.SP.1.2: Minimum spacing(with width >=0.75) >= 0.35
    with_width MT -ge 0.75 MT0075;
    cmacro chk_minspace MT0075 MT 0.35;
}

//Minimum MT to MT spacing width>1.5
rule METALT.SP.1.3 {
    caption METALT.SP.1.3: Minimum spacing(with width >=1.5) >= 0.55;
    with_width MT -ge 1.5 MT15;
    cmacro chk_minspace MT15 MT 0.55;
}

//Minimum MT to MT spacing width>2.5
rule METALT.SP.1.4 {
    caption METALT.SP.1.4: Minimum spacing(with width >=2.5) >= 0.75;
    with_width MT -ge 2.5 MT25;
    cmacro chk_minspace MT25 MT 0.75;
}

//Minimum MT to MT spacing width>3.5
rule METALT.SP.1.5 {
    caption METALT.SP.1.5: Minimum spacing(with width >=3.5) >= 1.25
    with_width MT -ge 3.5 MT35
    cmacro chk_minspace MT35 MT 1.25;
}

//Area check For MT
rule METALT.A.1 {
    caption METALT.A.1: Minimum area for MT >= 0.0484 um;
    cmacro chk_minarea MT 0.0484;
}

// enclose check for VT inside MT <(0.06,0.06)
rule METALT.E.1 {
    caption METALT.E.1: Minimum MT to VT enclosure >=(0.06,0.06)
    cmacro chk_minrectenc VT MT 0.06 0.06 0.06 0.06;
}

//include ./pvlANT.rul
//pvlANT.rul( Rules in this file will be added for next release)




