; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
; Turn on to keep hierarchy in LVS for RF cell blocking
;avParameters(
;	?preserveCells ( file("./Assura/hcell"))
;)

; read in schematic

avCompareRules(
;  groupModels(RES)
  ignoreParameterNormalization( t )
  filterReduceStatistics((preExpand t))
  paramsNotPassToQRC( BJT "area")

;; extent error numbers to avoid swap checking error   
;  sectionLineLimit(1000000)  
  
if( avSwitch( "FILTER_DGS_TIED_MOS" ) then
  filter( "X" )        ;filter MOS with D, G and S tied together
else
  filter( "XW" )       ;filter MOS with all pins tied (default)
  ) ;

  schematic(
    deleteCellPin(BJT "SUBSTRATE")

;    netlist( cdl "./lvs_top.cdl" )
  if( avSwitch( "CDL_input" ) then
    netlist( cdl "source.added" )
  ) ; end if

; Define the genericDevice region

    genericDevice( emptySubckt )

    swapPins("MOS" "S" "D")
;    swapPins("m6m1s(Generic)" "(p (f UL LL) (f UR LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL LL) (f UR LR))")

  ) ; end schematic

  layout(
    ;deleteCellPin(BJT "SUBSTRATE")
    setPower( all "VD33" "AVDDB" "DVDD" "VDDG" "AVDDG" "AHVDD" "AVDDBG" "AHVDDB" "VDD5V" "DHVDD" "TAVDDPST" "
TAVD33PST" "VDWELL" "AHVDDG" "AVDWELL" "AVDDR" "VDDSA" "TAVDD" "VDDPST" "TAVD33" "TACVDD" "AHVDDR" "HVDDWELL"
 "AHVDDWELL" "VDD" "AVDD")
    setGround( all "DVSS" "VSSG" "AVSSG" "AHVSS" "AVSSBG" "AHVSSB" "DHVSS" "TAVSSPST" "AHVSSG" "AVSSR" "VS33"
 "TAVSS" "VSSPST" "VSSUB" "AVSSUB" "AHVSSR" "GND" "AGND" "HVSSUB" "VSS" "AHVSSUB" "AVSS" "AVSSB")

;    swapPins("m6m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m5m1s(Generic)" "(p (f UL UR) (f LL LR))")
;    swapPins("m6m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m5m1s(Generic)" "(p UL UR LL LR )")
;    swapPins("m6m1(Generic)" "( p UL UR )")
;    swapPins("m5m1(Generic)" "( p UL UR )")

    swapPins("rppolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolywo(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolyl(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rnpolys(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1(Generic)" "(p  PLUS MINUS )")
    swapPins("rm2(Generic)" "(p  PLUS MINUS )")
    swapPins("rm3(Generic)" "(p  PLUS MINUS )")
    swapPins("rm4(Generic)" "(p  PLUS MINUS )")
    swapPins("rm5(Generic)" "(p  PLUS MINUS )")
    swapPins("rm6(Generic)" "(p  PLUS MINUS )")
    swapPins("rm7(Generic)" "(p  PLUS MINUS )")
    swapPins("rm8(Generic)" "(p  PLUS MINUS )")
    swapPins("rm9(Generic)" "(p  PLUS MINUS )")
    swapPins("rm10(Generic)" "(p  PLUS MINUS )")
    swapPins("rm11(Generic)" "(p  PLUS MINUS )")
    swapPins("rm1w(Generic)" "(p  PLUS MINUS )")
    swapPins("rmxw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmzw(Generic)" "(p  PLUS MINUS )")
    swapPins("rmt(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwod_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnwsti_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodwo_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnodl_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rpods_m(Generic)" "(p  PLUS MINUS )")
    swapPins("rnods_m(Generic)" "(p  PLUS MINUS )")
    swapPins( "rppolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rppolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins( "rnpolyl_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolys_dis(Generic)"  "(p  PLUS MINUS )")
    swapPins( "rnpolywo_dis(Generic)" "(p  PLUS MINUS )")
    swapPins("rppolyl_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolys_rf(Generic)"    "(p  PLUS MINUS )")
    swapPins("rppolywo_rf(Generic)"   "(p  PLUS MINUS )")
    swapPins("crtmom(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_01(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_012(Generic)"       "(p  PLUS MINUS )")
    swapPins("crtmom_rf(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_RT(Generic)"        "(p  PLUS MINUS )")
    swapPins("crtmom_rf_RT(Generic)"     "(p  PLUS MINUS )")
 )
; *****************************************************************
procedure( comparePROBE( dev1 dev2 )
 prog( ( )
   A1 = A2 = PJ1 = PJ2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->a then A1 = float(dev1->a) )
   if( dev2->a then A2 = float(dev2->a) )
   if( dev1->pj then PJ1 = float(dev1->pj) )
   if( dev2->pj then PJ2 = float(dev2->pj) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->A then A1 = float(dev1->A) )
   if( dev2->A then A2 = float(dev2->A) )
   if( dev1->PJ then PJ1 = float(dev1->PJ) )
   if( dev2->PJ then PJ2 = float(dev2->PJ) )

   Aerr = PJerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = diffPJ = float(1)
   when( diffM <= PROBEm_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= PROBEa_lvsTol Aerr = nil )
   )
   if( ( PJ1 > 0 && PJ2 > 0 ) then
           diffPJ = abs( PJ1 - PJ2 )
           when( diffPJ <= PROBEpj_lvsTol PJerr = nil )
   )
   if( Merr || Aerr || PJerr then
   sprintf( msg1 "Err: PROBE Sch m= %g a= %g pj= %g \n" M2 A2 PJ2 )
   sprintf( msg2 "Err:       Lay m= %g a= %g pj= %g \n" M1 A1 PJ1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePROBE
; *****************************************************************

   procedure( parallelRFCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   unless( ((L1 == L2) && (W1 == W2) && (G1 == G2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g gr= %g br= %g m= %g \n" L1 W1 G1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g gr= %g br= %g m= %g \n" L2 W2 G2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
   parRC->gr = float(G1)
   parRC->br = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L2 W2 G2 B2 M2 )
   printf( "result device: lr= %g wr= %g Gr= %g Br= %g m= %g \n" L1 W1 G1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelRFCAP
; *****************************************************************
procedure( compareRFCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->BR then B1 = float(dev1->BR) )
   if( dev2->BR then B2 = float(dev2->BR) )
   if( dev1->br then B1 = float(dev1->br) )
   if( dev2->br then B2 = float(dev2->br) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Gerr = Berr = t
   diffL = diffW = diffG = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
   if( ( G2 > 0 && G1 > 0 ) then
     diffG = abs( G2 - G1 )
     when( diffG <= rfcapG_lvsTol Gerr = nil )
     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Gerr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g gr= %g br= %g\n" M2 W2 L2 G2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g gr= %g br= %g\n" M1 W1 L1 G1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareRFCAP

; *****************************************************************
procedure( parallelLINCAP( dev1 dev2 )
 prog( ( parRC)
   parRC = ncons(nil)
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   unless( ((L1 == L2) && (W1 == W2) && (B1 == B2))
    printf( "\n** Unequal Parallel MOSCAP_RF NOT combined: \n" )
    printf( "   1st device: lr=%g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
    printf( "   2nd device: lr=%g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRC->m = newM
   parRC->lr = float(L1)
   parRC->wr = float(W1)
;   parRC->gr = float(G1)
   parRC->mr = float(B1)
   printf( "\n** Parallel MOSCAP_RF combined: \n" )
   printf( "   1st device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 M1 )
   printf( "   2nd device: lr= %g wr= %g mr= %g m= %g \n" L2 W2 B2 M2 )
   printf( "result device: lr= %g wr= %g mr= %g m= %g \n" L1 W1 B1 newM )
   return(parRC)
 ) ; end prog
) ; end parallelLINCAP
; *****************************************************************
procedure( compareLINCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = G1 = G2 = B1 = B2 = BT1 = B2T = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->GR then G1 = float(dev1->GR) )
   if( dev2->GR then G2 = float(dev2->GR) )
   if( dev1->gr then G1 = float(dev1->gr) )
   if( dev2->gr then G2 = float(dev2->gr) )
   if( dev1->MR then B1 = float(dev1->MR) )
   if( dev2->MR then B2 = float(dev2->MR) )
   if( dev1->mr then B1 = float(dev1->mr) )
   if( dev2->mr then B2 = float(dev2->mr) )

   B1T = float( B1 * M1 )
   B2T = float( B2 * M2 )
   Lerr = Werr = Berr = t
   diffL = diffW = diffB = float(1)
   
   if( ( L2 > 0 && L1 > 0 ) then
     diffL = abs( L2 - L1 )
     when( diffL <= rfcapL_lvsTol Lerr = nil )
     )
   if( ( W2 > 0 && W1 > 0 ) then
     diffW = abs( W2 - W1 ) 
     when( diffW <= rfcapW_lvsTol Werr = nil )
     )
;   if( ( G2 > 0 && G1 > 0 ) then
;     diffG = abs( G2 - G1 )
;     when( diffG <= rfcapG_lvsTol Gerr = nil )
;     )
   if( ( B2T > 0 && B1T > 0 ) then
     diffB = abs( B2T - B1T ) 
     when( diffB <= rfcapB_lvsTol Berr = nil )
     )

   if( Lerr || Werr || Berr then
   sprintf( msg1 "Err: MOSCAP_RF Sch m= %g wr= %g lr= %g mr= %g\n" M2 W2 L2 B2 )
   sprintf( msg2 "Err: MOSCAP_RF Lay m= %g wr= %g lr= %g mr= %g\n" M1 W1 L1 B1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareLINCAP
; *****************************************************************
  procedure( parallelRFMOS( dev1 dev2 )
 prog( ( parRF)
   parRF = ncons(nil)
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   unless( ((L1 == L2) && (W1 == W2) && (N1 == N2))
    printf( "\n** Unequal Parallel RFMOS NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
    printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parRF->m = newM
   parRF->lr = float(L1)
   parRF->wr = float(W1)
   parRF->nr = float(N1)
   printf( "\n** Parallel RFMOS combined: \n" )
   printf( "   1st device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 M1 )
   printf( "   2nd device: lr= %g wr= %g nr= %g m= %g \n" L2 W2 N2 M2 )
   printf( "result device: lr= %g wr= %g nr= %g m= %g \n" L1 W1 N1 newM )
   return(parRF)
 ) ; end prog
) ; end parallelRFMOS
; *****************************************************************
procedure( compareRFMOS( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = N1 = N2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )

   Werr = Lerr = Nerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = diffN = float(1)
   N1T = float( N1 * M1 )
   N2T = float( N2 * M2 )

   when( diffM <= RFMOS_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= RFMOS_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFMOS_lvsTol Lerr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N2T - N1T ) 
           when( diffN <= RFMOS_lvsTol Nerr = nil )
   )
   if( Merr || Werr || Lerr || Nerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g wr= %g lr= %g nr= %g\n" M2 W2 L2 N2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g wr= %g lr= %g nr= %g\n" M1 W1 L1 N1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFMOS
; *****************************************************************
procedure( parallelVAR( dev1 dev2 )
 prog( ( parVar)
   parVar = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2)
    printf( "\n** Unequal Parallel Varactor NOT combined: \n" )
    printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parVar->m = newM
   parVar->nr = float(N1)
   parVar->w = float(W1)
   parVar->l = float(L1)
   printf( "\n** Parallel Varactor combined: \n" )
   printf( "   1st device: m= %g nr= %g w= %g l= %g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nr= %g w= %g l= %g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nr= %g w= %g l= %g \n" newM N1 W1 L1 )
   return(parVar)
 ) ; end prog
) ; end parallelVAR
; *****************************************************************
procedure( compareVAR( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   Nerr = Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffN = diffW = diffL = float(1)
   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   when( diffM <= VAR_lvsTol Merr = nil )
   if( ( N1T > 0 && N2T > 0 ) then
           diffN = abs( N2T - N1T )
           when( diffN <= VAR_lvsTol Nerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 ) 
           when( diffW <= VAR_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= VAR_lvsTol Lerr = nil )
   )
   if( Merr || Lerr || Werr || Nerr then
   sprintf( msg1 "Err: VAR Sch m= %g nr= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nr= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareVAR
; *****************************************************************
procedure( parallelMOSCAP( dev1 dev2 )
 prog( ( parMC)
   parMC = ncons(nil)
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )

   unless( (L1 == L2) && (W1 == W2)
    printf( "\n** Unequal Parallel MOSCAP NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMC->m = newM
   parMC->lr = float(L1)
   parMC->wr = float(W1)
   printf( "\n** Parallel MOSCAP combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= %g \n" L1 W1 newM )
   return(parMC)
 ) ; end prog
) ; end parallelMOSCAP
; *****************************************************************
procedure( compareMOSCAP( dev1 dev2 )
 prog( ( )
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )

   Werr = Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffW = diffL = float(1)
   when( diffM <= MOSCAP_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W2 - W1 )
           when( diffW <= MOSCAP_lvsTol Werr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 )
           when( diffL <= MOSCAP_lvsTol Lerr = nil )
   )
   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: MOSCAP Sch m= %g wr= %g lr= %g\n" M2 W2 L2 )
   sprintf( msg2 "Err: MOSCAP Lay m= %g wr= %g lr= %g\n" M1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareMOSCAP
; *****************************************************************
procedure( parallelIND( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (S1 == S2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->spacing = float(S1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 S1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 S1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND
; *****************************************************************
procedure( compareIND( dev1 dev2 )
 prog( ()
   W1 = W2 = S1 = S2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->spacing then S1 = float(dev1->spacing) )
   if( dev2->spacing then S2 = float(dev2->spacing) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->SPACING then S1 = float(dev1->SPACING) )
   if( dev2->SPACING then S2 = float(dev2->SPACING) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Serr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffS = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 ) / W1
           when( diffW <= IND_wTol Werr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= IND_lvsTol Serr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Serr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 S2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g spacing= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 S1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND
; *****************************************************************
procedure( parallelIND1( dev1 dev2 )
 prog( ( parInd)
   parInd = ncons(nil)
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   unless( (W1 == W2) && (N1 == N2) && (L1 == L2) && (R1 == R2) && (G1 == G2)
    printf( "\n** Unequal Parallel IND NOT combined: \n" )
    printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1)
    printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parInd->m = newM
   parInd->w = float(W1)
   parInd->nr = float(N1)
   parInd->lay = float(L1)
   parInd->rad = float(R1)
   parInd->gdis = float(G1)
   printf( "\n** Parallel IND combined: \n" )
   printf( " 1st device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M1 W1 N1 L1 R1 G1 )
   printf( " 2nd device: m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2 )
   printf( " resulting : m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" newM W1 N1 L1 R1 G1 )
   return(parInd)
 ) ; end prog
) ; end parallelIND1
; *****************************************************************
procedure( compareIND1( dev1 dev2 )
 prog( ()
   W1 = W2 = N1 = N2 = L1 = L2 = R1 = R2 = G1 = G2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->nr then N1 = float(dev1->nr) )
   if( dev2->nr then N2 = float(dev2->nr) )
   if( dev1->lay then L1 = float(dev1->lay) )
   if( dev2->lay then L2 = float(dev2->lay) )
   if( dev1->rad then R1 = float(dev1->rad) )
   if( dev2->rad then R2 = float(dev2->rad) )
   if( dev1->gdis then G1 = float(dev1->gdis) )
   if( dev2->gdis then G2 = float(dev2->gdis) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->NR then N1 = float(dev1->NR) )
   if( dev2->NR then N2 = float(dev2->NR) )
   if( dev1->LAY then L1 = float(dev1->LAY) )
   if( dev2->LAY then L2 = float(dev2->LAY) )
   if( dev1->RAD then R1 = float(dev1->RAD) )
   if( dev2->RAD then R2 = float(dev2->RAD) )
   if( dev1->GDIS then G1 = float(dev1->GDIS) )
   if( dev2->GDIS then G2 = float(dev2->GDIS) )

   Werr = Nerr = Lerr = Rerr = Merr = Gerr = t
   diffM = abs( M1 - M2 )
   diffW = diffN = diffL = diffR = diffG = float(1)
   when( diffM <= IND_lvsTol Merr = nil )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= IND_lvsTol Werr = nil )
   )
   if( ( N1 > 0 && N2 > 0 ) then
           diffN = abs( N1 - N2 )
           when( diffN <= IND_lvsTol Nerr = nil )
   )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= IND_lvsTol Lerr = nil )
   )
   if( ( R1 > 0 && R2 > 0 ) then
           diffR = abs( R1 - R2 )
           when( diffR <= IND_lvsTol Rerr = nil )
   )
   if( ( G1 > 0 && G2 > 0 ) then
           diffG = abs( G1 - G2 )
           when( diffG <= IND_lvsTol Gerr = nil )
   )
   if( Merr || Werr || Nerr || Lerr || Rerr || Gerr then
   sprintf( msg1 "Err: IND Sch m= %g w= %g nr= %g lay= %g rad= %g gdis= %g \n" M2 W2 N2 L2 R2 G2)
   sprintf( msg2 "Err:     Lay m= %g w= %g nr= %g lay= %g rad= %g gdis=%g \n" M1 W1 N1 L1 R1 G1)
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareIND1
; *****************************************************************
procedure( parallelBJT( dev1 dev2 )
 prog( ( parBjt)
   parBjt = ncons(nil)
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   unless( A1 == A2
    printf( "\n** Unequal Parallel BJT NOT combined: \n" )
    printf( "   1st device: m= %g area= %g  \n" M1 A1  )
    printf( "   2nd device: m= %g area= %g  \n" M2 A2  )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parBjt->m = newM
   parBjt->area = float(A1)
   printf( "\n** Parallel BJT combined: \n" )
   printf( "   1st device: m= %g area= %g \n" M1 A1 )
   printf( "   2nd device: m= %g area= %g \n" M2 A2 )
   printf( "result device: m= %g area= %g \n" newM A1 )
   return(parBjt)
 ) ; end prog
) ; end parallelBJT
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareBJT( dev1 dev2 )
 prog( ()
   A1 = A2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m)  )
   if( dev2->m then M1 = float(dev2->m)  )
   if( dev1->EA then A1 = float(dev1->EA) )
   if( dev2->EA then A2 = float(dev2->EA) )
   if( dev1->AREA then A1 = float(dev1->AREA) )
   if( dev2->AREA then A2 = float(dev2->AREA) )
   if( dev1->area then A1 = float(dev1->area) )
   if( dev2->area then A2 = float(dev2->area) )

   Aerr = Merr = t
   diffM = abs( M1 - M2 )
   diffA = float(1)
   when( diffM <= BJT_lvsTol Merr = nil )
   if( ( A1 > 0 && A2 > 0 ) then
           diffA = abs( A1 - A2 )
           when( diffA <= BJT_lvsTol Aerr = nil )
   )
   if( Merr || Aerr then
   sprintf( msg1 "Err: BJT Sch area= %g, m= %g" A2 M2 )
   sprintf( msg2 "Err:     Lay area= %g, m= %g" A1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareBJT
; *****************************************************************
procedure( parallelCAPUM( dev1 dev2 )
 prog( ( parCapum)
   parCapum = ncons(nil)
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )
   
   unless( L1 == L2 && W1 == W2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
    printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2)
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCapum->m = newM
   parCapum->lt = float(L1)
   parCapum->wt = float(W1)
   parCapum->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   printf( "   2nd device: m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   printf( "result device: m= %g lt= %g wt= %g mimflag= %g \n" newM L1 W1 F1 )
   return(parCapum)
 ) ; end prog
) ; end parallelCAPUM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAPUM( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffF = float(1)
   when( diffM <= CAPUM_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAPUM_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAPUM_lvsTol Werr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAPUM_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g mimflag= %g \n" M2 L2 W2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g mimflag= %g \n" M1 L1 W1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAPUM
; *****************************************************************
procedure( parallelCAP( dev1 dev2 )
 prog( ( parCap)
   parCap = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 && F1 == F2 && F1 > 0 && F2 > 0
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parCap->m = newM
   parCap->lay = float(LAY1)
   parCap->lt = float(L1)
   parCap->wt = float(W1)
   parCap->mimflag = float(F1)
   printf( "\n** Parallel CAP combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M1 LAY1 L1 W1 F1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" M2 LAY2 L2 W2 F2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g mimflag= %g \n" newM LAY1 L1 W1 F1 )
   return(parCap)
 ) ; end prog
) ; end parallelCAP
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareCAP( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = F1 = F2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->mimflag then F1 = float(dev1->mimflag) )
   if( dev2->mimflag then F2 = float(dev2->mimflag) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->MIMFLAG then F1 = float(dev1->MIMFLAG) )
   if( dev2->MIMFLAG then F2 = float(dev2->MIMFLAG) )

   Lerr = Werr = Merr = LAYerr = Ferr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = diffF = float(1)
   when( diffM <= CAP_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= CAP_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= CAP_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= CAP_lvsTol LAYerr = nil )
   )
   if( ( F1 > 0 && F2 > 0 ) then
           diffF = abs( F1 - F2 )
           when( diffF <= CAP_lvsTol Ferr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr || Ferr then
   sprintf( msg1 "Err: CAP Sch m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M2 L2 W2 LAY2 F2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g mimflag= %g \n" M1 L1 W1 LAY1 F1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareCAP

; *****************************************************************
procedure( parallelPAD( dev1 dev2 )
 prog( ( parPad)
   parPad = ncons(nil)
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )

   unless( L1 == L2 && W1 == W2 && LAY1 == LAY2 
    printf( "\n** Unequal Parallel PAD NOT combined: \n" )
    printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
    printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parPad->m = newM
   parPad->lay = float(LAY1)
   parPad->lt = float(L1)
   parPad->wt = float(W1)
   printf( "\n** Parallel PAD combined: \n" )
   printf( "   1st device: m= %g lay= %g lt= %g wt= %g \n" M1 LAY1 L1 W1 )
   printf( "   2nd device: m= %g lay= %g lt= %g wt= %g \n" M2 LAY2 L2 W2 )
   printf( "result device: m= %g lay= %g lt= %g wt= %g \n" newM LAY1 L1 W1 )
   return(parPad)
 ) ; end prog
) ; end parallelPAD
; *****************************************************************
; lay = dev1  sch = dev2
procedure( comparePAD( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = LAY1 = LAY2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->lay then LAY1 = float(dev1->lay) )
   if( dev2->lay then LAY2 = float(dev2->lay) )
   if( dev1->lt then L1 = float(dev1->lt) )
   if( dev2->lt then L2 = float(dev2->lt) )
   if( dev1->wt then W1 = float(dev1->wt) )
   if( dev2->wt then W2 = float(dev2->wt) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LAY then LAY1 = float(dev1->LAY) )
   if( dev2->LAY then LAY2 = float(dev2->LAY) )
   if( dev1->LT then L1 = float(dev1->LT) )
   if( dev2->LT then L2 = float(dev2->LT) )
   if( dev1->WT then W1 = float(dev1->WT) )
   if( dev2->WT then W2 = float(dev2->WT) )

   Lerr = Werr = Merr = LAYerr = t
   diffM = abs( M1 - M2 )
   diffL = diffW = diffLAY = float(1)
   when( diffM <= PAD_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L1 - L2 )
           when( diffL <= PAD_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
           diffW = abs( W1 - W2 )
           when( diffW <= PAD_lvsTol Werr = nil )
   )
   if( ( LAY1 > 0 && LAY2 > 0 ) then
           diffLAY = abs( LAY1 - LAY2 )
           when( diffLAY <= PAD_lvsTol LAYerr = nil )
   )
   if( Merr || Lerr || Werr || LAYerr then
   sprintf( msg1 "Err: PAD Sch m= %g lt= %g wt= %g lay= %g \n" M2 L2 W2 LAY2 )
   sprintf( msg2 "Err:     Lay m= %g lt= %g wt= %g lay= %g \n" M1 L1 W1 LAY1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end comparePAD

; *****************************************************************
procedure( parallelRFDIO( dev1 dev2 )
 prog( ( parDIO)
   parDIO = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RFDIO NOT combined: \n" )
    printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parDIO->aw = newW
   parDIO->al = float(L1)
   parDIO->m = float(1)

   printf( "\n** Parallel RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m= 1 \n" L1 newW )
   return(parDIO)
 ) ; end prog
) ; end parallelRFDIO

procedure( seriesRFDIO( dev1 dev2 )
 prog( ( parDIOS)
   parDIOS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->al then L1 = float(dev1->al) )
   if( dev2->al then L2 = float(dev2->al) )
   if( dev1->AL then L1 = float(dev1->AL) )
   if( dev2->AL then L2 = float(dev2->AL) )
   if( dev1->AW then W1 = float(dev1->AW) )
   if( dev2->AW then W2 = float(dev2->AW) )
   if( dev1->aw then W1 = float(dev1->aw) )
   if( dev2->aw then W2 = float(dev2->aw) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RFDIO NOT combined for device: \n")
     printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parDIOS->aw = newW
   parDIOS->al = newL
   parDIOS->m = float(1)
   printf( "\n** Series RFDIO combined: \n" )
   printf( "   1st device: al= %g aw= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: al= %g aw= %g m= %g \n" L2 W2 M2 )
   printf( "result device: al= %g aw= %g m=1 \n" newL newW )
   return(parDIOS)
 ) ; end prog
) ; end seriesRFDIO
; *****************************************************************
procedure( compareRFDIO( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->al then L1 = float( dev1->al ) )
   if( dev2->al then L2 = float( dev2->al ) )
   if( dev1->aw then W1 = float( dev1->aw ) )
   if( dev2->aw then W2 = float( dev2->aw ) )
   if( dev1->AW then W1 = float( dev1->AW ) )
   if( dev2->AW then W2 = float( dev2->AW ) )
   if( dev1->AL then L1 = float( dev1->AL ) )
   if( dev2->AL then L2 = float( dev2->AL ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= rfdioL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= rfdioW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RFDIO Sch al= %g aw= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:       Lay al= %g aw= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFDIO

; ****************************************************************
procedure( parallelMOM( dev1 dev2 )
 prog( ( parMOM)
   parMOM = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOM->m = newM
   parMOM->nv = float(NV1)
   parMOM->nh = float(NH1)
   parMOM->s = float(S1)
   parMOM->w = float(W1)
   parMOM->stm = float(STM1)
   parMOM->spm = float(SPM1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 )
   return(parMOM)
 ) ; end prog
) ; end parallelMOM
; *****************************************************************
procedure( parallelMOMmx( dev1 dev2 )
 prog( ( parMOMmx)
   parMOMmx = ncons(nil)
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1 = MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   unless( NV1==NV2 && NH1==NH2 && S1==S2 && W1==W2 && STM1==STM2 && SPM1==SPM2 && MF1==MF2
    printf( "\n** Unequal Parallel CAP NOT combined: \n" )
    printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
    printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parMOMmx->m = newM
   parMOMmx->nv = float(NV1)
   parMOMmx->nh = float(NH1)
   parMOMmx->s = float(S1)
   parMOMmx->w = float(W1)
   parMOMmx->stm = float(STM1)
   parMOMmx->spm = float(SPM1)
   parMOMmx->mf = float(MF1)
   printf( "\n** Parallel CRTMOM combined: \n" )
   printf( "   1st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M1 NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   printf( "   2st device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" M2 NV2 NH2 S2 W2 STM2 SPM2 MF2 )
   printf( "result device: m= %g nv= %g nh= %g s= %g w= %g stm= %g spm= %g mf= %g \n" newM NV1 NH1 S1 W1 STM1 SPM1 MF1 )
   return(parMOMmx)
 ) ; end prog
) ; end parallelMOMmx

; *****************************************************************

; lay = dev1  sch = dev2
procedure( compareMOM( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOM
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareMOMmx( dev1 dev2 )
 prog( ()
   NV1 = NV2 = NH1 = NH2 = S1 = S2 = STM1 = STM2 = SPM1 = SPM2 = W1 = W2 = MF1= MF2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->mf then MF1 = float(dev1->mf) )
   if( dev2->mf then MF2 = float(dev2->mf) )
   if( dev1->nv then NV1 = float(dev1->nv) )
   if( dev2->nv then NV2 = float(dev2->nv) )
   if( dev1->nh  then NH1 = float(dev1->nh) )
   if( dev2->nh  then NH2 = float(dev2->nh) )
   if( dev1->s then S1 = float(dev1->s) )
   if( dev2->s then S2 = float(dev2->s) )
   if( dev1->sp then S1 = float(dev1->sp) )
   if( dev2->sp then S2 = float(dev2->sp) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->stm then STM1 = float(dev1->stm) )
   if( dev2->stm then STM2 = float(dev2->stm) )
   if( dev1->spm then SPM1 = float(dev1->spm) )
   if( dev2->spm then SPM2 = float(dev2->spm) )
   if( dev1->StartMn then STM1 = float(dev1->StartMn) )
   if( dev2->StartMn then STM2 = float(dev2->StartMn) )
   if( dev1->StopMn then SPM1 = float(dev1->StopMn) )
   if( dev2->StopMn then SPM2 = float(dev2->StopMn) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->MF then MF1 = float(dev1->MF) )
   if( dev2->MF then MF2 = float(dev2->MF) )
   if( dev1->NV then NV1 = float(dev1->NV) )
   if( dev2->NV then NV2 = float(dev2->NV) )
   if( dev1->NH  then NH1 = float(dev1->NH) )
   if( dev2->NH  then NH2 = float(dev2->NH) )
   if( dev1->S then S1 = float(dev1->S) )
   if( dev2->S then S2 = float(dev2->S) )
   if( dev1->SP then S1 = float(dev1->SP) )
   if( dev2->SP then S2 = float(dev2->SP) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->STM then STM1 = float(dev1->STM) )
   if( dev2->STM then STM2 = float(dev2->STM) )
   if( dev1->SPM then SPM1 = float(dev1->SPM) )
   if( dev2->SPM then SPM2 = float(dev2->SPM) )

   Merr = NHerr = NVerr = Serr = Werr = STMerr = SPMerr = MFerr = t
   diffM = abs( M1 - M2 )
   diffNH = diffNV = diffS = diffW = diffSTM = diffSPM = diffMF = float(1)
   when( diffM <= MOM_lvsTol Merr = nil )
   if( ( NH1 > 0 && NH2 > 0 ) then
           diffNH = abs( NH1 - NH2 )
           when( diffNH <= MOM_lvsTol NHerr = nil )
   )
   if( ( NV1 > 0 && NV2 > 0 ) then
           diffNV = abs( NV1 - NV2 )
           when( diffNV <= MOM_lvsTol NVerr = nil )
   )
   if( ( S1 > 0 && S2 > 0 ) then
           diffS = abs( S1 - S2 )
           when( diffS <= MOM_lvsTol Serr = nil )
   )
   if( W1 > 0 && W2 > 0 then
           diffW = abs( W1 - W2 )
           when( diffW <= MOM_lvsTol Werr = nil )
   )
   if( STM1 > 0 && STM2 > 0 then
           diffSTM = abs( STM1 - STM2 )
           when( diffSTM <= MOM_lvsTol STMerr = nil)
   )
   if( SPM1 > 0 && SPM2 > 0 then
           diffSPM = abs( SPM1 - SPM2 )
           when( diffSPM <= MOM_lvsTol SPMerr = nil)
   )
   if( MF1 > 0 && MF2 > 0 then
           diffMF = abs( MF1 - MF2 )
           when( diffMF <= MOM_lvsTol MFerr = nil)
   )
   if( Merr || NHerr || NVerr || Serr || Werr || STMerr || SPMerr || MFerr then
   sprintf( msg1 "Err: MOM Sch m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M2 NH2 NV2 S2 STM2 SPM2 W2 MF2
 )
   sprintf( msg2 "Err:     Lay m= %g nh= %g nv= %g s= %g stm= %g spm= %g w= %g mf= %g \n" M1 NH1 NV1 S1 STM1 SPM1 W1 MF1 
 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )
 ) ; end prog
) ; end compareMOMmx
; *****************************************************************
procedure( parallelRES( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->w = newW
   parRES->l = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRES

procedure( seriesRES( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->w = newW
   parRESS->l = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m=1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRES
; *****************************************************************
procedure( compareRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRES
; *****************************************************************
procedure( parallelRFRES( dev1 dev2 )
 prog( ( parRFRES)
   parRFRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )
   if( dev1->sumL then L1 = float(dev1->sumL) )
   if( dev2->sumL then L2 = float(dev2->sumL) )
   if( dev1->Wsim then W1 = float(dev1->Wsim) )
   if( dev2->Wsim then W2 = float(dev2->Wsim) )
   if( dev1->Lsim then L1 = float(dev1->Lsim) )
   if( dev2->Lsim then L2 = float(dev2->Lsim) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RF RES NOT combined: \n" )
    printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

;   newW  = float( W1*M1 + W2*M2 )
    newM  = float( M1 + M2 )

   parRFRES->w = float(W1)
   parRFRES->l = float(L1)
   parRFRES->m = newM

   printf( "\n** Parallel RF RES combined: \n" )
   printf( "   1st device: l= %g w= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: l= %g w= %g m= %g \n" L2 W2 M2 )
   printf( "result device: l= %g w= %g m= 1 \n" L1 W1 newM )
   return(parRFRES)
 ) ; end prog
) ; end parallelRFRES

; *****************************************************************
procedure( compareRFRES( dev1 dev2 )
 prog( ()
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )

   Merr = Lerr = Werr = t
   diffM = abs( M1 - M2 )   
   diffL = diffW = float(1)
   when( diffM <= resW_lvsTol Merr = nil )

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( W1 - W2 )
    when( diffW <= resW_lvsTol Werr = nil )
   )

   if( Merr || Werr || Lerr then
   sprintf( msg1 "Err: RES Sch l= %g w= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay l= %g w= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRFRES
; *****************************************************************
procedure( parallelRESR( dev1 dev2 )
 prog( ( parRES)
   parRES = ncons(nil)
   L1 = float(0)
   L2 = float(-1)
   W1 = W2 = newW1 = newW2 = newW = float(0)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   unless( (L1 == L2)
    printf( "\n** Unequal Parallel RES NOT combined: \n" )
    printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
    printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
    return("doNotCombine")
   )

   newW  = float( W1*M1 + W2*M2 )

   parRES->wr = newW
   parRES->lr = float(L1)
   parRES->m = float(1)

   printf( "\n** Parallel RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" L1 newW )
   return(parRES)
 ) ; end prog
) ; end parallelRESR

procedure( seriesRESR( dev1 dev2 )
 prog( ( parRESS)
   parRESS = ncons(nil)
   W1 = newW1 = float(0)
   W2 = newW2 = float(-1)
   L1 = L2 = newL = float(0)
   M1 = M2 = float(1)
  
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->lr then L1 = float(dev1->lr) )
   if( dev2->lr then L2 = float(dev2->lr) )
   if( dev1->LR then L1 = float(dev1->LR) )
   if( dev2->LR then L2 = float(dev2->LR) )
   if( dev1->WR then W1 = float(dev1->WR) )
   if( dev2->WR then W2 = float(dev2->WR) )
   if( dev1->wr then W1 = float(dev1->wr) )
   if( dev2->wr then W2 = float(dev2->wr) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   newW1 = float( W1*M1 )
   newW2 = float( W2*M2 )

   unless( (newW1 == newW2)
     printf( "\n** Unequal Series RES NOT combined for device: \n")
     printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
     printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
     return("doNotCombine")
   )

   newL = float( L1 + L2 )
   newW = newW1

   parRESS->wr = newW
   parRESS->lr = newL
   parRESS->m = float(1)
   printf( "\n** Series RES combined: \n" )
   printf( "   1st device: lr= %g wr= %g m= %g \n" L1 W1 M1 )
   printf( "   2nd device: lr= %g wr= %g m= %g \n" L2 W2 M2 )
   printf( "result device: lr= %g wr= %g m= 1 \n" newL newW )
   return(parRESS)
 ) ; end prog
) ; end seriesRESR
; *****************************************************************
procedure( compareRESR( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   L1 = L2 = W1 = W2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )
   if( dev1->l then L1 = float( dev1->l ) )
   if( dev2->l then L2 = float( dev2->l ) )
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->lr then L1 = float( dev1->lr ) )
   if( dev2->lr then L2 = float( dev2->lr ) )
   if( dev1->wr then W1 = float( dev1->wr ) )
   if( dev2->wr then W2 = float( dev2->wr ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )
   if( dev1->L then L1 = float( dev1->L ) )
   if( dev2->L then L2 = float( dev2->L ) )
   if( dev1->LR then L1 = float( dev1->LR ) )
   if( dev2->LR then L2 = float( dev2->LR ) )
   if( dev1->WR then W1 = float( dev1->WR ) )
   if( dev2->WR then W2 = float( dev2->WR ) )
   if( dev1->sumW then W1 = float(dev1->sumW) )
   if( dev2->sumW then W2 = float(dev2->sumW) )

   Lerr = Werr = t
   diffL = diffW = float(1)

   if( ( L1 > 0 && L2 > 0 ) then
    diffL = abs( L1 - L2 )
    when( diffL <= resL_lvsTol Lerr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = abs( M1*W1 - M2*W2 )
    when( diffW <= resL_lvsTol Werr = nil )
   )

   if( Werr || Lerr then
   sprintf( msg1 "Err: RES Sch lr= %g wr= %g m= %g \n" L2 W2 M2 )
   sprintf( msg2 "Err:     Lay lr= %g wr= %g m= %g \n" L1 W1 M1 )
   sprintf( msg "%s \n%s" msg1 msg2 )
   return( msg )
   )

 ) ; end prog
) ; end compareRESR

; *****************************************************************
procedure( parallelSBD( dev1 dev2 )
 prog( ( parSbd)
   parSbd = ncons(nil)
   N1 = N2 = W1 = W2 = L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   unless( (N1 == N2) && (W1 == W2) && (L1 == L2) 
    printf( "\n** Unequal Parallel Schottky diode NOT combined: \n" )
    printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
    printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parSbd->m = newM
   parSbd->nf = float(N1)
   parSbd->w = float(W1)
   parSbd->l = float(L1)
   printf( "\n** Parallel Schottky diode combined: \n" )
   printf( "   1st device: m= %g nf= %g w=%g l=%g \n" M1 N1 W1 L1 )
   printf( "   2nd device: m= %g nf= %g w=%g l=%g \n" M2 N2 W2 L2 )
   printf( "result device: m= %g nf= %g w=%g l=%g \n" newM N1 W1 L1 )
   return(parSbd)
 ) ; end prog
) ; end parallelSBD
; *****************************************************************
procedure( compareSBD( dev1 dev2 )
 prog( ( )
   N1 = N2 = W1 = W2 = L1 = L2 = diffL = diffW = diffN = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->NF then N1 = float(dev1->NF) )
   if( dev2->NF then N2 = float(dev2->NF) )
   if( dev1->nf then N1 = float(dev1->nf) )
   if( dev2->nf then N2 = float(dev2->nf) )
   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )
   if( dev1->L then L1 = float(dev1->L) )
   if( dev2->L then L2 = float(dev2->L) )
   if( dev1->l then L1 = float(dev1->l) )
   if( dev2->l then L2 = float(dev2->l) )

   N1T = float(N1 * M1)
   N2T = float(N2 * M2)
   if( ( L2 > 0 && L1 > 0 ) then diffL = 100 * (abs( L2 - L1 ) / L2 ))
   if( ( W2 > 0 && W1 > 0 ) then diffW = 100 * (abs( W2 - W1 ) / W2 ))
   if( ( N2T > 0 && N1T > 0 ) then diffN = 100 * (abs( N2T - N1T ) / N2T ))
   if( (N1T == N2T) && (W1 == W2) && (L1 == L2) return(nil) )
   sprintf( msg1 "Err: SBD Sch m= %g nf= %g w= %g l= %g\n" M2 N2 W2 L2 )
   sprintf( msg2 "Err:     Lay m= %g nf= %g w= %g l= %g\n" M1 N1 W1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
 ) ; end prog
) ; end compareSBD
; *****************************************************************
  procedure( parallelRFBJT( dev1 dev2 )
 prog( ( parLVBJT)
   parLVBJT = ncons(nil)
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   unless( (L1 == L2) 
    printf( "\n** Unequal Parallel RFBJT NOT combined: \n" )
    printf( "   1st device: lg= %g m= %g \n" L1 M1 )
    printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parLVBJT->m = newM
   parLVBJT->lg = float(L1)
   printf( "\n** Parallel RFBJT combined: \n" )
   printf( "   1st device: lg= %g m= %g \n" L1 M1 )
   printf( "   2nd device: lg= %g m= %g \n" L2 M2 )
   printf( "result device: lg= %g m= %g \n" L1 newM )
   return(parLVBJT)
 ) ; end prog
) ; end parallelRFBJT
; *****************************************************************
procedure( compareRFBJT( dev1 dev2 )
 prog( ( )
   L1 = L2 = float(0)
   M1 = M2 = float(1)
   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )
   if( dev1->LG then L1 = float(dev1->LG) )
   if( dev2->LG then L2 = float(dev2->LG) )
   if( dev1->lg then L1 = float(dev1->lg) )
   if( dev2->lg then L2 = float(dev2->lg) )

   Lerr = Merr = t
   diffM = abs( M1 - M2 )
   diffL = diffN = float(1)

   when( diffM <= RFBJT_lvsTol Merr = nil )
   if( ( L1 > 0 && L2 > 0 ) then
           diffL = abs( L2 - L1 ) 
           when( diffL <= RFBJT_lvsTol Lerr = nil )
   )

   if( Merr || Lerr then
   sprintf( msg1 "Err: RFMOS Sch m= %g lg= %g\n" M2 L2 )
   sprintf( msg2 "Err: RFMOS Lay m= %g lg= %g\n" M1 L1 )
   sprintf( msg "%s%s" msg1 msg2 )
   return( msg )
  )
 ) ; end prog
) ; end compareRFBJT
; *****************************************************************
procedure( parallelTLS( dev1 dev2 )
 prog( (parTLS)
   parTLS = ncons(nil)
   W1 = D1 = float(0)
   W2 = D2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->D then D1 = float(dev1->D) )
   if( dev2->D then D2 = float(dev2->D) )
   if( dev1->d then D1 = float(dev1->d) )
   if( dev2->d then D2 = float(dev2->d) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

printf( "parallelTLR")

   unless( (D1 == D2) && (W1 == W2)
    printf( "\n** Unequal Parallel Dual Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g d=%g  \n" M1 W1 D1 )
    printf( "   2nd device: m= %g w=%g d=%g  \n" M2 W2 D2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTLS->m = newM
   parTLS->d = float(D1)
   parTLS->w = float(W1)
   printf( "\n** Parallel Dual Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g d=%g \n" M1 W1 D1 )
   printf( "   2nd device: m= %g w=%g d=%g \n" M2 W2 D2 )
   printf( "result device: m= %g w=%g d=%g \n" newM W1 D1 )
   return(parTLS)
 ) ; end prog
) ; end parallelTLS
; *****************************************************************
; lay = dev1  sch = dev2
procedure( compareTLS( dev1 dev2 )
 prog( ()
   W1 = W2 = D1 = D2 = M1 = M2 float(0)
   M1 = M2 = float(1)

; Make parameters case insensitive
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->d then D1 = float( dev1->d ) )
   if( dev2->d then D2 = float( dev2->d ) )
   if( dev1->D then D1 = float( dev1->D ) )
   if( dev2->D then D2 = float( dev2->D ) )

   if( dev1->m then M1 = float( dev1->m ) )
   if( dev2->m then M2 = float( dev2->m ) )
   if( dev1->M then M1 = float( dev1->M ) )
   if( dev2->M then M2 = float( dev2->M ) )

   Werr = Derr = Merr = t
   diffD = diffW = diffM = float(1)

   if( ( D2 > 0 && D2 > 0 ) then
    diffD = 100 * (abs( D1 - D2 ) / D2 )
    when( diffD <= tlsD_lvsTol Derr = nil )
   )
   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlsW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlsM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Derr || Werr || Merr then
    sprintf( msg1 "Err: TLS Sch d= %g w= %g m= %g \n" D2 W2 M2 )
    sprintf( msg1 "Err: TLS Lay d= %g w= %g m= %g \n" D1 W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTLS

; *****************************************************************
procedure( parallelTL( dev1 dev2 )
 prog( ( parTL)
   parTL = ncons(nil)
   W1 = float(0)
   W2 = float(-1)
   M1 = M2 = float(1)

   if( dev1->m then M1 = float(dev1->m) )
   if( dev2->m then M2 = float(dev2->m) )
   if( dev1->M then M1 = float(dev1->M) )
   if( dev2->M then M2 = float(dev2->M) )

   if( dev1->W then W1 = float(dev1->W) )
   if( dev2->W then W2 = float(dev2->W) )
   if( dev1->w then W1 = float(dev1->w) )
   if( dev2->w then W2 = float(dev2->w) )

   unless( (W1 == W2)
    printf( "\n** Unequal Parallel Transmission Line NOT combined: \n" )
    printf( "   1st device: m= %g w=%g \n" M1 W1 )
    printf( "   2nd device: m= %g w=%g \n" M2 W2 )
    return("doNotCombine")
   )
   newM = float( M1 + M2 )
   parTL->m = newM
   parTL->w = float(W1)
   printf( "\n** Parallel Transmission Line combined: \n" )
   printf( "   1st device: m= %g w=%g \n" M1 W1 )
   printf( "   2nd device: m= %g w=%g \n" M2 W2 )
   printf( "result device: m= %g w=%g \n" newM W1 )
   return(parTL)
 ) ; end prog
) ; end parallelTL
; *****************************************************************
procedure( compareTL( dev1 dev2 )
 prog( ()
; Make parameters case insensitive
   W1 = W2 = float(0)
   if( dev1->w then W1 = float( dev1->w ) )
   if( dev2->w then W2 = float( dev2->w ) )
   if( dev1->W then W1 = float( dev1->W ) )
   if( dev2->W then W2 = float( dev2->W ) )

   if( dev1->m then M1 = float( dev1->m ) else M1 = float(1) )
   if( dev2->m then M2 = float( dev2->m ) else M2 = float(1) )

   Werr = Merr = t
   diffW = diffM = float(1)

   if( ( W1 > 0 && W2 > 0 ) then
    diffW = 100 * (abs( W1 - W2 ) / W2 )
    when( diffW <= tlW_lvsTol Werr = nil )
   )
   if( ( M1 > 0 && M2 > 0 ) then
    diffM = 100 * (abs( M1 - M2 ) / M2 )
    when( diffM <= tlM_lvsTol Merr = nil )
   )

; now we know there is a parameter error
   if( Werr || Merr then
    sprintf( msg1 "Err: TLS Sch w= %g m= %g \n" W2 M2 )
    sprintf( msg1 "Err: TLS Lay w= %g m= %g \n" W1 M1 )
    sprintf( msg "%s \n%s" msg1 msg2 )
    return( msg )
   )
 ) ; end prog
) ; end compareTL
; *****************************************************************
;  smartCaseForAutoBind( (cell nil) (pin nil) (net nil) (instance nil))
  mergeSeries( BJT noMerge )
  mergeSplitGate( sameOrder )
;  mergeSplitGate( noMerge )
  mergeSeries( CAP noMerge )
  mergeParallel( CAP noMerge )
;  mergeSeries( MOS noMerge )
;  mergeParallel( MOS noMerge )
  formGate( MOS none )
  expandOnError((reduce nil)(swap t)(swapThres t)(pins t)(parameter t))
;;  expandOnError((reduce t)(swap t)(swapThres t)(pins t)(parameter t))
;  compareParameter( BJT percent(  "AREA" 0 "W" 0 "L" 0 ) )
  compareParameter( BJT percent(  "area" 0 ) )
  compareParameter( MOS percent( "w" 0 "l" 0 ) )
  compareParameter( LDD percent( "w" 0 "l" 0 ) )
  compareParameter( RES percent(  "VALUE" 0.02 ) )
  compareParameter( CAP percent(  "VALUE" 0 ) )
  compareParameter( DIODE percent(  "VALUE" 0 ) )

  PROBEm_lvsTol = 0
  PROBEa_lvsTol = 0
  PROBEpj_lvsTol = 0
  compareParameter( "probe" comparePROBE )
  compareParameter( "probe1" comparePROBE )
  compareParameter( "probe2" comparePROBE )
  compareParameter( "probe3" comparePROBE )
  compareParameter( "probe4" comparePROBE )
  compareParameter( "probe5" comparePROBE )
  compareParameter( "probe6" comparePROBE )
  compareParameter( "probe7" comparePROBE )
  compareParameter( "probe8" comparePROBE )
  RFMOS_lvsTol = 1e-9
  mergeParallel( "pmos_rf_25_nwud(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud(Generic)" compareRFMOS )  ; new
  mergeParallel( "pmos_rf_25_nwud18(Generic)" merge parallelRFMOS ) ; new
  compareParameter( "pmos_rf_25_nwud18(Generic)" compareRFMOS )  ; new
  mergeParallel( "nmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_mlvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_mlvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_ilvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_ilvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25ud18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwud18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwud18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25ud(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud(Generic)" compareRFMOS ) ; new
  mergeParallel( "pmos_rf_25ud18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25ud18(Generic)" compareRFMOS ) ; new
  mergeParallel( "nmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_18_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_18_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_na18(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_na18(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_lvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_lvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_hvt_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_hvt_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25od33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnwod33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnwod33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_33_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_33_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_nodnw(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "nmos_rf_25_nodnw(Generic)" merge parallelRFMOS )
  compareParameter( "nmos_rf_25_nodnw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_18(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_18(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25_nwod33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25_nwod33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_hvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_hvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_lvt(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_lvt(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_mlvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_mlvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_ilvt_nw(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_ilvt_nw(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_33(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od(Generic)" compareRFMOS )
  mergeParallel( "pmos_rf_25od33(Generic)" merge parallelRFMOS )
  compareParameter( "pmos_rf_25od33(Generic)" compareRFMOS )
  ;; For RF 6T/5T MOS
  mergeParallel("nmos_rf_mlvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_mlvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_ilvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_ilvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_hvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_hvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_lvt_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_lvt_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25od33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25od33_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_25ud18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_25ud18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_18_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_18_6t(Generic)" compareRFMOS )
  mergeParallel("nmos_rf_33_6t(Generic)" merge parallelRFMOS )
  compareParameter("nmos_rf_33_6t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_hvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_hvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_lvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_lvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25od33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25od33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_25ud18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_25ud18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_18_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_18_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_33_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_33_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_mlvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_mlvt_nw_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_5t(Generic)" compareRFMOS )
  mergeParallel("pmos_rf_ilvt_nw_5t(Generic)" merge parallelRFMOS )
  compareParameter("pmos_rf_ilvt_nw_5t(Generic)" compareRFMOS )
  
  CAPUM_lvsTol = 0
  mergeParallel( "mimcap_um_sin_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_sin_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_sin_udc_rf(Generic)" compareCAPUM )

  mergeParallel( "mimcap_um_udc_rf(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_um_udc_rf(Generic)" compareCAPUM )
  
  mergeParallel( "mimcap_sin(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap(Generic)" compareCAPUM)

  mergeParallel( "mimcap_sin_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_sin_udc(Generic)" compareCAPUM)
  
  mergeParallel( "mimcap_udc(Generic)" merge parallelCAPUM )
  compareParameter( "mimcap_udc(Generic)" compareCAPUM)

  CAP_lvsTol = 0
  mergeParallel( "mimcap_woum_sin_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_rf(Generic)" compareCAP )

  mergeParallel( "mimcap_woum_sin_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_sin_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_woum_udc_rf(Generic)" merge parallelCAP )
  compareParameter( "mimcap_woum_udc_rf(Generic)" compareCAP )
  
  mergeParallel( "mimcap_sin_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_3t(Generic)" compareCAP)

  mergeParallel( "mimcap_sin_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_sin_udc_3t(Generic)" compareCAP)
  
  mergeParallel( "mimcap_udc_3t(Generic)" merge parallelCAP )
  compareParameter( "mimcap_udc_3t(Generic)" compareCAP)


  PAD_lvsTol = 0

  mergeParallel( "lowcpad(Generic)" merge parallelPAD )
  compareParameter( "lowcpad(Generic)" comparePAD )
  mergeParallel( "lowcpad_d0(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d0(Generic)" comparePAD )
  mergeParallel( "lowcpad_d15(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d15(Generic)" comparePAD )
  mergeParallel( "lowcpad_d23(Generic)" merge parallelPAD )
  compareParameter( "lowcpad_d23(Generic)" comparePAD )
  
  rfcapL_lvsTol = 1e-9
  rfcapW_lvsTol = 1e-9
  rfcapG_lvsTol = 1e-9
  rfcapB_lvsTol = 1e-9

  mergeParallel( "moscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf_hvt_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf_hvt_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf25_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf25_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf18_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf18_nw(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33(Generic)" compareRFCAP )
  mergeParallel( "moscap_rf33_nw(Generic)" merge parallelRFCAP )
  compareParameter( "moscap_rf33_nw(Generic)" compareRFCAP )

  mergeParallel( "pmoscap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf18(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf18(Generic)" compareRFCAP )
  mergeParallel( "pmoscap_rf25(Generic)" merge parallelRFCAP )
  compareParameter( "pmoscap_rf25(Generic)" compareRFCAP )

  mergeParallel( "lincap(Generic)" merge parallelLINCAP )
  compareParameter( "lincap(Generic)" compareLINCAP )
  mergeParallel( "lincap_25(Generic)" merge parallelLINCAP )
  compareParameter( "lincap_25(Generic)" compareLINCAP )
  mergeParallel( "lincap_rf(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf(Generic)" compareRFCAP )
  mergeParallel( "lincap_rf_25(Generic)" merge parallelRFCAP )
  compareParameter( "lincap_rf_25(Generic)" compareRFCAP )

  VAR_lvsTol = 1e-9
  MOSVAR_lvsTol = 1e-9
  mergeParallel( "xjvar(Generic)" merge parallelVAR )
  compareParameter( "xjvar(Generic)" compareVAR)
  mergeParallel( "xjvar_nw(Generic)" merge parallelVAR )
  compareParameter( "xjvar_nw(Generic)" compareVAR)
  
  mergeParallel( "sbd_rf(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf(Generic)" compareSBD)
  mergeParallel( "sbd_rf_nw(Generic)" merge parallelSBD )
  compareParameter( "sbd_rf_nw(Generic)" compareSBD)

  IND_lvsTol = 0
  IND_wTol = 0.05 

  mergeParallel( "spiral_std_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_z(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_z(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_z(Generic)" compareIND )
  
  mergeParallel( "spiral_std_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mza_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mza_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mza_a(Generic)" compareIND )

  mergeParallel( "spiral_std_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_std_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_mu_a(Generic)" compareIND )
  mergeParallel( "spiral_sym_ct_mu_a(Generic)" merge parallelIND )
  compareParameter( "spiral_sym_ct_mu_a(Generic)" compareIND ) 

; w/o spacing   
  mergeParallel( "spiral_std_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_std_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_mz_x(Generic)" compareIND1 )
  mergeParallel( "spiral_sym_ct_mz_x(Generic)" merge parallelIND1 )
  compareParameter( "spiral_sym_ct_mz_x(Generic)" compareIND1 )

  MOM_B_lvsTol = 1e-09
  MOM_lvsTol = 1e-09
  mergeParallel( "crtmom(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom(Generic)" compareMOM)
  compareParameter( "crtmom_rf(Generic)" compareMOM)
  compareParameter( "crtmom_mx(Generic)" compareMOMmx)


  mergeParallel( "crtmom_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_rf_RT(Generic)" merge parallelMOM)
  mergeParallel( "crtmom_mx_RT(Generic)" merge parallelMOMmx)
  compareParameter( "crtmom_RT(Generic)" compareMOM)
  compareParameter( "crtmom_rf_RT(Generic)" compareMOM)
  compareParameter( "crtmom_mx_RT(Generic)" compareMOMmx)


rfdioL_lvsTol = 1e-9
rfdioW_lvsTol = 1e-9

  mergeParallel( "ndio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "ndio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "ndio_hia_rf(Generic)" compareRFDIO )
  mergeParallel( "pdio_hia_rf(Generic)" merge parallelRFDIO )
  mergeSeries( "pdio_hia_rf(Generic)" merge seriesRFDIO )
  compareParameter( "pdio_hia_rf(Generic)" compareRFDIO )
  
resL_lvsTol = 1e-9
resW_lvsTol = 1e-9

  
  mergeParallel( "rm1w(Generic)" merge parallelRES )
  mergeSeries( "rm1w(Generic)" merge seriesRES )
  compareParameter( "rm1w(Generic)" compareRES )
  
  mergeParallel( "rmxw(Generic)" merge parallelRES )
  mergeSeries( "rmxw(Generic)" merge seriesRES )
  compareParameter( "rmxw(Generic)" compareRES )
  
  mergeParallel( "rmzw(Generic)" merge parallelRES )
  mergeSeries( "rmzw(Generic)" merge seriesRES )
  compareParameter( "rmzw(Generic)" compareRES )

  mergeParallel( "rm1(Generic)" merge parallelRES )
  mergeSeries( "rm1(Generic)" merge seriesRES )
  compareParameter( "rm1(Generic)" compareRES )

  mergeParallel( "rm2(Generic)" merge parallelRES )
  mergeSeries( "rm2(Generic)" merge seriesRES )
  compareParameter( "rm2(Generic)" compareRES )

  mergeParallel( "rm3(Generic)" merge parallelRES )
  mergeSeries( "rm3(Generic)" merge seriesRES )
  compareParameter( "rm3(Generic)" compareRES )

  mergeParallel( "rm4(Generic)" merge parallelRES )
  mergeSeries( "rm4(Generic)" merge seriesRES )
  compareParameter( "rm4(Generic)" compareRES )

  mergeParallel( "rm5(Generic)" merge parallelRES )
  mergeSeries( "rm5(Generic)" merge seriesRES )
  compareParameter( "rm5(Generic)" compareRES )

  mergeParallel( "rm6(Generic)" merge parallelRES )
  mergeSeries( "rm6(Generic)" merge seriesRES )
  compareParameter( "rm6(Generic)" compareRES )

  mergeParallel( "rm7(Generic)" merge parallelRES )
  mergeSeries( "rm7(Generic)" merge seriesRES )
  compareParameter( "rm7(Generic)" compareRES )

  mergeParallel( "rm8(Generic)" merge parallelRES )
  mergeSeries( "rm8(Generic)" merge seriesRES )
  compareParameter( "rm8(Generic)" compareRES )

  mergeParallel( "rm9(Generic)" merge parallelRES )
  mergeSeries( "rm9(Generic)" merge seriesRES )
  compareParameter( "rm9(Generic)" compareRES )

  mergeParallel( "rm10(Generic)" merge parallelRES )
  mergeSeries( "rm10(Generic)" merge seriesRES )
  compareParameter( "rm10(Generic)" compareRES )

  mergeParallel( "rm11(Generic)" merge parallelRES )
  mergeSeries( "rm11(Generic)" merge seriesRES )
  compareParameter( "rm11(Generic)" compareRES )

  mergeParallel( "rmt(Generic)" merge parallelRES )
  mergeSeries( "rmt(Generic)" merge seriesRES )
  compareParameter( "rmt(Generic)" compareRES )

  mergeParallel( "rppolywo(Generic)" merge parallelRES )
  mergeSeries( "rppolywo(Generic)" merge seriesRES )
  compareParameter( "rppolywo(Generic)" compareRES )

  mergeParallel( "rnpolywo(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo(Generic)" merge seriesRES )
  compareParameter( "rnpolywo(Generic)" compareRES )

  mergeParallel( "rppoly(Generic)" merge parallelRES )
  mergeSeries( "rppoly(Generic)" merge seriesRES )
  compareParameter( "rppoly(Generic)" compareRES )

  mergeParallel( "rppolyl(Generic)" merge parallelRES )
  mergeSeries( "rppolyl(Generic)" merge seriesRES )
  compareParameter( "rppolyl(Generic)" compareRES )

  mergeParallel( "rppolys(Generic)" merge parallelRES )
  mergeSeries( "rppolys(Generic)" merge seriesRES )
  compareParameter( "rppolys(Generic)" compareRES )

  mergeParallel( "rnpoly(Generic)" merge parallelRES )
  mergeSeries( "rnpoly(Generic)" merge seriesRES )
  compareParameter( "rnpoly(Generic)" compareRES )

  mergeParallel( "rnpolyl(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl(Generic)" merge seriesRES )
  compareParameter( "rnpolyl(Generic)" compareRES )

  mergeParallel( "rnpolys(Generic)" merge parallelRES )
  mergeSeries( "rnpolys(Generic)" merge seriesRES )
  compareParameter( "rnpolys(Generic)" compareRES )

  mergeParallel( "rpodwo(Generic)" merge parallelRES )
  mergeSeries( "rpodwo(Generic)" merge seriesRES )
  compareParameter( "rpodwo(Generic)" compareRES )

  mergeParallel( "rnodwo(Generic)" merge parallelRES )
  mergeSeries( "rnodwo(Generic)" merge seriesRES )
  compareParameter( "rnodwo(Generic)" compareRES )

  mergeParallel( "rpod(Generic)" merge parallelRES )
  mergeSeries( "rpod(Generic)" merge seriesRES )
  compareParameter( "rpod(Generic)" compareRES )

  mergeParallel( "rpodl(Generic)" merge parallelRES )
  mergeSeries( "rpodl(Generic)" merge seriesRES )
  compareParameter( "rpodl(Generic)" compareRES )

  mergeParallel( "rpods(Generic)" merge parallelRES )
  mergeSeries( "rpods(Generic)" merge seriesRES )
  compareParameter( "rpods(Generic)" compareRES )

  mergeParallel( "rnod(Generic)" merge parallelRES )
  mergeSeries( "rnod(Generic)" merge seriesRES )
  compareParameter( "rnod(Generic)" compareRES )


  mergeParallel( "rnodl(Generic)" merge parallelRES )
  mergeSeries( "rnodl(Generic)" merge seriesRES )
  compareParameter( "rnodl(Generic)" compareRES )

  mergeParallel( "rnods(Generic)" merge parallelRES )
  mergeSeries( "rnods(Generic)" merge seriesRES )
  compareParameter( "rnods(Generic)" compareRES )

  mergeParallel( "rnwod(Generic)" merge parallelRES )
  mergeSeries( "rnwod(Generic)" merge seriesRES )
  compareParameter( "rnwod(Generic)" compareRES )

  mergeParallel( "rnwsti(Generic)" merge parallelRES )
  mergeSeries( "rnwsti(Generic)" merge seriesRES )
  compareParameter( "rnwsti(Generic)" compareRES )

  mergeParallel( "rpodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rpodwo_m(Generic)" compareRESR )

  mergeParallel( "rnodwo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodwo_m(Generic)" merge seriesRESR )
  compareParameter( "rnodwo_m(Generic)" compareRESR )

  mergeParallel( "rnwod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwod_m(Generic)" merge seriesRESR )
  compareParameter( "rnwod_m(Generic)" compareRESR )

  mergeParallel( "rnwsti_m(Generic)" merge parallelRESR )
  mergeSeries( "rnwsti_m(Generic)" merge seriesRESR )
  compareParameter( "rnwsti_m(Generic)" compareRESR )

  mergeParallel( "rpod_m(Generic)" merge parallelRESR )
  mergeSeries( "rpod_m(Generic)" merge seriesRESR )
  compareParameter( "rpod_m(Generic)" compareRESR )

  mergeParallel( "rpodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rpodl_m(Generic)" merge seriesRESR )
  compareParameter( "rpodl_m(Generic)" compareRESR )

  mergeParallel( "rpods_m(Generic)" merge parallelRESR )
  mergeSeries( "rpods_m(Generic)" merge seriesRESR )
  compareParameter( "rpods_m(Generic)" compareRESR )

  mergeParallel( "rnod_m(Generic)" merge parallelRESR )
  mergeSeries( "rnod_m(Generic)" merge seriesRESR )
  compareParameter( "rnod_m(Generic)" compareRESR )

  mergeParallel( "rnodl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnodl_m(Generic)" merge seriesRESR )
  compareParameter( "rnodl_m(Generic)" compareRESR )

  mergeParallel( "rnods_m(Generic)" merge parallelRESR )
  mergeSeries( "rnods_m(Generic)" merge seriesRESR )
  compareParameter( "rnods_m(Generic)" compareRESR )

  mergeParallel( "rnpoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpoly_m(Generic)" merge seriesRESR )
  compareParameter( "rnpoly_m(Generic)" compareRESR )

  mergeParallel( "rnpolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolys_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolys_m(Generic)" compareRESR )

  mergeParallel( "rnpolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolyl_m(Generic)" compareRESR )

  mergeParallel( "rppoly_m(Generic)" merge parallelRESR )
  mergeSeries( "rppoly_m(Generic)" merge seriesRESR )
  compareParameter( "rppoly_m(Generic)" compareRESR )

  mergeParallel( "rppolys_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolys_m(Generic)" merge seriesRESR )
  compareParameter( "rppolys_m(Generic)" compareRESR )

  mergeParallel( "rppolyl_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolyl_m(Generic)" merge seriesRESR )
  compareParameter( "rppolyl_m(Generic)" compareRESR )

  MOSCAP_lvsTol = 1e-9
  mergeParallel( "nmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap(Generic)" compareMOSCAP )
  
  mergeParallel( "nmoscap_od1t(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_od1t(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_lpg(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_lpg(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_25(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_25(Generic)" compareMOSCAP )

  mergeParallel( "nmoscap_33(Generic)" merge parallelMOSCAP )
  compareParameter( "nmoscap_33(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap(Generic)" compareMOSCAP )

  mergeParallel( "pmoscap_18(Generic)" merge parallelMOSCAP )
  compareParameter( "pmoscap_18(Generic)" compareMOSCAP )

  mergeParallel( "rppolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rppolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rppolywo_m(Generic)" compareRESR )

  mergeParallel( "rnpolywo_m(Generic)" merge parallelRESR )
  mergeSeries( "rnpolywo_m(Generic)" merge seriesRESR )
  compareParameter( "rnpolywo_m(Generic)" compareRESR )

  mergeParallel( "rppoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rppoly_dis(Generic)" merge seriesRES )
  compareParameter( "rppoly_dis(Generic)" compareRES )

  mergeParallel( "rppolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rppolyl_dis(Generic)" compareRES )

  mergeParallel( "rppolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolys_dis(Generic)" merge seriesRES )
  compareParameter( "rppolys_dis(Generic)" compareRES )

  mergeParallel( "rppolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rppolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rppolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpolywo_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolywo_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolywo_dis(Generic)" compareRES )

  mergeParallel( "rnpoly_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpoly_dis(Generic)" merge seriesRES )
  compareParameter( "rnpoly_dis(Generic)" compareRES )

  mergeParallel( "rnpolyl_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolyl_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolyl_dis(Generic)" compareRES )

  mergeParallel( "rnpolys_dis(Generic)" merge parallelRES )
  mergeSeries( "rnpolys_dis(Generic)" merge seriesRES )
  compareParameter( "rnpolys_dis(Generic)" compareRES )

  mergeParallel( "rppoly_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppoly_rf(Generic)" merge seriesRES )
  compareParameter( "rppoly_rf(Generic)" compareRFRES )

  mergeParallel( "rppolyl_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolyl_rf(Generic)" merge seriesRES )
  compareParameter( "rppolyl_rf(Generic)" compareRFRES )

  mergeParallel( "rppolys_rf(Generic)" merge parallelRFRES )
;  mergeSeries( "rppolys_rf(Generic)" merge seriesRES )
  compareParameter( "rppolys_rf(Generic)" compareRFRES )

  mergeParallel( "rppolywo_rf(Generic)" merge parallelRFRES)
;  mergeSeries( "rppolywo_rf(Generic)" merge seriesRES)
  compareParameter( "rppolywo_rf(Generic)" compareRFRES)

  RFBJT_lvsTol = 1e-9
  mergeParallel( "lvbjt_npn_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_npn_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_npn_hvt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_svt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_svt(Generic)" compareRFBJT)
  mergeParallel( "lvbjt_pnp_hvt(Generic)" merge parallelRFBJT)
  compareParameter( "lvbjt_pnp_hvt(Generic)" compareRFBJT)
  
  
  tlsD_lvsTol = 1e-9
  tlsW_lvsTol = 1e-9
  tlsM_lvsTol = 0
;  mergeParallel( "m6m1s(Generic)" merge parallelTLS )
;  mergeParallel( "m5m1s(Generic)" merge parallelTLS )
;  compareParameter( "m6m1s(Generic)" compareTLS )
;  compareParameter( "m5m1s(Generic)" compareTLS )

  tlW_lvsTol = 1e-9
  tlM_lvsTol = 0

;  mergeParallel( "m6m1(Generic)" merge parallelTL )
;  mergeParallel( "m5m1(Generic)" merge parallelTL )
;  compareParameter( "m6m1(Generic)" compareTL )
;  compareParameter( "m5m1(Generic)" compareTL )
  BJT_lvsTol = 1e-9
  filter( "X" )
;  filterReduceStatistics()
  transferProperty( MOS		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( LDD		"mismatchflag" "sigma" "scale" "sd" )         
  transferProperty( DIO		"l" "w" )         
  transferProperty( BJT		"region" )         
  ;; transfer property
  ;; For RF NMOS

  transferProperty( "nmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_nodnw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_na18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_nodnwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )  
  transferProperty( "nmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_nodnw(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF 6T NMOS
  transferProperty( "nmos_rf_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_hvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_lvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_mlvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_ilvt_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_18_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25ud18_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_25od33_6t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "nmos_rf_33_6t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )

  ;; For RF PMOS
  transferProperty( "pmos_rf(Generic)" 			"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwod33(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nwud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" ) 
  transferProperty( "pmos_rf_25_nwud18(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF 5T PMOS
  transferProperty( "pmos_rf_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_nw_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_5t(Generic)"	 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_hvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_lvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_mlvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_ilvt_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25ud18_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_25od33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_5t(Generic)" 		"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  transferProperty( "pmos_rf_33_nw_5t(Generic)" 	"mismatchflag" "sigma" "scale" "sca" "scb" "scc" )
  
  ;; For RF others
  transferProperty( "mimcap_um_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_rf(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_um_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_sin_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_woum_udc_rf(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_udc_3t(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "mimcap_sin_udc_3t(Generic)" 	"mismatchflag" "sigma" )
  transferProperty( "moscap_rf(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf_hvt_nw(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf25_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf18_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "moscap_rf33_nw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "lincap(Generic)" 			"mismatchflag" "sigma" )
  transferProperty( "lincap_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf(Generic)"		"mismatchflag" "sigma" )
  transferProperty( "lincap_rf_25(Generic)" 		"mismatchflag" "sigma" )
  transferProperty( "spiral_std_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_z(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_z(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mz_x(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mz_x(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mza_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_std_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_mu_a(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "spiral_sym_ct_mu_a(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_rf_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "crtmom_mx_RT(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1w(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmxw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmzw(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm1(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm2(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm3(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm4(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm5(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm6(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm7(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm8(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm9(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rm10(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rmt(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl(Generic)"	 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodwo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnwsti_m(Generic)"		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rpods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnod_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnodl_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnods_m(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap(Generic)" 		"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_od1t(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_lpg(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_18(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_25(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "nmoscap_33(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_m(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolywo_dis(Generic)"	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpoly_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolyl_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rnpolys_dis(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppoly_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolyl_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolys_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "rppolywo_rf(Generic)" 	"mismatchflag" "sigma" "scale" )
  transferProperty( "ndio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pdio_hia_rf(Generic)" 	"hiaflag" "sigma" "scale" )
  transferProperty( "pmoscap(Generic)" 		"scale" )
  transferProperty( "pmoscap_18(Generic)"	"scale" )
  transferProperty( "pmoscap_rf(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf18(Generic)" 	"scale" )
  transferProperty( "pmoscap_rf25(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_npn_hvt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_svt(Generic)" 	"scale" )
  transferProperty( "lvbjt_pnp_hvt(Generic)" 	"scale" )

) ; avCompareRules complete
