3289,3746d3288
< ##Add by zhongkai
< def generate_tgate_dn(laygen, objectname_pfix,
<                  placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m1m2_pin, routing_grid_m2m3_pin,
<                  devname_nmos_boundary, devname_nmos_body, devname_nmos_space,
<                  devname_pmos_boundary, devname_pmos_body, devname_pmos_space,
<                  m=1, n=1, m_in=3, m_out=3, origin=np.array([0,0]), create_pin=False):
<     pg = placement_grid
<     rg_m1m2 = routing_grid_m1m2
<     rg_m2m3 = routing_grid_m2m3
<     rg_m1m2_pin = routing_grid_m1m2_pin
<     rg_m2m3_pin = routing_grid_m2m3_pin
< 
<     m = max(1, int(m / 2))  # passgate size, using nf=2 devices
<     n = max(1, int(n / 2))  # pulldown size, using nf=2 devices
< 
<     if m_in > m/2:        
<         m_in = int(m/2)            #input paths
< 
<     if m_out > m/2:
<         m_out = int(m/2)           #output_paths
< 
<     # placement
<     in_space = laygen.place("I"+objectname_pfix+'NDMY', devname_nmos_space, pg, shape=np.array([2, 1]), xy=origin)
<     in0 = laygen.relplace("I" + objectname_pfix + 'N0', devname_nmos_boundary, pg, in_space.name)
<     in1 = laygen.relplace("I"+objectname_pfix+'N1', devname_nmos_body, pg, in0.name, shape=np.array([m, 1]))
<     in2 = laygen.relplace("I"+objectname_pfix+'N2', devname_nmos_boundary, pg, in1.name, shape=np.array([2, 1]))
<     in3 = laygen.relplace("I"+objectname_pfix+'N3', devname_nmos_body, pg, in2.name, shape=np.array([n, 1]))
<     in4 = laygen.relplace("I"+objectname_pfix+'N4', devname_nmos_boundary, pg, in3.name)
< 
<     ip_space = laygen.relplace("I"+objectname_pfix+'PDMY', devname_pmos_space, pg, in_space.name, direction='top', transform='MX', shape=np.array([2, 1]))
<     ip0 = laygen.relplace("I"+objectname_pfix+'P0', devname_pmos_boundary, pg, ip_space.name, transform='MX')
<     ip1 = laygen.relplace("I"+objectname_pfix+'P1', devname_pmos_body, pg, ip0.name, transform='MX', shape=np.array([m, 1]))
<     ip2 = laygen.relplace("I"+objectname_pfix+'P2', devname_pmos_boundary, pg, ip1.name, transform='MX')
<     ip3 = laygen.relplace("I"+objectname_pfix+'P3', 'pmos4_fast_space', pg, ip2.name, shape=np.array([n+4,1]), transform='MX')
< 
<     # route
<     #to vss
<     for i in range(n):
<         laygen.route(None, laygen.layers['metal'][1], xy0=np.array([0, 0]), xy1=np.array([0, -1]), gridname0=rg_m1m2,
<                     refinstname0=in3.name, refpinname0='S0', refinstindex0=np.array([i, 0]),
<                     refinstname1=in3.name, refpinname1='S0', refinstindex1=np.array([i, 0]))
<         laygen.via(None, np.array([0, 0]), refinstname=in3.name, gridname=rg_m1m2, refinstindex=np.array([i, 0]))
<     laygen.route(None, laygen.layers['metal'][1], xy0=np.array([0, 0]), xy1=np.array([0, -1]), gridname0=rg_m1m2,
<                 refinstname0=in3.name, refpinname0='S0', refinstindex0=np.array([n, 0]),
<                 refinstname1=in3.name, refpinname1='S0', refinstindex1=np.array([n, 0]))
<     laygen.via(None, np.array([0, 0]), refinstname=in3.name, gridname=rg_m1m2, refinstindex=np.array([n, 0]))
< 
<     
<     # en, enb
<     for i in range(m):
<         laygen.via(None, np.array([0, 0]), refinstname=in1.name, refpinname='G0', refinstindex=np.array([i, 0]),
<                    gridname=rg_m1m2)
<         laygen.via(None, np.array([0, 0]), refinstname=ip1.name, refpinname='G0', refinstindex=np.array([i, 0]),
<                    gridname=rg_m1m2)
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-3, 0]), xy1=np.array([0, 0]), gridname0=rg_m1m2,
<                  refinstname0=in1.name, refpinname0='G0', refinstindex0=np.array([0, 0]),
<                  refinstname1=in1.name, refpinname1='G0', refinstindex1=np.array([m-1, 0]))
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-3, 0]), xy1=np.array([0, 0]), gridname0=rg_m1m2,
<                  refinstname0=ip1.name, refpinname0='G0', refinstindex0=np.array([0, 0]),
<                  refinstname1=ip1.name, refpinname1='G0', refinstindex1=np.array([m-1, 0]))
<     ren0 = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([-3, 0]), xy1=np.array([-3, 2]), gridname0=rg_m2m3,
<                        refinstname0=in1.name, refpinname0='G0', refinstname1=in1.name, refpinname1='G0')
<     laygen.via(None, np.array([-3, 0]), refinstname=in1.name, refpinname='G0', gridname=rg_m2m3)
<     renb0 = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([-2, 0]), xy1=np.array([-2, 2]), gridname0=rg_m2m3,
<                        refinstname0=ip1.name, refpinname0='G0', refinstname1=ip1.name, refpinname1='G0')
<     laygen.via(None, np.array([-2, 0]), refinstname=ip1.name, refpinname='G0', gridname=rg_m2m3)
< 
<     # gate for pull down
<     in3_g0_xy = laygen.get_inst_pin_coord(in3.name, 'G0', rg_m2m3)    
<     ip1_g0_xy = laygen.get_inst_pin_coord(ip1.name, 'G0', rg_m2m3)
<     laygen.route_vh(laygen.layers['metal'][1], laygen.layers['metal'][2], in3_g0_xy[0], ip1_g0_xy[0], rg_m1m2)
< 
<     for i in range(n):
<         laygen.via(None, np.array([0, 0]), refinstname=in3.name, refpinname='G0', gridname=rg_m1m2, refinstindex=np.array([i, 0]))
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=np.array([0, 0]), gridname0=rg_m1m2,
<                  refinstname0=in3.name, refpinname0='G0', refinstindex0=np.array([0, 0]),
<                  refinstname1=in3.name, refpinname1='G0', refinstindex1=np.array([n-1, 0]))
<     
<     #input
<     #input wire
<     for i in range(m_in):
<         rix = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([0, 0]), xy1=np.array([0, 0]), gridname0=rg_m2m3,
<                        refinstname0=in1.name, refpinname0='S0', refinstindex0=np.array([i, 0]),
<                        refinstname1=ip1.name, refpinname1='S0', refinstindex1=np.array([i, 0]))
<         laygen.via(None, np.array([0, 0]), refinstname=in1.name, refpinname='S0', refinstindex=np.array([i, 0]), gridname=rg_m2m3)
<         laygen.via(None, np.array([0, 0]), refinstname=ip1.name, refpinname='S0', refinstindex=np.array([i, 0]), gridname=rg_m2m3)
< 
<         if create_pin == True:
<             laygen.pin_from_rect(gridname=rg_m2m3, name='I_'+str(i), layer=laygen.layers['pin'][3], rect=rix, netname='I') 
< 
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1, 0]), xy1=np.array([0, 0]), gridname0=rg_m2m3,
<                  refinstname0=in1.name, refpinname0='S0', refinstindex0=np.array([0, 0]),
<                  refinstname1=in1.name, refpinname1='S1', refinstindex1=np.array([m-1, 0]))
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1, 0]), xy1=np.array([0, 0]), gridname0=rg_m2m3,
<                  refinstname0=ip1.name, refpinname0='S0', refinstindex0=np.array([0, 0]),
<                  refinstname1=ip1.name, refpinname1='S1', refinstindex1=np.array([m-1, 0]))
<     #connecting source
<     for i in range(m):
<         laygen.via(None, np.array([0, 0]), refinstname=in1.name, refpinname='S0', refinstindex=np.array([i, 0]), gridname=rg_m1m2)
<         laygen.via(None, np.array([0, 0]), refinstname=ip1.name, refpinname='S0', refinstindex=np.array([i, 0]), gridname=rg_m1m2)
<     laygen.via(None, np.array([0, 0]), refinstname=in1.name, refpinname='S1', refinstindex=np.array([m-1, 0]), gridname=rg_m1m2)
<     laygen.via(None, np.array([0, 0]), refinstname=ip1.name, refpinname='S1', refinstindex=np.array([m-1, 0]), gridname=rg_m1m2)
< 
<     
<     #output
<     #output wire
<     for i in range(m_out):
<         rox = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([0, 1]), xy1=np.array([0, 1]), gridname0=rg_m2m3,
<                        refinstname0=in1.name, refpinname0='D0', refinstindex0=np.array([m-1-i, 0]),
<                        refinstname1=ip1.name, refpinname1='D0', refinstindex1=np.array([m-1-i, 0]))
<         laygen.via(None, np.array([0, 1]), refinstname=in1.name, refpinname='D0', refinstindex=np.array([m-1-i, 0]), gridname=rg_m2m3)
<         laygen.via(None, np.array([0, 1]), refinstname=ip1.name, refpinname='D0', refinstindex=np.array([m-1-i, 0]), gridname=rg_m2m3)
<         if create_pin == True:
<             laygen.pin_from_rect(gridname=rg_m2m3, name='O_'+str(i), layer=laygen.layers['pin'][3], rect=rox, netname='O') 
< 
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1, 1]), xy1=np.array([0, 1]), gridname0=rg_m2m3,
<                  refinstname0=in1.name, refpinname0='S0', refinstindex0=np.array([0, 0]),
<                  refinstname1=in1.name, refpinname1='S1', refinstindex1=np.array([m-1, 0]))
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1, 1]), xy1=np.array([0, 1]), gridname0=rg_m2m3,
<                  refinstname0=ip1.name, refpinname0='S0', refinstindex0=np.array([0, 0]),
<                  refinstname1=ip1.name, refpinname1='S1', refinstindex1=np.array([m-1, 0]))
<     #connection for in3
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1, 1]), xy1=np.array([0, 1]), gridname0=rg_m2m3,
<                  refinstname0=in1.name, refpinname0='S0', refinstindex0=np.array([m-1, 0]),
<                  refinstname1=in3.name, refpinname1='D0', refinstindex1=np.array([n-1, 0]))
<     #connecting drain
<     for i in range(m):
<         laygen.via(None, np.array([0, 1]), refinstname=in1.name, refpinname='D0', refinstindex=np.array([i, 0]),
<                    gridname=rg_m1m2)
<         laygen.via(None, np.array([0, 1]), refinstname=ip1.name, refpinname='D0', refinstindex=np.array([i, 0]),
<                    gridname=rg_m1m2)
<     
<     #connection for in3
<     for i in range(n):
<         laygen.via(None, np.array([0, 1]), refinstname=in3.name, refpinname='D0', refinstindex=np.array([i, 0]), gridname=rg_m1m2)
<     
<     # power and groud rail
<     xy = laygen.get_template_size(ip3.cellname, rg_m1m2) * np.array([1, 0])
<     rvdd = laygen.route("R"+objectname_pfix+"VDD0", laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=xy, gridname0=rg_m1m2,
<                         refinstname0=ip_space.name, refinstname1=ip3.name, refinstindex1=np.array([n+3, 0]))
<     rvss = laygen.route("R"+objectname_pfix+"VSS0", laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=xy, gridname0=rg_m1m2,
<                         refinstname0=in_space.name, refinstname1=in4.name)
<     # pin
<     if create_pin == True:
<         create_io_pin(laygen, layer=laygen.layers['pin'][3], gridname=rg_m2m3_pin,
<                       pinname_list = ['EN', 'ENB'], rect_list=[ren0, renb0])
<         create_power_pin(laygen, layer=laygen.layers['pin'][2], gridname=rg_m1m2, rect_vdd=rvdd, rect_vss=rvss)
< 
< def generate_cap_sw(laygen, objectname_pfix,
<                  placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m1m2_pin, routing_grid_m2m3_pin,
<                  devname_nmos_boundary, devname_nmos_body, devname_nmos_space,
<                  devname_pmos_boundary, devname_pmos_body, devname_pmos_space,
<                  m=1, origin=np.array([0,0]), create_pin=False):
<     #generate an nmos type switch
<     pg = placement_grid
<     rg_m1m2 = routing_grid_m1m2
<     rg_m2m3 = routing_grid_m2m3
<     rg_m1m2_pin = routing_grid_m1m2_pin
<     rg_m2m3_pin = routing_grid_m2m3_pin
< 
<     m = max(1, int(m / 2))  # using nf=2 devices
< 
<     # placement
<     in0 = laygen.place("I" + objectname_pfix + 'N0', devname_nmos_boundary, pg, xy=origin)
<     in1 = laygen.relplace("I"+objectname_pfix+'N1', devname_nmos_body, pg, in0.name, shape=np.array([m, 1]))
<     in2 = laygen.relplace("I"+objectname_pfix+'N2', devname_nmos_boundary, pg, in1.name)
<     ip0 = laygen.relplace("I"+objectname_pfix+'P0', 'pmos4_fast_space', pg, in0.name, direction='top', transform='MX')
<     ip1 = laygen.relplace("I"+objectname_pfix+'P2', 'pmos4_fast_space', pg, ip0.name, transform='MX', shape=np.array([m*2, 1]))
<     ip2 = laygen.relplace("I"+objectname_pfix+'P3', 'pmos4_fast_space', pg, ip1.name, transform='MX')
< 
<     # route
<     # to ground
<     for i in range(m):
<         laygen.route(None, laygen.layers['metal'][1], xy0=np.array([0, 0]), xy1=np.array([0, -1]), gridname0=rg_m1m2,
<                     refinstname0=in1.name, refpinname0='S0', refinstindex0=np.array([i, 0]),
<                     refinstname1=in1.name, refpinname1='S0', refinstindex1=np.array([i, 0]))
<         laygen.via(None, np.array([0, 0]), refinstname=in1.name, gridname=rg_m1m2, refinstindex=np.array([i, 0]))
< 
<     laygen.route(None, laygen.layers['metal'][1], xy0=np.array([0, 0]), xy1=np.array([0, -1]), gridname0=rg_m1m2,
<                 refinstname0=in1.name, refpinname0='S1', refinstindex0=np.array([m-1, 0]),
<                 refinstname1=in1.name, refpinname1='S1', refinstindex1=np.array([m-1, 0]))
<     laygen.via(None, np.array([0, 0]), refinstname=in1.name, gridname=rg_m1m2, refinstindex=np.array([m, 0]))
< 
<     # en, enb
<     for i in range(m):
<         laygen.via(None, np.array([0, 0]), refinstname=in1.name, refpinname='G0', refinstindex=np.array([i, 0]),
<                    gridname=rg_m1m2)
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1, 0]), xy1=np.array([1, 0]), gridname0=rg_m1m2,
<                  refinstname0=in1.name, refpinname0='G0', refinstindex0=np.array([0, 0]),
<                  refinstname1=in1.name, refpinname1='G0', refinstindex1=np.array([m-1, 0]))
<     ren0 = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([-1, 0]), xy1=np.array([-1, 2]), gridname0=rg_m2m3,
<                        refinstname0=in1.name, refpinname0='G0', refinstname1=in1.name, refpinname1='G0')
<     laygen.via(None, np.array([-1, 0]), refinstname=in1.name, refpinname='G0', gridname=rg_m2m3)
< 
<     
<     #output
<     laygen.route(None, laygen.layers['metal'][2], xy0=np.array([-1+1, 1]), xy1=np.array([0, 1]), gridname0=rg_m2m3,
<                  refinstname0=in1.name, refpinname0='S0', refinstindex0=np.array([0, 0]), endstyle0='extend',
<                  refinstname1=in1.name, refpinname1='S1', refinstindex1=np.array([m-1, 0]), endstyle1='extend')
<     for i in range(m):
<         laygen.via(None, np.array([0, 1]), refinstname=in1.name, refpinname='D0', refinstindex=np.array([i, 0]),
<                    gridname=rg_m1m2)
<     ro=[]
<     for i in range(m):
<         laygen.via(None, np.array([0, 1]), refinstname=in1.name, refpinname='D0', refinstindex=np.array([i, 0]), gridname=rg_m2m3)
<         ro0 = laygen.route(None, laygen.layers['metal'][3], xy0=np.array([0, -1]), xy1=np.array([0, 1]), gridname0=rg_m2m3,
<                        refinstname0=in1.name, refpinname0='D0', refinstindex0=np.array([i, 0]),
<                        refinstname1=in1.name, refpinname1='D0', refinstindex1=np.array([i, 0]))
<         ro.append(ro0)
< 
<     # power and groud rail
<     xy = laygen.get_template_size(in2.cellname, rg_m1m2) * np.array([1, 0])
<     rvdd = laygen.route("R"+objectname_pfix+"VDD0", laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=xy, gridname0=rg_m1m2,
<                         refinstname0=ip0.name, refinstname1=ip2.name)
<     rvss = laygen.route("R"+objectname_pfix+"VSS0", laygen.layers['metal'][2], xy0=np.array([0, 0]), xy1=xy, gridname0=rg_m1m2,
<                         refinstname0=in0.name, refinstname1=in2.name)
<     # pin
<     if create_pin == True:
<         ren0_pin_xy = laygen.get_rect_xy(ren0.name, rg_m3m4)
<         laygen.pin(name='EN', layer=laygen.layers['pin'][3], xy=ren0_pin_xy, gridname=rg_m3m4, netname='EN')
<         ro0_pin_xy = laygen.get_rect_xy(ro[0].name, rg_m3m4)
<         laygen.pin(name='VO', layer=laygen.layers['pin'][3], xy=ro0_pin_xy, gridname=rg_m3m4, netname='VO')
<         create_power_pin(laygen, layer=laygen.layers['pin'][2], gridname=rg_m1m2, rect_vdd=rvdd, rect_vss=rvss)
< 
< 
< def generate_latch_2ck_strstbh(laygen, objectname_pfix, placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m3m4,origin=np.array([0, 0]),
<                    m=4, pin_clk_y=3, pin_clkb_y=2, route_mem_y=4, route_rstm_y=5, pin_o_y=6, create_pin=False):
<     """generate D latch (complementary clock)"""
<     pg = placement_grid
<     rg_m1m2 = routing_grid_m1m2
<     rg_m2m3 = routing_grid_m2m3
<     rg_m3m4 = routing_grid_m3m4
< 
< 
<     # placement
<     i0 = laygen.place("I"+objectname_pfix + 'TINV0', "tinv_"+str(m)+"x", pg, xy=origin)
<     i2 = laygen.relplace("I"+objectname_pfix + 'TGAT0', "tgate_2x", pg, i0.name) #used minimum size
<     i3 = laygen.relplace("I"+objectname_pfix + 'ND1', "nand_2x", pg, i2.name) #used minimum size
<     i1 = laygen.relplace("I"+objectname_pfix + 'ND0', "nand_"+str(m)+"x", pg, i3.name)
< 
<     # internal pins
<     tinv0_i_xy = laygen.get_inst_pin_coord(i0.name, 'I', rg_m3m4)
<     tinv0_en_xy = laygen.get_inst_pin_coord(i0.name, 'EN', rg_m3m4)
<     tinv0_enb_xy = laygen.get_inst_pin_coord(i0.name, 'ENB', rg_m3m4)
<     tinv0_o_xy = laygen.get_inst_pin_coord(i0.name, 'O', rg_m3m4)
<     nd0_a_xy = laygen.get_inst_pin_coord(i1.name, 'A', rg_m3m4)
<     nd0_b_xy = laygen.get_inst_pin_coord(i1.name, 'B', rg_m3m4)
<     nd0_o_xy = laygen.get_inst_pin_coord(i1.name, 'O', rg_m3m4)
<     tgate0_i_xy = laygen.get_inst_pin_coord(i2.name, 'I', rg_m3m4)
<     tgate0_en_xy = laygen.get_inst_pin_coord(i2.name, 'EN', rg_m3m4)
<     tgate0_enb_xy = laygen.get_inst_pin_coord(i2.name, 'ENB', rg_m3m4)
<     tgate0_o_xy = laygen.get_inst_pin_coord(i2.name, 'O', rg_m3m4)
<     nd1_a_xy = laygen.get_inst_pin_coord(i3.name, 'A', rg_m3m4)
<     nd1_b_xy = laygen.get_inst_pin_coord(i3.name, 'B', rg_m3m4)
<     nd1_o_xy = laygen.get_inst_pin_coord(i3.name, 'O', rg_m3m4)
< 
< 
<     #clk
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], tinv0_en_xy[0], tgate0_enb_xy[0], pin_clk_y, rg_m3m4)
<     rclk0=laygen.route(None, laygen.layers['metal'][4], xy0=np.array([tinv0_en_xy[0][0], pin_clk_y]), xy1=np.array([tgate0_enb_xy[0][0], pin_clk_y]), gridname0=rg_m3m4)
< 
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], tinv0_enb_xy[0], tgate0_en_xy[0], pin_clkb_y, rg_m3m4)
<     rclkb0=laygen.route(None, laygen.layers['metal'][4], xy0=np.array([tinv0_enb_xy[0][0], pin_clkb_y]), xy1=np.array([tgate0_en_xy[0][0], pin_clkb_y]), gridname0=rg_m3m4)
< 
<     #storage node
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], np.array([tinv0_o_xy[0][0],route_mem_y]), np.array([tgate0_o_xy[0][0],route_mem_y]), route_mem_y, rg_m3m4)
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], np.array([tgate0_o_xy[0][0],route_mem_y]), np.array([nd0_a_xy[0][0],route_mem_y]), route_mem_y, rg_m3m4)
<     
<     #resetm node
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], np.array([nd1_o_xy[0][0],route_rstm_y]), np.array([tgate0_i_xy[0][0],route_rstm_y]), route_rstm_y, rg_m3m4)
<     
<     #nd0 output to nd1 input
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], np.array([nd0_o_xy[0][0],pin_o_y]), np.array([nd1_a_xy[0][0],pin_o_y]), pin_o_y, rg_m3m4)
<     ro0=laygen.route(None, laygen.layers['metal'][4], xy0=np.array([nd0_o_xy[0][0], pin_o_y]), xy1=np.array([nd1_a_xy[0][0], pin_o_y]), gridname0=rg_m3m4)
<     
<     #pin
<     if create_pin == True:
<         ri0_pin_xy=laygen.get_inst_pin_coord(name="I" + objectname_pfix + 'TINV0', pinname='I', gridname=rg_m3m4)
< 
<         laygen.pin(name='I', layer=laygen.layers['pin'][3], xy=ri0_pin_xy, gridname=rg_m3m4)
<         laygen.pin(name='CLK', layer=laygen.layers['pin'][4], xy=laygen.get_rect_xy(rclk0.name, rg_m3m4), gridname=rg_m3m4)
<         laygen.pin(name='CLKB', layer=laygen.layers['pin'][4], xy=laygen.get_rect_xy(rclkb0.name, rg_m3m4), gridname=rg_m3m4)
<         laygen.pin(name='STB', layer=laygen.layers['pin'][3], xy=nd0_b_xy, gridname=rg_m3m4)
<         laygen.pin(name='RSTB', layer=laygen.layers['pin'][3], xy=nd1_b_xy, gridname=rg_m3m4)
<         laygen.pin(name='O', layer=laygen.layers['pin'][4], xy=laygen.get_rect_xy(ro0.name, rg_m3m4), gridname=rg_m3m4)
< 
<         #power pin
<            
<         rvdd0_pin_xy = laygen.get_inst_pin_coord("I" + objectname_pfix + 'TINV0', 'VDD', rg_m2m3)
<         rvdd1_pin_xy = laygen.get_inst_pin_coord("I" + objectname_pfix + 'ND0', 'VDD', rg_m2m3)
<         rvss0_pin_xy = laygen.get_inst_pin_coord("I" + objectname_pfix + 'TINV0', 'VSS', rg_m2m3)
<         rvss1_pin_xy = laygen.get_inst_pin_coord("I" + objectname_pfix + 'ND0', 'VSS', rg_m2m3)
< 
<         laygen.pin(name='VDD', layer=laygen.layers['pin'][2], xy=np.vstack((rvdd0_pin_xy[0],rvdd1_pin_xy[1])), gridname=rg_m1m2)
<         laygen.pin(name='VSS', layer=laygen.layers['pin'][2], xy=np.vstack((rvss0_pin_xy[0],rvss1_pin_xy[1])), gridname=rg_m1m2)
< 
< 
< def generate_dff_strsth(laygen, objectname_pfix, placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m3m4,
<                  origin=np.array([0, 0]), m=4, create_pin=False):
<     pg = placement_grid
<     rg_m1m2 = routing_grid_m1m2
<     rg_m2m3 = routing_grid_m2m3
<     rg_m3m4 = routing_grid_m3m4
< 
<     # placement
<     i8 = laygen.place("I" + objectname_pfix + 'INV8', "inv_" + str(m) + "x", pg, xy=origin)  
<     i9 = laygen.relplace("I" + objectname_pfix + 'INV9', "inv_" + str(m) + "x", pg, i8.name) 
<     i10= laygen.relplace("I" + objectname_pfix + 'INV10', "inv_" + str(m) + "x", pg, i9.name) #stb
<     i11= laygen.relplace("I" + objectname_pfix + 'INV11', "inv_" + str(m) + "x", pg, i10.name) #rstb
<     org=origin+laygen.get_inst_xy('I'+objectname_pfix+'INV11', pg)+laygen.get_template_size(i10.cellname, pg)*np.array([1, 0])
<     generate_latch_2ck_strstbh(laygen, objectname_pfix+'LCH0', placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m3m4, 
<                        origin=org, m=m, pin_clk_y=3, pin_clkb_y=2, route_mem_y=4, route_rstm_y = 8, pin_o_y=5, create_pin=False)      ##These two lines use different position for clk and clkb
<     org=origin+laygen.get_inst_xy('I'+objectname_pfix+'LCH0ND0', pg)+\
<         laygen.get_template_size(laygen.get_inst('I'+objectname_pfix+'LCH0ND0').cellname, pg)*np.array([1, 0])
<     generate_latch_2ck_strstbh(laygen, objectname_pfix+'LCH1', placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m3m4,
<                        origin=org, m=m, pin_clk_y=2, pin_clkb_y=3, route_mem_y=4, route_rstm_y = 8, pin_o_y=5, create_pin=False)
<     
<     #inverter coordinates
<     i8_i_xy = laygen.get_inst_pin_coord(i8.name, 'I', rg_m3m4)
<     i8_o_xy = laygen.get_inst_pin_coord(i8.name, 'O', rg_m3m4)
<     i9_i_xy = laygen.get_inst_pin_coord(i9.name, 'I', rg_m3m4)
<     i9_o_xy = laygen.get_inst_pin_coord(i9.name, 'O', rg_m3m4)
<     i10_i_xy = laygen.get_inst_pin_coord(i10.name, 'I', rg_m3m4)
<     i10_o_xy = laygen.get_inst_pin_coord(i10.name, 'O', rg_m3m4)
<     i11_i_xy = laygen.get_inst_pin_coord(i11.name, 'I', rg_m3m4)
<     i11_o_xy = laygen.get_inst_pin_coord(i11.name, 'O', rg_m3m4)
<    
<         
<     #Latch coordinate
<     ilch0_i_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0TINV0', 'I', rg_m3m4)
<     ilch0_ck_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0TINV0', 'EN', rg_m3m4)
<     ilch0_ckb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0TINV0', 'ENB', rg_m3m4)
<     ilch0_stb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0ND0', 'B', rg_m3m4)  #set pin of latch 0
<     ilch0_rstb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0ND1', 'B', rg_m3m4) #reset pin of latch 0
<     ilch0_o_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0ND0', 'O', rg_m3m4)
< 
<     ilch1_i_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1TINV0', 'I', rg_m3m4)
<     ilch1_ck_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1TINV0', 'EN', rg_m3m4)
<     ilch1_ckb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1TINV0', 'ENB', rg_m3m4)
<     ilch1_stb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1ND0', 'B', rg_m3m4)   #set pin of latch 0
<     ilch1_rstb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1ND1', 'B', rg_m3m4)  #reset pin of latch 1
<     ilch1_o_xy = laygen.get_inst_pin_coord('I'+objectname_pfix + 'LCH1ND0', 'O', rg_m3m4)
<     
<     # iclkb
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i8_o_xy[0], i9_i_xy[0], 3, rg_m3m4)
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i9_i_xy[0], ilch1_ckb_xy[0], 3, rg_m3m4)
<     # iclk
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i9_o_xy[0], ilch1_ck_xy[0], 2, rg_m3m4)
<     # intermediate
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], ilch0_o_xy[0], ilch1_i_xy[0], 5, rg_m3m4)
<     # stb
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i10_o_xy[0], ilch0_stb_xy[0], 6, rg_m3m4)
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i10_o_xy[0], ilch1_stb_xy[0], 6, rg_m3m4)
<     # rstb
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i11_o_xy[0], ilch0_rstb_xy[0], 7, rg_m3m4)
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i11_o_xy[0], ilch1_rstb_xy[0], 7, rg_m3m4)
< 
<     
<     #pin
<     if create_pin == True:
<         laygen.pin(name='I', layer=laygen.layers['pin'][3], xy=ilch0_i_xy, gridname=rg_m3m4)
<         laygen.pin(name='CLK', layer=laygen.layers['pin'][3], xy=i8_i_xy, gridname=rg_m3m4)
<         laygen.pin(name='ST', layer=laygen.layers['pin'][3], xy=i10_i_xy, gridname=rg_m3m4)
<         laygen.pin(name='RST', layer=laygen.layers['pin'][3], xy=i11_i_xy, gridname=rg_m3m4)
<         laygen.pin(name='O', layer=laygen.layers['pin'][3], xy=ilch1_o_xy, gridname=rg_m3m4)
< 
<         #power pin
<         rvdd0_pin_xy = laygen.get_inst_pin_coord(i8.name, 'VDD', rg_m1m2)
<         rvdd1_pin_xy = laygen.get_inst_pin_coord("I" + objectname_pfix + 'LCH1ND0', 'VDD', rg_m1m2) #(fix this)
<         rvss0_pin_xy = laygen.get_inst_pin_coord(i8.name, 'VSS', rg_m1m2)
<         rvss1_pin_xy = laygen.get_inst_pin_coord("I" + objectname_pfix + 'LCH1ND0', 'VSS', rg_m1m2)
< 
<         laygen.pin(name='VDD', layer=laygen.layers['pin'][2], xy=np.vstack((rvdd0_pin_xy[0],rvdd1_pin_xy[1])), gridname=rg_m1m2)
<         laygen.pin(name='VSS', layer=laygen.layers['pin'][2], xy=np.vstack((rvss0_pin_xy[0],rvss1_pin_xy[1])), gridname=rg_m1m2)
< 
< 
< def generate_dff_strsth_ckb(laygen, objectname_pfix, placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m3m4,
<                  origin=np.array([0, 0]), m=4, create_pin=False):
<     pg = placement_grid
<     rg_m1m2 = routing_grid_m1m2
<     rg_m2m3 = routing_grid_m2m3
<     rg_m3m4 = routing_grid_m3m4
< 
<     # placement
<     i12 = laygen.place("I" + objectname_pfix + 'INV12', "inv_" + str(m) + "x", pg, xy=origin)
<     i8 = laygen.relplace("I" + objectname_pfix + 'INV8', "inv_" + str(m) + "x", pg, i12.name)  #clk buffers -- try to make sure the number is same with schematic
<     i9 = laygen.relplace("I" + objectname_pfix + 'INV9', "inv_" + str(m) + "x", pg, i8.name) #that is why it's not start from '0'
<     i10= laygen.relplace("I" + objectname_pfix + 'INV10', "inv_" + str(m) + "x", pg, i9.name) #stb
<     i11= laygen.relplace("I" + objectname_pfix + 'INV11', "inv_" + str(m) + "x", pg, i10.name) #rstb
<     org=origin+laygen.get_inst_xy('I'+objectname_pfix+'INV11', pg)+laygen.get_template_size(i10.cellname, pg)*np.array([1, 0])
<     generate_latch_2ck_strstbh(laygen, objectname_pfix+'LCH0', placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m3m4, #Can we return the object of it as before? -- Zhongkai
<                        origin=org, m=m, pin_clk_y=3, pin_clkb_y=2, route_mem_y=4, route_rstm_y = 8, pin_o_y=5, create_pin=False)      ##These two lines use different position for clk and clkb
<     org=origin+laygen.get_inst_xy('I'+objectname_pfix+'LCH0ND0', pg)+\
<         laygen.get_template_size(laygen.get_inst('I'+objectname_pfix+'LCH0ND0').cellname, pg)*np.array([1, 0])
<     generate_latch_2ck_strstbh(laygen, objectname_pfix+'LCH1', placement_grid, routing_grid_m1m2, routing_grid_m2m3, routing_grid_m3m4,
<                        origin=org, m=m, pin_clk_y=2, pin_clkb_y=3, route_mem_y=4, route_rstm_y = 8, pin_o_y=5, create_pin=False)
<     
<     #inverter coordinates
<     i12_i_xy = laygen.get_inst_pin_coord(i12.name, 'I', rg_m3m4)
<     i12_o_xy = laygen.get_inst_pin_coord(i12.name, 'O', rg_m3m4)
<     i8_i_xy = laygen.get_inst_pin_coord(i8.name, 'I', rg_m3m4)
<     i8_o_xy = laygen.get_inst_pin_coord(i8.name, 'O', rg_m3m4)
<     i9_i_xy = laygen.get_inst_pin_coord(i9.name, 'I', rg_m3m4)
<     i9_o_xy = laygen.get_inst_pin_coord(i9.name, 'O', rg_m3m4)
<     i10_i_xy = laygen.get_inst_pin_coord(i10.name, 'I', rg_m3m4)
<     i10_o_xy = laygen.get_inst_pin_coord(i10.name, 'O', rg_m3m4)
<     i11_i_xy = laygen.get_inst_pin_coord(i11.name, 'I', rg_m3m4)
<     i11_o_xy = laygen.get_inst_pin_coord(i11.name, 'O', rg_m3m4)
<     
<     #Latch coordinate
<     ilch0_i_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0TINV0', 'I', rg_m3m4)
<     ilch0_ck_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0TINV0', 'EN', rg_m3m4)
<     ilch0_ckb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0TINV0', 'ENB', rg_m3m4)
<     ilch0_stb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0ND0', 'B', rg_m3m4)  #set pin of latch 0
<     ilch0_rstb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0ND1', 'B', rg_m3m4) #reset pin of latch 0
<     ilch0_o_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH0ND0', 'O', rg_m3m4)
< 
<     ilch1_i_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1TINV0', 'I', rg_m3m4)
<     ilch1_ck_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1TINV0', 'EN', rg_m3m4)
<     ilch1_ckb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1TINV0', 'ENB', rg_m3m4)
<     ilch1_stb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1ND0', 'B', rg_m3m4)   #set pin of latch 0
<     ilch1_rstb_xy = laygen.get_inst_pin_coord('I'+objectname_pfix+'LCH1ND1', 'B', rg_m3m4)  #reset pin of latch 1
<     ilch1_o_xy = laygen.get_inst_pin_coord('I'+objectname_pfix + 'LCH1ND0', 'O', rg_m3m4)
<     
<     #clk
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i12_o_xy[0], i8_i_xy[0], 5, rg_m3m4)
<     # iclkb
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i8_o_xy[0], i9_i_xy[0], 3, rg_m3m4)
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i9_i_xy[0], ilch1_ckb_xy[0], 3, rg_m3m4)
<     # iclk
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i9_o_xy[0], ilch1_ck_xy[0], 2, rg_m3m4)
<     # intermediate
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], ilch0_o_xy[0], ilch1_i_xy[0], 5, rg_m3m4)
<     # stb
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i10_o_xy[0], ilch0_stb_xy[0], 6, rg_m3m4)
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i10_o_xy[0], ilch1_stb_xy[0], 6, rg_m3m4)
<     # rstb
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i11_o_xy[0], ilch0_rstb_xy[0], 7, rg_m3m4)
<     laygen.route_vhv(laygen.layers['metal'][3], laygen.layers['metal'][4], i11_o_xy[0], ilch1_rstb_xy[0], 7, rg_m3m4)
< 
<     
<     #pin
<     if create_pin == True:
<         laygen.pin(name='I', layer=laygen.layers['pin'][3], xy=ilch0_i_xy, gridname=rg_m3m4)
<         laygen.pin(name='CLKB', layer=laygen.layers['pin'][3], xy=i12_i_xy, gridname=rg_m3m4)
<         laygen.pin(name='ST', layer=laygen.layers['pin'][3], xy=i10_i_xy, gridname=rg_m3m4)
<         laygen.pin(name='RST', layer=laygen.layers['pin'][3], xy=i11_i_xy, gridname=rg_m3m4)
<         laygen.pin(name='O', layer=laygen.layers['pin'][3], xy=ilch1_o_xy, gridname=rg_m3m4)
< 
<         #power pin
<         rvdd0_pin_xy = laygen.get_inst_pin_coord(i12.name, 'VDD', rg_m1m2)
<         rvdd1_pin_xy = laygen.get_inst_pin_coord("I" + objectname_pfix + 'LCH1ND0', 'VDD', rg_m1m2) #(fix this)
<         rvss0_pin_xy = laygen.get_inst_pin_coord(i12.name, 'VSS', rg_m1m2)
<         rvss1_pin_xy = laygen.get_inst_pin_coord("I" + objectname_pfix + 'LCH1ND0', 'VSS', rg_m1m2)
< 
<         laygen.pin(name='VDD', layer=laygen.layers['pin'][2], xy=np.vstack((rvdd0_pin_xy[0],rvdd1_pin_xy[1])), gridname=rg_m1m2)
<         laygen.pin(name='VSS', layer=laygen.layers['pin'][2], xy=np.vstack((rvss0_pin_xy[0],rvss1_pin_xy[1])), gridname=rg_m1m2)
<     
4616a4159,4160
>     laygen.save_template(filename=workinglib+'.yaml', libname=workinglib)
> 
4642,4737d4185
<     tgate_dn_size = [2, 4, 8, 16, 18, 24]
<     pull_dn_size = 4
<     for m in tgate_dn_size:
<         laygen.add_cell('tgate_dn_'+str(m)+'x')
<         laygen.sel_cell('tgate_dn_'+str(m)+'x')
<         generate_tgate_dn(laygen, objectname_pfix='TG0',
<                    placement_grid=pg, routing_grid_m1m2=rg_m1m2, routing_grid_m2m3=rg_m2m3,
<                    routing_grid_m1m2_pin=rg_m1m2_pin, routing_grid_m2m3_pin=rg_m2m3_pin,
<                    devname_nmos_boundary='nmos4_fast_boundary',
<                    devname_nmos_body='nmos4_fast_center_nf2',
<                    devname_nmos_space='nmos4_fast_space',
<                    devname_pmos_boundary='pmos4_fast_boundary',
<                    devname_pmos_body='pmos4_fast_center_nf2',
<                    devname_pmos_space='pmos4_fast_space',
<                    m=m, n= pull_dn_size, create_pin=True
<                    )
<         laygen.add_template_from_cell()
<         mycell_list.append('tgate_dn_'+str(m)+'x')
<     
<     #cap_sw
<     cap_sw_size = [2, 4, 8, 16, 32]
<     for m in cap_sw_size:
<         laygen.add_cell('cap_sw_'+str(m)+'x')
<         laygen.sel_cell('cap_sw_'+str(m)+'x')
<         generate_cap_sw(laygen, objectname_pfix='CSW0',
<                    placement_grid=pg, routing_grid_m1m2=rg_m1m2, routing_grid_m2m3=rg_m2m3,
<                    routing_grid_m1m2_pin=rg_m1m2_pin, routing_grid_m2m3_pin=rg_m2m3_pin,
<                    devname_nmos_boundary='nmos4_fast_boundary',
<                    devname_nmos_body='nmos4_fast_center_nf2',
<                    devname_nmos_space='nmos4_fast_space',
<                    devname_pmos_boundary='pmos4_fast_boundary',
<                    devname_pmos_body='pmos4_fast_center_nf2',
<                    devname_pmos_space='pmos4_fast_space',
<                    m=m, create_pin=True
<                    )
<         laygen.add_template_from_cell()
<         mycell_list.append('cap_sw_'+str(m)+'x')  
< 
<     inv_size = [6, 8, 36, 40, 50, 64, 100]
<     for m in inv_size:
<         laygen.add_cell('inv_'+str(m)+'x')
<         laygen.sel_cell('inv_'+str(m)+'x')
<         generate_inv(laygen, objectname_pfix='INV0',
<                  placement_grid=pg, routing_grid_m1m2=rg_m1m2, routing_grid_m2m3=rg_m2m3, routing_grid_m1m2_pin=rg_m1m2_pin,
<                  routing_grid_m2m3_pin=rg_m2m3_pin,
<                  devname_nmos_boundary='nmos4_fast_boundary',
<                  devname_nmos_body='nmos4_fast_center_nf2',
<                  devname_pmos_boundary='pmos4_fast_boundary',
<                  devname_pmos_body='pmos4_fast_center_nf2',
<                  m=m, create_pin=True
<                  )
<         laygen.add_template_from_cell()
<         mycell_list.append('inv_'+str(m)+'x')  
<        
<     #latch
<     latch_2ck_strstbh_size = [1, 2, 4, 8]
<     for m in latch_2ck_strstbh_size:
<         laygen.add_cell('latch_2ck_strstbh_'+str(m)+'x')
<         laygen.sel_cell('latch_2ck_strstbh_'+str(m)+'x')
<         laygen.templates.sel_library(workinglib)
<         generate_latch_2ck_strstbh(laygen, objectname_pfix='LATCH0', placement_grid=pg,
<                    routing_grid_m1m2=rg_m1m2, routing_grid_m2m3=rg_m2m3, routing_grid_m3m4=rg_m3m4,
<                    origin=np.array([0, 0]), m=m, create_pin=True)
<         laygen.templates.sel_library(utemplib)
<         laygen.add_template_from_cell()
<         mycell_list.append('latch_2ck_strstbh_'+str(m)+'x')
< 
< 
<     #dff
<     dff_strsth_size = [1, 2, 4, 8]
<     for m in dff_strsth_size:
<         laygen.add_cell('dff_strsth_'+str(m)+'x')
<         laygen.sel_cell('dff_strsth_'+str(m)+'x')
<         laygen.templates.sel_library(workinglib)
<         generate_dff_strsth(laygen, objectname_pfix='DFF0', placement_grid=pg,
<                  routing_grid_m1m2=rg_m1m2, routing_grid_m2m3=rg_m2m3, routing_grid_m3m4=rg_m3m4,
<                  origin=np.array([0, 0]), m=m, create_pin=True)
<         laygen.templates.sel_library(utemplib)
<         laygen.add_template_from_cell()
<         mycell_list.append('dff_strsth_'+str(m)+'x')
< 
<     #dff_clkb
<     dff_strsth_clkb_size = [1, 2, 4, 8]
<     for m in dff_strsth_clkb_size:
<         laygen.add_cell('dff_strsth_ckb_'+str(m)+'x')
<         laygen.sel_cell('dff_strsth_ckb_'+str(m)+'x')
<         laygen.templates.sel_library(workinglib)
<         generate_dff_strsth_ckb(laygen, objectname_pfix='DFF0', placement_grid=pg,
<                  routing_grid_m1m2=rg_m1m2, routing_grid_m2m3=rg_m2m3, routing_grid_m3m4=rg_m3m4,
<                  origin=np.array([0, 0]), m=m, create_pin=True)
<         laygen.templates.sel_library(utemplib)
<         laygen.add_template_from_cell()
<         mycell_list.append('dff_strsth_ckb_'+str(m)+'x')
< 
<     laygen.save_template(filename=workinglib+'.yaml', libname=workinglib)
< 
